1
00:00:00,706 --> 00:00:01,965
欢迎回来，我们继续

2
00:00:01,965 --> 00:00:06,049
讲如何构建自己的函数

3
00:00:06,049 --> 00:00:07,611
我们再次

4
00:00:07,611 --> 00:00:10,397
使用 def 关键字来定义函数

5
00:00:10,397 --> 00:00:13,221
我们将在后面调用这个函数

6
00:00:13,221 --> 00:00:14,460
还有一点

7
00:00:14,460 --> 00:00:16,338
是我们要定义函数的名称

8
00:00:16,338 --> 00:00:17,874
实际上我们在扩展 Python

9
00:00:17,874 --> 00:00:19,987
并创建新的预定义内容

10
00:00:19,987 --> 00:00:22,242
以供自己在后面的代码里使用

11
00:00:22,242 --> 00:00:23,895
从 def 关键字开始

12
00:00:23,895 --> 00:00:26,407
我们会看到一些可选的参数

13
00:00:26,407 --> 00:00:27,748
括弧括起来的部分

14
00:00:27,748 --> 00:00:28,581
然后是名称

15
00:00:28,581 --> 00:00:30,613
函数名称遵循相同的规则

16
00:00:30,613 --> 00:00:32,461
如同变量名称

17
00:00:32,461 --> 00:00:34,421
然后添加一个缩进

18
00:00:34,421 --> 00:00:35,557
和你想实现的任何代码

19
00:00:35,557 --> 00:00:37,083
然后是取消缩进的代码块

20
00:00:37,083 --> 00:00:39,837
这些定义了函数的重要部分

21
00:00:39,837 --> 00:00:43,169
这里有个关键点，这并不是

22
00:00:43,169 --> 00:00:44,002
调用

23
00:00:45,473 --> 00:00:47,577
不是调用和执行

24
00:00:47,577 --> 00:00:51,344
这只是保存，弄清定义

25
00:00:51,344 --> 00:00:53,397
这是程序的输出

26
00:00:53,397 --> 00:00:55,949
这定义了函数，但没有使用它

27
00:00:55,949 --> 00:00:58,396
所以这是种不完整的函数

28
00:00:58,396 --> 00:01:00,641
所以我们现在就开始打印出 x 等于 5

29
00:01:00,641 --> 00:01:01,474
你不需要重新定义

30
00:01:01,474 --> 00:01:03,283
在开始已经定义好了所有的函数

31
00:01:03,283 --> 00:01:04,703
这个函数运行后

32
00:01:04,703 --> 00:01:07,091
输出 hello

33
00:01:07,091 --> 00:01:09,399
然后我们在这里定义一个函数

34
00:01:09,399 --> 00:01:11,776
哦，你想在这里做新的事情

35
00:01:11,776 --> 00:01:12,679
那就添加一个新的

36
00:01:12,679 --> 00:01:14,464
这从某种意义上来说是个变量

37
00:01:14,464 --> 00:01:17,099
把这段复制到这里

38
00:01:17,099 --> 00:01:19,465
想着以后要使用

39
00:01:19,465 --> 00:01:22,658
自己就需要记住，这里还没有执行任何事

40
00:01:22,658 --> 00:01:24,525
没有输出

41
00:01:24,525 --> 00:01:28,042
这里说打印 Yo，输出一个 Yo

42
00:01:28,042 --> 00:01:30,642
这里给 x 加上 2，那现在 x 等于7

43
00:01:30,642 --> 00:01:31,595
然后输出一个 x

44
00:01:31,595 --> 00:01:33,060
没有七，有七

45
00:01:33,060 --> 00:01:36,035
这些打印语句一直没有运行

46
00:01:36,035 --> 00:01:37,272
没有运行

47
00:01:37,272 --> 00:01:38,105
为什么

48
00:01:38,105 --> 00:01:39,956
因为我们没有在调用这个函数

49
00:01:39,956 --> 00:01:43,117
我们只是定义了，但还没有调用

50
00:01:43,117 --> 00:01:46,589
所以让我们来看看如何调用函数

51
00:01:46,589 --> 00:01:48,327
你定义它，然后使用它

52
00:01:48,327 --> 00:01:50,135
有时候你定义了一次并使用一次

53
00:01:50,135 --> 00:01:52,463
但更常用是定义一次后

54
00:01:52,463 --> 00:01:54,036
多次使用

55
00:01:54,036 --> 00:01:55,601
也就是储存和复用的模式

56
00:01:55,601 --> 00:02:00,326
定义是储存，调用是复用

57
00:02:00,326 --> 00:02:01,931
这里只是一个略微不同的版本

58
00:02:01,931 --> 00:02:03,423
相对上一个程序

59
00:02:03,423 --> 00:02:07,232
这里会真正的调用它

60
00:02:07,232 --> 00:02:08,989
当 x 等于 five，打印 hello

61
00:02:08,989 --> 00:02:12,464
定义，打印 hello

62
00:02:12,464 --> 00:02:15,126
这个定义的函数没有输出

63
00:02:15,126 --> 00:02:17,359
由于这里没有缩进

64
00:02:17,359 --> 00:02:20,522
那这就是整个代码块

65
00:02:20,522 --> 00:02:22,400
打印的部分

66
00:02:22,400 --> 00:02:24,544
打印出 Yo

67
00:02:24,544 --> 00:02:25,871
现在我们调用

68
00:02:25,871 --> 00:02:27,328
这是调用

69
00:02:27,328 --> 00:02:28,749
我们就调用这个函数

70
00:02:28,749 --> 00:02:31,127
现在这个函数可以进行

71
00:02:31,127 --> 00:02:32,544
让我们清除这些

72
00:02:33,644 --> 00:02:35,554
所以我们到这里了

73
00:02:35,554 --> 00:02:38,796
现在仿佛程序在这里暂停

74
00:02:38,796 --> 00:02:41,742
等定义调用完再重新回到这里开始运行

75
00:02:41,742 --> 00:02:45,582
继续运行代码，然后再回到这部分

76
00:02:45,582 --> 00:02:46,801
然后继续进行

77
00:02:46,801 --> 00:02:48,946
就像锚点一样

78
00:02:48,946 --> 00:02:50,742
可以返回到应该返回的地方

79
00:02:50,742 --> 00:02:52,749
然后再接着运行和打印

80
00:02:52,749 --> 00:02:54,700
产生

81
00:02:54,700 --> 00:02:57,962
两行的输出

82
00:02:57,962 --> 00:02:59,648
应该在

83
00:02:59,648 --> 00:03:01,526
应该是这里的

84
00:03:01,526 --> 00:03:03,163
然后 x = x 加上 2， 得到 7

85
00:03:03,163 --> 00:03:05,285
输出 7

86
00:03:05,285 --> 00:03:07,618
然后这里调用

87
00:03:08,861 --> 00:03:11,337
自动调用或者手动调用这个函数

88
00:03:11,337 --> 00:03:16,040
定义，然后调用，对吧

89
00:03:16,040 --> 00:03:20,532
现在，除开声明、返回和调用

90
00:03:20,532 --> 00:03:22,501
我们可以传递参数

91
00:03:22,501 --> 00:03:24,758
一个参数的例子是

92
00:03:24,758 --> 00:03:26,436
在 max 函数中，我们说

93
00:03:26,436 --> 00:03:28,395
这是我希望这个函数能找到最大值

94
00:03:28,395 --> 00:03:30,273
最大的那一个

95
00:03:30,273 --> 00:03:31,737
其中

96
00:03:31,737 --> 00:03:34,116
在整个存储和复用的模式里

97
00:03:34,116 --> 00:03:35,221
我们有几行代码

98
00:03:35,221 --> 00:03:38,736
有时我们会想要做一些略微不同的操作

99
00:03:38,736 --> 00:03:40,008
在不同的调用里

100
00:03:40,008 --> 00:03:43,827
所以我们使用这些参数来进行调整

101
00:03:43,827 --> 00:03:47,960
比如通常会查找最大值

102
00:03:47,960 --> 00:03:50,033
但什么东西定义了最大值

103
00:03:50,033 --> 00:03:53,365
构成一个函数，这更有用

104
00:03:53,365 --> 00:03:56,047
并在更多的情况下可重复使用

105
00:03:56,047 --> 00:03:58,668
参数是我们传递进去的

106
00:03:58,668 --> 00:04:00,142
我们定义了函数

107
00:04:00,142 --> 00:04:01,788
我们要去构建的函数

108
00:04:01,788 --> 00:04:03,871
在定义的描述里

109
00:04:04,732 --> 00:04:07,335
定义函数的名称为 green

110
00:04:07,335 --> 00:04:08,940
然后这里是参数

111
00:04:08,940 --> 00:04:11,642
就是我们要传递进入的

112
00:04:11,642 --> 00:04:13,705
这个变量 lang

113
00:04:13,705 --> 00:04:17,078
只存在于该函数体内

114
00:04:17,078 --> 00:04:19,078
而且它代表一种占位符

115
00:04:19,078 --> 00:04:21,934
同样，这并不是一个真正的变量

116
00:04:21,934 --> 00:04:23,606
它是一个引用的占位符

117
00:04:23,606 --> 00:04:26,688
来代表传入的第一个变量

118
00:04:26,688 --> 00:04:28,923
就会被设置在这里

119
00:04:28,923 --> 00:04:29,923
那么 lang 变量

120
00:04:30,964 --> 00:04:33,788
就说我们的第一个参数，不管传递进来的是什么值

121
00:04:33,788 --> 00:04:37,172
我们现在就不需要看到这个部分

122
00:04:37,172 --> 00:04:39,009
我们只用知道我们需要创建一个函数

123
00:04:39,009 --> 00:04:41,650
然后要使用一个参数

124
00:04:41,650 --> 00:04:43,938
lang 在这里就作为一个占位符来表示

125
00:04:43,938 --> 00:04:46,120
传入的是什么参数

126
00:04:46,120 --> 00:04:46,994
好了

127
00:04:46,994 --> 00:04:49,168
所以在函数里我们将判断

128
00:04:49,168 --> 00:04:52,432
如果语言是西班牙语，就打印 Hola

129
00:04:52,432 --> 00:04:55,735
如果是法语，就打印 Bonjour

130
00:04:55,735 --> 00:04:56,905
其他打印 Hello

131
00:04:56,905 --> 00:04:59,831
我们在这里有一个非常简化的

132
00:04:59,831 --> 00:05:02,379
语言翻译系统

133
00:05:02,379 --> 00:05:05,438
然后，这里的 def 当然什么也不做

134
00:05:05,438 --> 00:05:09,605
只是记住它然后定义 greet

135
00:05:12,465 --> 00:05:13,665
接下来

136
00:05:13,665 --> 00:05:14,866
我们现在来调用

137
00:05:14,866 --> 00:05:16,053
这里的意思是来找到某一个

138
00:05:16,053 --> 00:05:17,446
被叫作 greet 的定义

139
00:05:17,446 --> 00:05:19,127
如果这里不填内容

140
00:05:19,127 --> 00:05:22,489
它会返回一个回溯，因为你将它扩展并命名为 greet

141
00:05:22,489 --> 00:05:24,468
所以它现在开始运行

142
00:05:24,468 --> 00:05:26,166
在这里停住

143
00:05:26,166 --> 00:05:27,385
返回这里

144
00:05:27,385 --> 00:05:28,819
然后

145
00:05:28,819 --> 00:05:31,069
lang 代表的是 en

146
00:05:32,697 --> 00:05:36,310
现在我们可以运行下面的 if 程序

147
00:05:36,310 --> 00:05:39,893
elif，这里太乱了

148
00:05:43,332 --> 00:05:45,315
现在 en 被通过 lang 传递进来

149
00:05:45,315 --> 00:05:47,590
进入这里的代码

150
00:05:47,590 --> 00:05:51,979
如果不是 es、fr，那么就会打印 hello

151
00:05:51,979 --> 00:05:54,974
然后又回到下一行

152
00:05:54,974 --> 00:05:56,550
然后我们再一次调用它

153
00:05:56,550 --> 00:06:00,318
并且这次 es 是 lang，所以它运行这个代码

154
00:06:00,318 --> 00:06:02,370
并打印 Hola

155
00:06:02,370 --> 00:06:04,735
接着它就像这样调用

156
00:06:04,735 --> 00:06:05,818
并打印

157
00:06:07,658 --> 00:06:08,520
Bonjour

158
00:06:08,520 --> 00:06:09,353
你理解到这个想法

159
00:06:09,353 --> 00:06:14,179
所以这是一个占位符，用于函数接下来的

160
00:06:14,179 --> 00:06:18,121
调用

161
00:06:18,121 --> 00:06:20,985
我们可以获取程序员输入的任意值

162
00:06:20,985 --> 00:06:22,448
作为第一个参数

163
00:06:22,448 --> 00:06:25,121
我们在这个定义中明确了

164
00:06:25,121 --> 00:06:27,385
我们准备好了接受第一个参数

165
00:06:27,385 --> 00:06:29,876
请用参数调用我们

166
00:06:29,876 --> 00:06:31,034
然后我们就可以

167
00:06:31,034 --> 00:06:33,481
针对不同的值做稍微不同的操作

168
00:06:33,481 --> 00:06:35,756
所以这是一个可重复使用的函数

169
00:06:35,756 --> 00:06:38,287
能够打印三种不同语言的“你好”

170
00:06:38,287 --> 00:06:39,506
然后我们告诉它是用什么语言

171
00:06:39,506 --> 00:06:43,339
我们现在实际调用了函数

172
00:06:44,928 --> 00:06:47,053
所以这会将一些东西放入函数中

173
00:06:47,053 --> 00:06:48,668
然后获取到一些东西

174
00:06:48,668 --> 00:06:51,541
这是返回的概念

175
00:06:51,541 --> 00:06:54,194
这就是 return 语句

176
00:06:54,194 --> 00:06:55,944
return 语句

177
00:06:57,404 --> 00:07:00,675
这是一个可以做两件基本事情的可执行语句

178
00:07:00,675 --> 00:07:03,114
它做的第一件事是

179
00:07:03,114 --> 00:07:04,231
在这里结束

180
00:07:04,231 --> 00:07:07,267
因为是一个单行函数，描述得有点冗杂了

181
00:07:07,267 --> 00:07:11,451
但是当 Python 进入 return 语句时

182
00:07:11,451 --> 00:07:13,870
它不会继续到下一行

183
00:07:13,870 --> 00:07:15,120
它只是返回

184
00:07:15,120 --> 00:07:16,979
这是调用的结束

185
00:07:16,979 --> 00:07:18,758
对于这个特定的函数

186
00:07:18,758 --> 00:07:21,459
但更重要的是，它将作为其参数

187
00:07:21,459 --> 00:07:24,150
你可以在没有参数的情况下返回

188
00:07:24,150 --> 00:07:26,264
那它将停止执行这个函数

189
00:07:26,264 --> 00:07:28,883
就像结束循环一样

190
00:07:28,883 --> 00:07:30,101
跳出循环，继续进行

191
00:07:30,101 --> 00:07:33,204
不要运行这个下一行，退出这个部分

192
00:07:33,204 --> 00:07:37,044
但它也同样允许说明你想要的具体操作

193
00:07:37,044 --> 00:07:39,206
作为表达式中的剩余值（residual value）

194
00:07:39,206 --> 00:07:40,628
我们现在打印

195
00:07:40,628 --> 00:07:42,245
这个 greet 函数

196
00:07:42,245 --> 00:07:44,358
那么这里就会出现

197
00:07:44,358 --> 00:07:48,459
函数运行后 return 的值

198
00:07:48,459 --> 00:07:50,735
那么这里就会打印 hello

199
00:07:50,735 --> 00:07:53,476
我们再次调用，就会再次打印 hello

200
00:07:53,476 --> 00:07:54,727
好了

201
00:07:54,727 --> 00:07:55,560
那么

202
00:07:58,027 --> 00:08:01,217
对于 return 语句来说

203
00:08:01,217 --> 00:08:03,043
我称之为剩余值

204
00:08:03,043 --> 00:08:06,540
代表着函数运行结束后会出现在这里的值

205
00:08:06,540 --> 00:08:08,707
这里就是字符串 hello

206
00:08:09,911 --> 00:08:12,403
我们称一个函数如果有产出结果

207
00:08:12,403 --> 00:08:14,130
那就是成功返回

208
00:08:14,130 --> 00:08:16,961
你可以只说一个单独的 return

209
00:08:16,961 --> 00:08:18,568
甚至不需要 return 语句

210
00:08:18,568 --> 00:08:19,888
函数会自动运行到最后一行

211
00:08:19,888 --> 00:08:21,484
然后从函数的最后一行

212
00:08:21,484 --> 00:08:22,945
自动返回

213
00:08:22,945 --> 00:08:24,634
这里我们重写一下

214
00:08:24,634 --> 00:08:26,051
我们的小语言系统

215
00:08:27,458 --> 00:08:29,133
我们要创建一个 greeting 的程序

216
00:08:29,133 --> 00:08:31,873
然后把语言作为第一个参数

217
00:08:31,873 --> 00:08:33,559
不仅仅做打印的操作

218
00:08:33,559 --> 00:08:35,330
之前已经做过了

219
00:08:35,330 --> 00:08:37,126
现在把它改得更像一个函数

220
00:08:37,126 --> 00:08:40,673
同时具备输入和输出

221
00:08:40,673 --> 00:08:42,590
并且将输出作为返回的内容，而不仅仅是打印

222
00:08:42,590 --> 00:08:45,834
用函数来打印有点夸张了

223
00:08:45,834 --> 00:08:49,389
然后我们返回 hola、bonjour 和 hello

224
00:08:49,389 --> 00:08:51,349
在不同情况下返回它们

225
00:08:51,349 --> 00:08:53,694
于是我们这里打印 greet('en')

226
00:08:53,694 --> 00:08:56,216
所以它运行一次代码，lang 是 en

227
00:08:56,216 --> 00:08:58,277
然后运行这个代码

228
00:08:58,277 --> 00:09:00,219
这个产生的值是 hello

229
00:09:00,219 --> 00:09:02,349
所以打印出 Hello Glenn

230
00:09:02,349 --> 00:09:03,516
同样

231
00:09:04,776 --> 00:09:08,060
运行这段代码的时候，会将 es 传递作为 lang 的值

232
00:09:08,060 --> 00:09:10,386
然后运行这个语句

233
00:09:10,386 --> 00:09:12,347
即使这儿有其他语句

234
00:09:12,347 --> 00:09:14,389
函数也不会执行，直到返回

235
00:09:14,389 --> 00:09:17,306
that says that this bit right here,

236
00:09:19,622 --> 00:09:21,308
is now hola.

237
00:09:21,308 --> 00:09:22,600
So Hola Sally.

238
00:09:22,600 --> 00:09:25,166
And the same with French,
goes in, runs again,

239
00:09:25,166 --> 00:09:28,817
out comes the return statement,
and then Bonjour Michael.

240
00:09:28,817 --> 00:09:31,040
So you see how we can control

241
00:09:31,040 --> 00:09:33,194
as we're writing the application,

242
00:09:33,194 --> 00:09:35,704
we can control as we're
writing the function

243
00:09:35,704 --> 00:09:38,820
what the residual value
that we want to see

244
00:09:38,820 --> 00:09:40,975
in whatever expression is calling us.

245
00:09:40,975 --> 00:09:42,032
Sometimes we have returns

246
00:09:42,032 --> 00:09:44,786
and sometimes we don't have returns.

247
00:09:44,786 --> 00:09:45,619
So,

248
00:09:48,728 --> 00:09:51,439
so if you think of the max code
that we talked about before,

249
00:09:51,439 --> 00:09:53,897
we can kind of see that
somewhere inside that max code

250
00:09:53,897 --> 00:09:54,925
there's a return,

251
00:09:54,925 --> 00:09:57,789
and that's how it
communicates the w back to us.

252
00:09:57,789 --> 00:09:59,931
So we pass in this argument Hello World,

253
00:09:59,931 --> 00:10:01,638
it comes in as a parameter

254
00:10:01,638 --> 00:10:04,920
and it's gonna loop
through this imp somewhere,

255
00:10:04,920 --> 00:10:06,892
it's gonna loop over and over into imp,

256
00:10:06,892 --> 00:10:08,912
and then at some point it's
gonna figure something out,

257
00:10:08,912 --> 00:10:11,687
and tell us what it
wants to send back to us,

258
00:10:11,687 --> 00:10:14,545
is a return statement,
and so the w comes back

259
00:10:14,545 --> 00:10:16,795
and gets assigned into big.

260
00:10:19,108 --> 00:10:21,078
You can have more than one parameter,

261
00:10:21,078 --> 00:10:22,519
and they're just in order,

262
00:10:22,519 --> 00:10:24,044
the first one and the second one,

263
00:10:24,044 --> 00:10:24,877
three and five,

264
00:10:24,877 --> 00:10:27,539
so three becomes a and five becomes b,

265
00:10:27,539 --> 00:10:28,811
and away we go.

266
00:10:28,811 --> 00:10:30,811
So we just use this to add two numbers

267
00:10:30,811 --> 00:10:33,478
and so three plus five is eight.

268
00:10:35,664 --> 00:10:37,332
So you can add as many as you like,

269
00:10:37,332 --> 00:10:38,388
and the order matters,

270
00:10:38,388 --> 00:10:40,035
and if you do things like,

271
00:10:40,035 --> 00:10:41,660
you tell it you want parameters

272
00:10:41,660 --> 00:10:42,778
and you don't give it to them,

273
00:10:42,778 --> 00:10:44,597
then that'll become a traceback.

274
00:10:44,597 --> 00:10:45,816
And it'll blow up.

275
00:10:45,816 --> 00:10:47,584
You could also talk about
optional parameters,

276
00:10:47,584 --> 00:10:49,076
if, later.

277
00:10:49,076 --> 00:10:51,177
你不必有返回的值

278
00:10:51,177 --> 00:10:53,009
也就是说可以简单的

279
00:10:53,009 --> 00:10:55,093
不去专门调用带值的 return

280
00:10:55,093 --> 00:10:56,843
等函数运行到最后

281
00:10:57,722 --> 00:11:02,578
会默认返回值

282
00:11:02,578 --> 00:11:06,903
这就是函数的基础知识

283
00:11:06,903 --> 00:11:08,194
操作

284
00:11:08,194 --> 00:11:10,542
但我不想让你们太激动

285
00:11:10,542 --> 00:11:11,892
关于写函数

286
00:11:11,892 --> 00:11:14,432
一些编程类课程喜欢让学生

287
00:11:14,432 --> 00:11:16,362
不停地写函数

288
00:11:16,362 --> 00:11:20,405
但可以明确的是，函数是一个非常强大的机制

289
00:11:20,405 --> 00:11:24,690
当我们写了 15 万 20 万行代码

290
00:11:24,690 --> 00:11:26,622
两百，一千行

291
00:11:26,622 --> 00:11:28,124
一万行代码后

292
00:11:28,124 --> 00:11:30,901
函数的概念就非常重要

293
00:11:30,901 --> 00:11:33,022
如果没有函数，写码会写疯

294
00:11:33,022 --> 00:11:35,885
但假如只能写 20 行

295
00:11:35,885 --> 00:11:39,393
逼自己用函数就显得没有必要

296
00:11:39,393 --> 00:11:41,881
所以不用担心这点

297
00:11:41,881 --> 00:11:45,285
也许还不着急着用这个

298
00:11:45,285 --> 00:11:47,317
我们调用不少的预定义函数

299
00:11:47,317 --> 00:11:49,815
我们将在接下来的课程中细讲

300
00:11:49,815 --> 00:11:51,421
当你在某个时间感到

301
00:11:51,421 --> 00:11:53,290
再也不想重复某些代码的时候

302
00:11:53,290 --> 00:11:55,991
就是时候开始写函数了

303
00:11:55,991 --> 00:11:59,058
这也是为什么我们不用过早地强调函数

304
00:11:59,058 --> 00:12:01,954
我们只是希望你知道函数是什么

305
00:12:01,954 --> 00:12:03,803
如何使用，然后在某个时候

306
00:12:03,803 --> 00:12:05,063
你会想到要自己定义一个

307
00:12:05,063 --> 00:12:06,851
但不要担心，可能还会有些时间

308
00:12:06,851 --> 00:12:09,504
你才需要定义一个函数

309
00:12:09,504 --> 00:12:13,527
以上就总结了我们关于函数的课程

310
00:12:13,527 --> 00:12:17,360
然后我们接着来学习迭代

