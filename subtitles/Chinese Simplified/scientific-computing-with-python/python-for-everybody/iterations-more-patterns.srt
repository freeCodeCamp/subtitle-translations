1
00:00:00,873 --> 00:00:02,442
- Now we're going to look
at some more patterns

2
00:00:02,442 --> 00:00:04,757
of the different things we
can do at the top of the loop,

3
00:00:04,757 --> 00:00:06,612
in the middle of the loop,
and at the bottom of the loop.

4
00:00:06,612 --> 00:00:08,841
And the first one we're
going to do is counting.

5
00:00:08,841 --> 00:00:12,107
We're going to take a look
at the number of something,

6
00:00:12,107 --> 00:00:13,689
the number of things in our list.

7
00:00:13,689 --> 00:00:15,697
We could just inspect it and see six,

8
00:00:15,697 --> 00:00:17,883
but you'll have four
loops like you're reading

9
00:00:17,883 --> 00:00:21,898
through a file or scanning
through some data,

10
00:00:21,898 --> 00:00:25,005
so the notion of counting,
you have to assume

11
00:00:25,005 --> 00:00:28,341
that you don't really know
.... that there's going

12
00:00:28,341 --> 00:00:30,642
to be a lot more than just six.

13
00:00:30,642 --> 00:00:32,307
But for now we're just going
to do six, and we're going

14
00:00:32,307 --> 00:00:35,925
to count how many things
that we see in this loop.

15
00:00:35,925 --> 00:00:39,094
And the pattern is simple,
you set a variable,

16
00:00:39,094 --> 00:00:41,081
zork to zero at the beginning.

17
00:00:41,081 --> 00:00:44,219
We often call this variable
count, in mnemonic.

18
00:00:44,219 --> 00:00:46,479
Now we're going to run
this loop six times.

19
00:00:46,479 --> 00:00:48,803
One, two, three, four, five, six.

20
00:00:48,803 --> 00:00:50,899
And each time through we're
just going to add one to zork.

21
00:00:50,899 --> 00:00:53,074
So zorks start at zero, then it goes one,

22
00:00:53,074 --> 00:00:54,986
two, three, four, five, six.

23
00:00:54,986 --> 00:00:57,017
And we're going to print it out.

24
00:00:57,017 --> 00:00:58,943
We see the nine, and zork is one.

25
00:00:58,943 --> 00:01:00,609
Two, 41, zork is two.

26
00:01:00,609 --> 00:01:04,642
Zork of 16 when we see a 15, four stops,

27
00:01:04,642 --> 00:01:07,979
and we print out
afterwards, and six is then

28
00:01:07,979 --> 00:01:10,390
the ultimate count that we got.

29
00:01:10,390 --> 00:01:13,790
That's very, very simple, the pattern is

30
00:01:13,790 --> 00:01:16,524
that set it to zero at the beginning,

31
00:01:16,524 --> 00:01:19,445
add one to it, and if you
run that enough times,

32
00:01:19,445 --> 00:01:22,842
then this is how many times that happened.

33
00:01:22,842 --> 00:01:26,357
In a sense, it's how
many times this line ran.

34
00:01:26,357 --> 00:01:28,356
Sometimes we put this in an if statement,

35
00:01:28,356 --> 00:01:31,023
et cetera, et cetera, et cetera.

36
00:01:35,706 --> 00:01:37,775
We can do the same thing to get a total.

37
00:01:37,775 --> 00:01:40,994
The way the total works is
you compute a running total

38
00:01:40,994 --> 00:01:44,156
of the items that you've
seen far, and at the end

39
00:01:44,156 --> 00:01:48,683
the running total in
effect becomes the total.

40
00:01:48,683 --> 00:01:50,605
A better variable name
for this would be sum

41
00:01:50,605 --> 00:01:53,414
or total or something, but
zork, I'll use zork again.

42
00:01:53,414 --> 00:01:56,507
So you set zork to zero, and it starts out

43
00:01:56,507 --> 00:01:59,602
the total you've seen
so far is indeed zero.

44
00:01:59,602 --> 00:02:01,652
And then we're going to
run this one, two, three,

45
00:02:01,652 --> 00:02:04,174
four, five, six times and thing is going

46
00:02:04,174 --> 00:02:06,511
to be the iteration variable,
it's going to take on

47
00:02:06,511 --> 00:02:08,938
the successive values, and
each time through we're just

48
00:02:08,938 --> 00:02:11,507
going to take our running
total and add to it

49
00:02:11,507 --> 00:02:12,965
the thing we've seen.

50
00:02:12,965 --> 00:02:15,462
So we see nine, and the
running total is nine.

51
00:02:15,462 --> 00:02:18,230
We see 41, and that
running total becomes 50.

52
00:02:18,230 --> 00:02:20,841
We see 12, the running total becomes 62.

53
00:02:20,841 --> 00:02:24,012
We get a three, it becomes 65, we get 74,

54
00:02:24,012 --> 00:02:25,517
running total's 139.

55
00:02:25,517 --> 00:02:28,212
How many more are we going to see?

56
00:02:28,212 --> 00:02:30,138
We don't know, could be
a million, could be one.

57
00:02:30,138 --> 00:02:32,221
Oh, it's only one, we get a 15,

58
00:02:32,221 --> 00:02:34,677
our running total is 154, and what's true

59
00:02:34,677 --> 00:02:38,026
at any moment here is the
running total is right

60
00:02:38,026 --> 00:02:39,919
of what we've seen so far.

61
00:02:39,919 --> 00:02:43,143
Now, when we're done,
before loop quits for us,

62
00:02:43,143 --> 00:02:47,082
and afterwards, 154 is indeed the total.

63
00:02:47,082 --> 00:02:49,680
So the running total
while we're in the loop

64
00:02:49,680 --> 00:02:51,875
at the end of the loop,
after the end of the loop

65
00:02:51,875 --> 00:02:54,154
we have the actual total.

66
00:02:54,154 --> 00:02:57,505
So it's not very difficult to
convert this to the average,

67
00:02:57,505 --> 00:02:59,791
because we've calculated the
count and we've calculated

68
00:02:59,791 --> 00:03:02,450
the running total, and now
we're going to have the average

69
00:03:02,450 --> 00:03:04,533
by simply dividing those.

70
00:03:06,271 --> 00:03:09,465
Now this time I've use mnemonic variables.

71
00:03:09,465 --> 00:03:12,095
Don't get confused by this,
mnemonic variables are just

72
00:03:12,095 --> 00:03:15,485
friendly names I chose for
you to read the code easier.

73
00:03:15,485 --> 00:03:17,859
I am not communicating
to Python in any way

74
00:03:17,859 --> 00:03:22,801
by naming this count and sum,
but count and sum is nice.

75
00:03:22,801 --> 00:03:25,108
So I set count to zero and sum to zero.

76
00:03:25,108 --> 00:03:28,124
Go back up, I set count
to zero and sum to zero

77
00:03:28,124 --> 00:03:31,591
at the beginning, and the count
is zero and the sum is zero.

78
00:03:31,591 --> 00:03:33,335
And then I'm going to
run this loop six times.

79
00:03:33,335 --> 00:03:36,124
One, two, three, four,
five, six, and each time

80
00:03:36,124 --> 00:03:38,791
value is the iteration variable.

81
00:03:40,361 --> 00:03:43,143
Every time I run the loop I
count equals count plus one,

82
00:03:43,143 --> 00:03:45,785
sum equals sum plus value,
so I have a running count

83
00:03:45,785 --> 00:03:48,590
and a running total,
and they show up here.

84
00:03:48,590 --> 00:03:50,012
One, two, three, four, five, six,

85
00:03:50,012 --> 00:03:51,241
and then the running total.

86
00:03:51,241 --> 00:03:53,939
And then at some point the
for loop, we do the last one

87
00:03:53,939 --> 00:03:56,663
and the for loop jumps
out, and it divides,

88
00:03:56,663 --> 00:03:59,561
654 is the count in the running total,

89
00:03:59,561 --> 00:04:03,043
and then it divides the
average sum over count.

90
00:04:03,043 --> 00:04:06,417
So that's just a pattern of
something in the beginning,

91
00:04:06,417 --> 00:04:10,250
something in the middle,
something in the end.

92
00:04:11,492 --> 00:04:13,224
Another kind of thing
we tend to do in loops

93
00:04:13,224 --> 00:04:17,405
is we look for things, we hunt for things.

94
00:04:17,405 --> 00:04:20,022
This is where we have an if
statement inside of a loop,

95
00:04:20,022 --> 00:04:22,430
and of course I've created
a silly simple thing.

96
00:04:22,430 --> 00:04:25,930
In this code I am looking for large values

97
00:04:27,050 --> 00:04:28,881
that are greater than 20.

98
00:04:28,881 --> 00:04:31,454
Again, don't think of
this as just six numbers,

99
00:04:31,454 --> 00:04:33,004
but I'm looking for all
the values and I want

100
00:04:33,004 --> 00:04:35,114
to print them out.

101
00:04:35,114 --> 00:04:38,469
It says before, it's
going to run this nine,

102
00:04:38,469 --> 00:04:41,538
if nine's greater than 20,
it's false, so it goes back up.

103
00:04:41,538 --> 00:04:45,799
41, true, so it prints
out 41 and goes back up.

104
00:04:45,799 --> 00:04:48,049
12, false, it goes back up.

105
00:04:49,149 --> 00:04:51,214
Three, false, goes back up.

106
00:04:51,214 --> 00:04:54,158
74, true, so it runs this, so out comes

107
00:04:54,158 --> 00:04:57,038
that little print statement, goes back up.

108
00:04:57,038 --> 00:04:59,822
And then 15 is the last
one, and that's false.

109
00:04:59,822 --> 00:05:02,149
It goes back up and the
for says we're done.

110
00:05:02,149 --> 00:05:03,889
And then we do afterwards.

111
00:05:03,889 --> 00:05:08,718
This is just the notion
of having an if statement

112
00:05:08,718 --> 00:05:12,135
inside of a for loop, where we're sort of

113
00:05:13,081 --> 00:05:16,889
picking or choosing or selecting
or looking for something

114
00:05:16,889 --> 00:05:21,056
in a large set of things
that we're looping through.

115
00:05:22,048 --> 00:05:23,956
We can also say I want to know

116
00:05:23,956 --> 00:05:27,152
if a particular value is there.

117
00:05:27,152 --> 00:05:28,788
We're going to use a Boolean variable.

118
00:05:28,788 --> 00:05:32,741
We've talked about integer
variables like one, 42,

119
00:05:32,741 --> 00:05:35,255
and then floating point
variables like 98.6,

120
00:05:35,255 --> 00:05:37,957
and then string variables like Hello world

121
00:05:37,957 --> 00:05:38,995
that have quotes in them.

122
00:05:38,995 --> 00:05:42,828
This is a forth type
type, a kind of variable.

123
00:05:43,665 --> 00:05:46,801
It's called a Boolean variable,
and it only has two values.

124
00:05:46,801 --> 00:05:48,634
It has true and false.

125
00:05:50,617 --> 00:05:52,476
As a matter of fact, these if statements,

126
00:05:52,476 --> 00:05:55,513
they return Boolean values,
value equal equal three,

127
00:05:55,513 --> 00:05:58,519
that is returning a
true or a false based on

128
00:05:58,519 --> 00:06:00,102
the value of value.

129
00:06:01,509 --> 00:06:05,100
There's a mnemonic confusion
there, but I'm using it.

130
00:06:05,100 --> 00:06:06,662
I'm going to make a variable called found,

131
00:06:06,662 --> 00:06:08,031
and that's a decent name for a variable,

132
00:06:08,031 --> 00:06:10,213
so don't get hung up
on that, and I'm going

133
00:06:10,213 --> 00:06:13,063
to initially say found is
going to indicate to me

134
00:06:13,063 --> 00:06:15,952
whether or not I found a three in my list.

135
00:06:15,952 --> 00:06:17,982
And I'm going to start
before the loop starts

136
00:06:17,982 --> 00:06:20,922
and say false, because we
haven't found anything yet.

137
00:06:20,922 --> 00:06:22,991
So found equals false.

138
00:06:22,991 --> 00:06:25,086
So at the beginning of
the loop, found is false,

139
00:06:25,086 --> 00:06:27,238
before the loop starts, found is false.

140
00:06:27,238 --> 00:06:29,833
And now we're going to run
this loop a bunch of times.

141
00:06:29,833 --> 00:06:32,861
Nine, is that true, no, skip.

142
00:06:32,861 --> 00:06:34,778
41, is that true, skip.

143
00:06:36,320 --> 00:06:37,153
12, skip.

144
00:06:38,629 --> 00:06:41,817
Nine, 41, 12, and found has remained false

145
00:06:41,817 --> 00:06:43,579
because we haven't done anything to it.

146
00:06:43,579 --> 00:06:46,319
But now in comes a three,
and this becomes true,

147
00:06:46,319 --> 00:06:49,451
so it runs this code, found becomes true,

148
00:06:49,451 --> 00:06:50,905
and then we print it and you'll notice

149
00:06:50,905 --> 00:06:53,576
that when we see a three we get true.

150
00:06:53,576 --> 00:06:56,663
And then it runs again, we
get 74, it's still false.

151
00:06:56,663 --> 00:06:59,791
15, it's still false, run, run, run, quit.

152
00:06:59,791 --> 00:07:03,077
And the residual afterwards is true.

153
00:07:03,077 --> 00:07:05,247
In fact, if you didn't know any of this,

154
00:07:05,247 --> 00:07:08,051
print that out, all you know is that

155
00:07:08,051 --> 00:07:10,396
afterwards we looped
through all those things

156
00:07:10,396 --> 00:07:13,009
and we know that there
was a three in there.

157
00:07:13,009 --> 00:07:15,776
That's what we're doing.

158
00:07:15,776 --> 00:07:17,709
We searched all of them,
we checked for threes,

159
00:07:17,709 --> 00:07:20,752
when we found a three,
and you can see basically

160
00:07:20,752 --> 00:07:25,620
that the found remains false
until it flips to true,

161
00:07:25,620 --> 00:07:27,608
but then there's nothing
to set it back to false.

162
00:07:27,608 --> 00:07:28,765
There's nothing in this loop that's going

163
00:07:28,765 --> 00:07:31,196
to set it back to false,
so once it sort of

164
00:07:31,196 --> 00:07:33,920
catches the three, then it remains true

165
00:07:33,920 --> 00:07:37,853
for the rest of the loop and
then it just finds its way out.

166
00:07:37,853 --> 00:07:39,861
If you want to think about it for moment,

167
00:07:39,861 --> 00:07:43,330
ask yourself, how might we
make this loop more efficient

168
00:07:43,330 --> 00:07:46,413
by putting a statement right in here?

169
00:07:48,289 --> 00:07:52,057
Think about a way, once
you've found it and it's true,

170
00:07:52,057 --> 00:07:55,564
there is sort of no
reason to keep on going.

171
00:07:55,564 --> 00:07:58,727
What would you put there
to perhaps make this loop

172
00:07:58,727 --> 00:08:01,270
to look for threes just
to tell you whether or not

173
00:08:01,270 --> 00:08:04,180
there was at least one three in there,

174
00:08:04,180 --> 00:08:08,347
how to make that more efficient,
just think about that.

175
00:08:10,724 --> 00:08:12,787
Now let's look back at the largest value

176
00:08:12,787 --> 00:08:15,628
that we started out with.

177
00:08:15,628 --> 00:08:19,027
If you think about this,
let's kind of give it

178
00:08:19,027 --> 00:08:21,484
sort of a rough, rough look here.

179
00:08:21,484 --> 00:08:24,344
Largest so far is our, kind
of like a running total,

180
00:08:24,344 --> 00:08:27,831
but it's our hypothesis
is the best large number.

181
00:08:27,831 --> 00:08:29,658
And we have this if statement that says

182
00:08:29,658 --> 00:08:32,149
if the number we just
see right now is greater

183
00:08:32,149 --> 00:08:35,014
than the largest so far, then capture it.

184
00:08:35,014 --> 00:08:37,734
Take whatever number
we saw and capture it.

185
00:08:37,734 --> 00:08:40,252
When we see nine, it's
better, we capture it.

186
00:08:40,252 --> 00:08:42,813
We see a 41, it's better, we capture it.

187
00:08:42,813 --> 00:08:44,342
We don't capture this,
we don't capture this,

188
00:08:44,342 --> 00:08:47,526
we capture the 74, and
we don't capture the 15.

189
00:08:47,526 --> 00:08:49,055
And that's how we do it.

190
00:08:49,055 --> 00:08:51,888
You could think of this as better.

191
00:08:53,673 --> 00:08:55,635
When the number we're
looking at is greater

192
00:08:55,635 --> 00:08:58,960
than our working
hypothesis of the largest,

193
00:08:58,960 --> 00:09:00,905
we grab it because it's better.

194
00:09:00,905 --> 00:09:04,822
This line right here is
the grab line, grab it.

195
00:09:08,297 --> 00:09:11,749
So then the question is, how
would you modify this code

196
00:09:11,749 --> 00:09:14,056
to teach it to find the smallest value

197
00:09:14,056 --> 00:09:16,056
in this list of numbers?

198
00:09:17,232 --> 00:09:19,647
Think of it as, you
have a starting number,

199
00:09:19,647 --> 00:09:24,136
you have a what's better
and this grabbing notion.

200
00:09:24,136 --> 00:09:25,618
How could you do that?

201
00:09:25,618 --> 00:09:26,618
Take a look.

202
00:09:32,118 --> 00:09:34,204
Okay, so let's take a look.

203
00:09:34,204 --> 00:09:36,287
Let's do a couple things.

204
00:09:37,196 --> 00:09:40,406
If you look at this if
statement that's better,

205
00:09:40,406 --> 00:09:44,575
it's better now if the
number is less than,

206
00:09:44,575 --> 00:09:45,959
but then we should probably change this

207
00:09:45,959 --> 00:09:49,064
to be smallest so far, smallest so far,

208
00:09:49,064 --> 00:09:51,477
smallest so far, smallest so far,

209
00:09:51,477 --> 00:09:54,227
smallest so far, smallest so far.

210
00:09:55,186 --> 00:09:56,813
Matter of fact, that's what this is.

211
00:09:56,813 --> 00:09:58,686
We've changed the word largest so far

212
00:09:58,686 --> 00:10:03,640
to smallest so far, and we've
changed the greater than

213
00:10:03,640 --> 00:10:06,973
to a less than, is that going to fix it?

214
00:10:08,007 --> 00:10:11,311
I'll give you a second to
look at it, pause if you need.

215
00:10:11,311 --> 00:10:12,313
Is that going to fix it, is that going

216
00:10:12,313 --> 00:10:14,646
to find our smallest number?

217
00:10:16,508 --> 00:10:19,758
The answer is, of course, no, it's not.

218
00:10:21,382 --> 00:10:24,442
If we run this code, we've
set the smallest so far

219
00:10:24,442 --> 00:10:26,645
to negative one and it
starts out negative one,

220
00:10:26,645 --> 00:10:29,406
we run it, and it's nine.

221
00:10:29,406 --> 00:10:31,829
Is nine less than negative one?

222
00:10:31,829 --> 00:10:32,912
No, it's not.

223
00:10:34,540 --> 00:10:37,361
After we see a nine, the
smallest so far is negative one.

224
00:10:37,361 --> 00:10:39,001
Now we're going to run 41.

225
00:10:39,001 --> 00:10:41,292
Is 41 less than negative one?

226
00:10:41,292 --> 00:10:42,459
No, it is not.

227
00:10:44,539 --> 00:10:46,464
So is the smallest so far
is still negative one?

228
00:10:46,464 --> 00:10:48,435
As a matter of fact, it isn't
the smallest so far anymore.

229
00:10:48,435 --> 00:10:50,381
Just because we named it
smallest so far doesn't mean

230
00:10:50,381 --> 00:10:52,182
it is the smallest far.

231
00:10:52,182 --> 00:10:54,599
That didn't work out so well.

232
00:10:56,027 --> 00:10:58,598
None of these, because they're
never less than negative one,

233
00:10:58,598 --> 00:11:00,695
do anything, and we claim that afterwards

234
00:11:00,695 --> 00:11:03,333
the smallest we've seen
so far is negative one.

235
00:11:03,333 --> 00:11:06,826
And that is because, of
course, negative one is smaller

236
00:11:06,826 --> 00:11:09,739
than any of the numbers that we saw.

237
00:11:09,739 --> 00:11:11,971
So how could we fix this?

238
00:11:11,971 --> 00:11:15,550
Well, if we started the smallest
so far with some arbitrary

239
00:11:15,550 --> 00:11:17,586
big number, then it'd be better.

240
00:11:17,586 --> 00:11:21,765
So if we made this a
hundred, whoops, come back,

241
00:11:21,765 --> 00:11:24,670
if we made this be like a
hundred, that'd be good,

242
00:11:24,670 --> 00:11:26,735
because the first time
through the nine would

243
00:11:26,735 --> 00:11:28,886
be less than a hundred so
we would capture the nine

244
00:11:28,886 --> 00:11:31,638
and then the rest of the
loop would work just fine.

245
00:11:31,638 --> 00:11:34,880
But then what if we didn't know
how big these numbers were?

246
00:11:34,880 --> 00:11:37,855
As a matter of fact, the largest
so far wouldn't have worked

247
00:11:37,855 --> 00:11:41,676
if all the numbers were
negative, think about that.

248
00:11:41,676 --> 00:11:43,654
We just assumed they were
positive and so we kind of

249
00:11:43,654 --> 00:11:46,202
wrote lazy code that assumed
all numbers were positive.

250
00:11:46,202 --> 00:11:47,736
That might not be a good
assumption depending

251
00:11:47,736 --> 00:11:50,687
on the numbers that you're dealing with.

252
00:11:50,687 --> 00:11:52,697
So maybe a hundred's a
good number to start with.

253
00:11:52,697 --> 00:11:55,697
Or maybe like a thousand, or 10,000,

254
00:11:56,750 --> 00:12:00,144
or like some number with
lots of zeros in it.

255
00:12:00,144 --> 00:12:02,457
How big should we make this?

256
00:12:02,457 --> 00:12:05,081
And the answer is, we're
kind of solving this problem

257
00:12:05,081 --> 00:12:06,248
the wrong way.

258
00:12:07,209 --> 00:12:11,376
The thing we really want to
do to solve the problem is

259
00:12:13,139 --> 00:12:15,211
to just accept the fact
that if we're looking

260
00:12:15,211 --> 00:12:18,581
for the smallest number so far,

261
00:12:18,581 --> 00:12:22,929
that the right hypothesis
is the first number.

262
00:12:22,929 --> 00:12:26,205
And if we just knew what that
first number was, the nine,

263
00:12:26,205 --> 00:12:29,741
that would, because it's the first number,

264
00:12:29,741 --> 00:12:33,612
we know it's both the largest
so far and the smallest so far

265
00:12:33,612 --> 00:12:36,237
as soon as you see the first
number, but we don't know

266
00:12:36,237 --> 00:12:38,802
here before the loop starts
what that first number is.

267
00:12:38,802 --> 00:12:41,362
I mean, you can look at it,
but assume this is just data

268
00:12:41,362 --> 00:12:43,699
that's coming from somewhere
else and we don't know it

269
00:12:43,699 --> 00:12:45,228
until we start reading it.

270
00:12:45,228 --> 00:12:47,861
So you have to construct a
loop that deals with the fact

271
00:12:47,861 --> 00:12:52,133
that we want to capture the
first value as our hypothesis

272
00:12:52,133 --> 00:12:56,070
for smallest so far, so how do we do that?

273
00:12:56,070 --> 00:12:57,570
Let's take a look.

274
00:12:58,801 --> 00:13:02,051
What we do is, we use yet another type.

275
00:13:03,296 --> 00:13:05,707
So we have integer,
floating point, string,

276
00:13:05,707 --> 00:13:08,317
Boolean, and now we have a
thing called the none type.

277
00:13:08,317 --> 00:13:12,817
None type is a special marker
in that is only has one value.

278
00:13:12,817 --> 00:13:15,637
Boolean has true and false.

279
00:13:15,637 --> 00:13:17,430
Floating point has an
infinite number of values

280
00:13:17,430 --> 00:13:19,076
and integer has an
infinite number of values,

281
00:13:19,076 --> 00:13:22,298
but none type has one value, none.

282
00:13:22,298 --> 00:13:26,215
None is a constant,
capital none is a constant.

283
00:13:27,747 --> 00:13:29,688
The difference is that we can check to see

284
00:13:29,688 --> 00:13:31,452
if we have stored none.

285
00:13:31,452 --> 00:13:34,674
None is often used to indicate emptiness,

286
00:13:34,674 --> 00:13:38,454
not non-existence, because
smallest doesn't exist

287
00:13:38,454 --> 00:13:40,235
until we assign it, but
we're going to assign it

288
00:13:40,235 --> 00:13:43,818
to a mark, a flag, a
marker, someway to say

289
00:13:44,669 --> 00:13:47,871
this is not even a number, it's nothing.

290
00:13:47,871 --> 00:13:51,037
And you can do this, so
let's make a variable

291
00:13:51,037 --> 00:13:53,954
called smallest and in it put none.

292
00:13:54,817 --> 00:13:56,364
It sticks it right in,
it's not a string none,

293
00:13:56,364 --> 00:13:58,447
it's like a special type.

294
00:14:00,014 --> 00:14:02,944
So that actually captures the notion that

295
00:14:02,944 --> 00:14:05,165
before the loop starts,
the smallest number

296
00:14:05,165 --> 00:14:08,104
that we've seen so far is none.

297
00:14:08,104 --> 00:14:10,437
We haven't seen any numbers.

298
00:14:13,371 --> 00:14:16,064
Then we come in and we
have an if statement.

299
00:14:16,064 --> 00:14:18,526
And we have a new operator called is.

300
00:14:18,526 --> 00:14:21,388
Is is stronger than equal sign.

301
00:14:21,388 --> 00:14:24,942
So if smallest is none, that becomes true,

302
00:14:24,942 --> 00:14:27,584
it runs this case, and
so then what it does is

303
00:14:27,584 --> 00:14:31,325
it copies this first value,
which is nine, into smallest.

304
00:14:31,325 --> 00:14:33,903
We see a nine and the
smallest so far is nine,

305
00:14:33,903 --> 00:14:35,893
which is the first value.

306
00:14:35,893 --> 00:14:38,676
Again, we're assuming we don't
know what the first value is

307
00:14:38,676 --> 00:14:41,717
before the loop starts, so
we use the first iteration

308
00:14:41,717 --> 00:14:45,884
through the loop as the
moment where we capture that.

309
00:14:47,999 --> 00:14:51,756
Smallest is the value,
and then we print it,

310
00:14:51,756 --> 00:14:55,511
we go back up, and now
it runs again with 41.

311
00:14:55,511 --> 00:14:59,474
41 is not none, there's
only one thing that's none.

312
00:14:59,474 --> 00:15:03,965
So it is not equal to none,
smallest is not equal to none,

313
00:15:03,965 --> 00:15:07,787
or is not none, so this is
false, so it skips over here.

314
00:15:07,787 --> 00:15:10,613
Then it asks the question, is
the value we're looking at,

315
00:15:10,613 --> 00:15:12,417
41, less than smallest?

316
00:15:12,417 --> 00:15:16,012
Well, smallest is nine in
this case, and this is 41,

317
00:15:16,012 --> 00:15:18,997
so that's false, so it
skips that and goes on.

318
00:15:18,997 --> 00:15:22,388
We see 41, we don't take
it, and then you can see

319
00:15:22,388 --> 00:15:25,235
that this will never become true again.

320
00:15:25,235 --> 00:15:26,821
This is pretty much false for the rest

321
00:15:26,821 --> 00:15:29,321
of the iterations of the loop.

322
00:15:31,771 --> 00:15:34,025
That's false for the rest of
the iterations for the loop.

323
00:15:34,025 --> 00:15:36,675
So it just is going to run down
here and ask this question.

324
00:15:36,675 --> 00:15:39,449
And at some point we see a
three, and we run this code,

325
00:15:39,449 --> 00:15:42,279
we capture it, we see
74, we don't capture it.

326
00:15:42,279 --> 00:15:44,421
We see 15, we don't capture it.

327
00:15:44,421 --> 00:15:47,370
Then the for loop skips out,

328
00:15:47,370 --> 00:15:49,542
at the end we have the smallest.

329
00:15:49,542 --> 00:15:51,796
Actually, this would be a good technique

330
00:15:51,796 --> 00:15:54,478
for the largest as well,
because it really is

331
00:15:54,478 --> 00:15:57,310
just a technique to put
a marker in this variable

332
00:15:57,310 --> 00:16:00,832
so that we snag that first
number, or first whatever,

333
00:16:00,832 --> 00:16:03,665
as we read and parse through them.

334
00:16:05,931 --> 00:16:10,299
So the is and is not operators
are very useful in Python.

335
00:16:10,299 --> 00:16:12,866
You can think of them as
like the double equal sign.

336
00:16:12,866 --> 00:16:15,033
They're asking a question.

337
00:16:16,920 --> 00:16:19,154
They're asking a question, the returnature

338
00:16:19,154 --> 00:16:22,300
of the blank is blank,
returns a true or a false.

339
00:16:22,300 --> 00:16:25,595
It is stronger, double equal says,

340
00:16:25,595 --> 00:16:29,012
are these things equal in type and value?

341
00:16:31,505 --> 00:16:34,505
Just as an example, if I were to say

342
00:16:39,970 --> 00:16:41,720
is zero equal to 0.0?

343
00:16:43,958 --> 00:16:46,002
It would say yeah, that's true.

344
00:16:46,002 --> 00:16:50,169
But then if I say zero is
0.0, that would be false.

345
00:16:51,306 --> 00:16:56,159
That's because these two
are the same value wise,

346
00:16:56,159 --> 00:16:58,277
these two are not the same type wise.

347
00:16:58,277 --> 00:17:02,816
So is is stronger than equals,
meaning that it demands

348
00:17:02,816 --> 00:17:05,480
equality in both the type of the variable

349
00:17:05,480 --> 00:17:07,652
and the value of the variable.

350
00:17:07,652 --> 00:17:09,457
And no conversion is done.

351
00:17:09,457 --> 00:17:12,929
That's just a very
strong, don't overuse is,

352
00:17:12,929 --> 00:17:15,179
if you're dealing with
numbers or even strings,

353
00:17:15,179 --> 00:17:16,989
use double equals, don't use is,

354
00:17:16,989 --> 00:17:20,971
because sometimes it
gets a little confusing.

355
00:17:20,971 --> 00:17:25,477
Use is sparingly, I tend
to only use is on Booleans

356
00:17:25,477 --> 00:17:28,715
and on none types, I
don't use is on integers

357
00:17:28,715 --> 00:17:31,695
and I don't use is on floats,

358
00:17:31,695 --> 00:17:33,492
and I don't use is on strings,

359
00:17:33,492 --> 00:17:35,492
just none or true false.

360
00:17:38,342 --> 00:17:40,973
And also is not is also an operator.

361
00:17:40,973 --> 00:17:43,332
So you just say blah,
blah, blah is not none,

362
00:17:43,332 --> 00:17:46,082
or blah, blah, blah is not false.

363
00:17:47,385 --> 00:17:50,473
We've been looping around
and doing loops and loops

364
00:17:50,473 --> 00:17:54,695
of loops, we looked at
the indefinite loops,

365
00:17:54,695 --> 00:17:58,659
the wild loops that
kind of run for a while,

366
00:17:58,659 --> 00:18:00,391
and we looked at break
and continue as a way

367
00:18:00,391 --> 00:18:03,349
to either escape completely from the loop

368
00:18:03,349 --> 00:18:07,516
or go back up and discard the
current iteration of the loop.

369
00:18:08,457 --> 00:18:11,542
We looked at none, we
looked at Boolean variables,

370
00:18:11,542 --> 00:18:13,644
with for loops, definite
loops where you've got

371
00:18:13,644 --> 00:18:16,803
some kind of a set or a list
or some kind of sequence

372
00:18:16,803 --> 00:18:18,429
that you're looping through.

373
00:18:18,429 --> 00:18:20,429
And then the concept of loop
idioms where you do something

374
00:18:20,429 --> 00:18:22,538
at the top, something to each item,

375
00:18:22,538 --> 00:18:25,955
and then you get a benefit at the bottom.

376
00:18:27,240 --> 00:18:29,923
So that gets us through iterations.

377
00:18:29,923 --> 00:18:32,840
(light jazz music)

