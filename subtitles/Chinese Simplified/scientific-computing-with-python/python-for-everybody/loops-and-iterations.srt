1
00:00:00,224 --> 00:00:01,057
- Hello and welcome to

2
00:00:01,057 --> 00:00:03,102
Chapter 5 Loops and Iteration.

3
00:00:03,102 --> 00:00:06,185
Now we're going to work on our fourth

4
00:00:07,088 --> 00:00:08,764
basic pattern of sequential,

5
00:00:08,764 --> 00:00:10,141
conditional,

6
00:00:10,141 --> 00:00:11,372
store and reuse,

7
00:00:11,372 --> 00:00:12,622
and loops and iteration.

8
00:00:12,622 --> 00:00:15,484
And this is the one where
we teach the computer

9
00:00:15,484 --> 00:00:17,159
how to do things a lot.

10
00:00:17,159 --> 00:00:19,728
We can tell it to do
something a million times.

11
00:00:19,728 --> 00:00:24,440
And so that's where we get
the doggedness of computers.

12
00:00:24,440 --> 00:00:27,018
Or the fact that they're so
good at doing work for us

13
00:00:27,018 --> 00:00:29,178
because we can set 'em off to a task

14
00:00:29,178 --> 00:00:31,822
and they'll do it until it's done.

15
00:00:31,822 --> 00:00:33,926
So here's a very simple loop.

16
00:00:33,926 --> 00:00:35,509
A very simple loop.

17
00:00:36,934 --> 00:00:38,028
(dishes rattling)

18
00:00:38,028 --> 00:00:41,406
Let's put the coffee over here.

19
00:00:41,406 --> 00:00:44,416
The key word that we're gonna start using

20
00:00:44,416 --> 00:00:45,249
is the while loop.

21
00:00:45,249 --> 00:00:47,874
We're also gonna use the for later on.

22
00:00:47,874 --> 00:00:51,833
And the while loop functions
very much like an if statement.

23
00:00:51,833 --> 00:00:54,066
The while starts it

24
00:00:54,066 --> 00:00:55,746
and then this is just
like an if statement.

25
00:00:55,746 --> 00:00:58,888
It's a question that leads
to a true or a false answer

26
00:00:58,888 --> 00:01:00,010
and then there's a colon

27
00:01:00,010 --> 00:01:01,428
and then there's an indented block

28
00:01:01,428 --> 00:01:03,010
and then we use the de-indent

29
00:01:03,010 --> 00:01:05,143
to determine how long the loop is.

30
00:01:05,143 --> 00:01:07,085
And so this print is de-indented

31
00:01:07,085 --> 00:01:10,430
so that indicates the end of the loop.

32
00:01:10,430 --> 00:01:12,374
And so at some level,

33
00:01:12,374 --> 00:01:14,138
what's going to happen here,

34
00:01:14,138 --> 00:01:16,942
is it's just gonna run and if this is true

35
00:01:16,942 --> 00:01:18,515
it's gonna run this code

36
00:01:18,515 --> 00:01:20,689
and if it's false it's
gonna skip the code.

37
00:01:20,689 --> 00:01:22,605
In that way it functions like an if.

38
00:01:22,605 --> 00:01:24,402
The place that it doesn't
function like an if

39
00:01:24,402 --> 00:01:26,440
is after it's run the code once

40
00:01:26,440 --> 00:01:29,759
it goes up and then
asks the question again.

41
00:01:29,759 --> 00:01:31,405
And so you can think of it going back up

42
00:01:31,405 --> 00:01:33,716
kind of to the top of the while loop

43
00:01:33,716 --> 00:01:35,509
and then re-asking the question.

44
00:01:35,509 --> 00:01:38,934
Like okay is this going to run again?

45
00:01:38,934 --> 00:01:41,677
And then it's going to do
that some number of times

46
00:01:41,677 --> 00:01:43,190
and then it's going to finish

47
00:01:43,190 --> 00:01:44,642
and so that's the loop.

48
00:01:44,642 --> 00:01:46,046
That's the iteration.

49
00:01:46,046 --> 00:01:48,165
And we're going to make a variable,

50
00:01:48,165 --> 00:01:49,985
construct very carefully,

51
00:01:49,985 --> 00:01:52,563
a variable that we call
the iteration variable.

52
00:01:52,563 --> 00:01:53,646
And that's n.

53
00:01:54,504 --> 00:01:56,681
And it's a variable that's gonna change,

54
00:01:56,681 --> 00:01:58,408
and it's our way of running the loop

55
00:01:58,408 --> 00:02:01,000
but not running the loop forever.

56
00:02:01,000 --> 00:02:02,828
So let's just run this.

57
00:02:02,828 --> 00:02:04,726
We come in and it's five.

58
00:02:04,726 --> 00:02:05,908
Is n greater than zero,

59
00:02:05,908 --> 00:02:08,285
yes it is, so we're gonna run this code.

60
00:02:08,285 --> 00:02:09,218
So we're gonna run this code,

61
00:02:09,218 --> 00:02:10,341
we're gonna print out five,

62
00:02:10,341 --> 00:02:11,688
now we're gonna subtract one

63
00:02:11,688 --> 00:02:13,281
and then we're gonna go back up

64
00:02:13,281 --> 00:02:15,334
go back up and ask the question.

65
00:02:15,334 --> 00:02:16,831
Is n greater than zero.

66
00:02:16,831 --> 00:02:19,505
And the answer, since it's
four, the answer is yes.

67
00:02:19,505 --> 00:02:21,085
So and it runs again.

68
00:02:21,085 --> 00:02:22,229
And it prints out four,

69
00:02:22,229 --> 00:02:23,458
subtracts again,

70
00:02:23,458 --> 00:02:24,291
checks,

71
00:02:24,291 --> 00:02:25,124
prints three,

72
00:02:25,124 --> 00:02:26,319
subtracts again,

73
00:02:26,319 --> 00:02:27,184
prints two,

74
00:02:27,184 --> 00:02:28,493
subtracts it again,

75
00:02:28,493 --> 00:02:29,410
prints one,

76
00:02:29,410 --> 00:02:30,788
subtracts again,

77
00:02:30,788 --> 00:02:33,947
now n is zero and so it comes back up,

78
00:02:33,947 --> 00:02:38,252
comes back up is this
question has now become false.

79
00:02:38,252 --> 00:02:39,653
So it's gonna take the exit

80
00:02:39,653 --> 00:02:42,041
so it's gonna come down and
run this line right here.

81
00:02:42,041 --> 00:02:43,193
Then it prints "Blastoff!",

82
00:02:43,193 --> 00:02:45,297
and we can kind of print
out the residual value of n,

83
00:02:45,297 --> 00:02:49,416
just to sort of prove to
ourselves that it ran until n

84
00:02:49,416 --> 00:02:51,076
was no longer greater than zero

85
00:02:51,076 --> 00:02:53,505
and then zero was the final value for n.

86
00:02:53,505 --> 00:02:57,137
And we carefully constructed
this n, n equals oops.

87
00:02:57,137 --> 00:02:58,447
Go back.

88
00:02:58,447 --> 00:03:00,161
We carefully constructed n.

89
00:03:00,161 --> 00:03:01,171
We set it to five,

90
00:03:01,171 --> 00:03:03,832
then we carefully subtracted
one each time through the loop.

91
00:03:03,832 --> 00:03:07,434
And then we're using that to
control when to exit the loop.

92
00:03:07,434 --> 00:03:09,028
And so you can think of this loop as

93
00:03:09,028 --> 00:03:11,469
for now running five times.

94
00:03:11,469 --> 00:03:14,061
True true true true true

95
00:03:14,061 --> 00:03:15,628
and then false finally.

96
00:03:15,628 --> 00:03:18,343
So this question was true for a while

97
00:03:18,343 --> 00:03:19,625
and as long as it was true

98
00:03:19,625 --> 00:03:21,607
the loop ran and then when it finished,

99
00:03:21,607 --> 00:03:22,835
when it turned false,

100
00:03:22,835 --> 00:03:24,252
the loop stopped.

101
00:03:25,219 --> 00:03:28,609
And so this variable that we
construct to control the loop

102
00:03:28,609 --> 00:03:30,198
is called the iteration variable

103
00:03:30,198 --> 00:03:33,699
because it tells how many
times this loop is going to run

104
00:03:33,699 --> 00:03:38,060
over and over or otherwise
known as iterate.

105
00:03:38,060 --> 00:03:40,300
So this is a badly constructed loop

106
00:03:40,300 --> 00:03:43,499
with an iteration variable
that we didn't do very well.

107
00:03:43,499 --> 00:03:46,546
And so, if we take a look at this,

108
00:03:46,546 --> 00:03:48,180
we start it with n five,

109
00:03:48,180 --> 00:03:50,062
and then this is greater
than zero so it's true

110
00:03:50,062 --> 00:03:50,895
so it runs it,

111
00:03:50,895 --> 00:03:53,149
then it runs it again and
it's still greater than zero

112
00:03:53,149 --> 00:03:54,768
so you can pretty much see

113
00:03:54,768 --> 00:03:56,158
because we're not changing it,

114
00:03:56,158 --> 00:03:59,519
this is gonna be true true
true true dot dot dot dot

115
00:03:59,519 --> 00:04:01,423
forever, true forever.

116
00:04:01,423 --> 00:04:03,649
And so this is an infinite loop.

117
00:04:03,649 --> 00:04:05,161
And it's just gonna run

118
00:04:05,161 --> 00:04:06,781
until your computer runs out of battery

119
00:04:06,781 --> 00:04:08,227
or your hit the buttton.

120
00:04:08,227 --> 00:04:11,506
This is the kind of thing where
you often see your computer

121
00:04:11,506 --> 00:04:14,339
spinning like a spinning beach ball

122
00:04:14,339 --> 00:04:17,226
or some other indication that
your computer's super busy.

123
00:04:17,226 --> 00:04:18,658
It's in some kind of a loop

124
00:04:18,658 --> 00:04:20,266
really tight and it's running something

125
00:04:20,266 --> 00:04:21,509
and it's using up

126
00:04:21,509 --> 00:04:23,668
all of the processing
resources of your computer.

127
00:04:23,668 --> 00:04:25,976
That's an infinite loop.

128
00:04:25,976 --> 00:04:28,662
And so the problem is
is we did nothing with

129
00:04:28,662 --> 00:04:30,579
the iteration variable.

130
00:04:32,076 --> 00:04:33,746
Now here's a different loop.

131
00:04:33,746 --> 00:04:36,430
And so this one demonstrates
a different idea.

132
00:04:36,430 --> 00:04:37,660
So in this case,

133
00:04:37,660 --> 00:04:40,575
we start out with n as
zero and it comes in here.

134
00:04:40,575 --> 00:04:41,866
And is n greater than zero?

135
00:04:41,866 --> 00:04:44,032
Question mark, and the answer is false.

136
00:04:44,032 --> 00:04:45,176
So it skips it.

137
00:04:45,176 --> 00:04:47,970
It doesn't run these lines of code at all.

138
00:04:47,970 --> 00:04:49,885
And so this loop doesn't run at all.

139
00:04:49,885 --> 00:04:50,718
'Cause it comes in,

140
00:04:50,718 --> 00:04:51,654
asks the question,

141
00:04:51,654 --> 00:04:54,178
says no and then it skips right around it.

142
00:04:54,178 --> 00:04:56,079
So never run, never run.

143
00:04:56,079 --> 00:04:57,555
And so this actually is,

144
00:04:57,555 --> 00:05:00,672
sometimes you write a while
loop on purpose like this,

145
00:05:00,672 --> 00:05:02,358
not quite as simple as this one,

146
00:05:02,358 --> 00:05:06,380
but the idea is this
emphasizes that these loops

147
00:05:06,380 --> 00:05:08,630
are what we call zero trip.

148
00:05:10,120 --> 00:05:13,033
They are not even guaranteed to run once.

149
00:05:13,033 --> 00:05:14,774
They're gonna run maybe zero times.

150
00:05:14,774 --> 00:05:16,650
And in this respect it functions

151
00:05:16,650 --> 00:05:19,795
exactly like an if statement, alright.

152
00:05:19,795 --> 00:05:21,013
The first time through the loop,

153
00:05:21,013 --> 00:05:25,180
if it's not true it's just
gonna skip right by it.

154
00:05:26,575 --> 00:05:28,923
So, there's a couple of ways
of getting out of loops.

155
00:05:28,923 --> 00:05:31,825
In this case I'm
constructing an infinite loop

156
00:05:31,825 --> 00:05:35,371
because remember the kind of
definition of an infinite loop

157
00:05:35,371 --> 00:05:37,682
is if this is gonna stay true.

158
00:05:37,682 --> 00:05:40,921
Well true is the constant true.

159
00:05:40,921 --> 00:05:42,784
So this is gonna run forever.

160
00:05:42,784 --> 00:05:45,069
And what it's gonna do
is it's gonna prompt

161
00:05:45,069 --> 00:05:46,652
with a little arrow

162
00:05:47,554 --> 00:05:49,188
and then let us type

163
00:05:49,188 --> 00:05:52,482
and read whatever we type
into the variable line

164
00:05:52,482 --> 00:05:54,897
and then if the line is
done we're gonna break.

165
00:05:54,897 --> 00:05:56,624
Now break is an executable statement

166
00:05:56,624 --> 00:05:58,757
and if you hit the break,

167
00:05:58,757 --> 00:06:01,007
it exits the innermost loop

168
00:06:02,185 --> 00:06:05,912
out to the place beyond
the end of the loop.

169
00:06:05,912 --> 00:06:08,745
So, when this runs the first time.

170
00:06:10,593 --> 00:06:12,172
And we say hello there,

171
00:06:12,172 --> 00:06:13,792
line is not done so it prints it.

172
00:06:13,792 --> 00:06:15,034
So it prints out hello there

173
00:06:15,034 --> 00:06:16,048
and then goes up

174
00:06:16,048 --> 00:06:17,168
and then we type in again,

175
00:06:17,168 --> 00:06:19,470
we type finished and so it's not done

176
00:06:19,470 --> 00:06:21,171
and so it prints it

177
00:06:21,171 --> 00:06:22,707
so now comes that print statement

178
00:06:22,707 --> 00:06:24,058
and then we type in done

179
00:06:24,058 --> 00:06:25,772
and now this becomes true

180
00:06:25,772 --> 00:06:28,218
and it comes out and runs the code

181
00:06:28,218 --> 00:06:30,038
beyond the end of the loop.

182
00:06:30,038 --> 00:06:32,236
The key is is it doesn't go back.

183
00:06:32,236 --> 00:06:33,913
It's like once you've done a break

184
00:06:33,913 --> 00:06:35,828
that loop is done.

185
00:06:35,828 --> 00:06:38,621
And so you look at basically, you know,

186
00:06:38,621 --> 00:06:40,095
the block that is the loop.

187
00:06:40,095 --> 00:06:41,956
So here's kind of the loop block.

188
00:06:41,956 --> 00:06:44,038
And then the break goes to the line

189
00:06:44,038 --> 00:06:46,705
after the end of the loop block.

190
00:06:51,089 --> 00:06:53,056
And you can think of this as sort of like

191
00:06:53,056 --> 00:06:54,338
just a hyperspace jump.

192
00:06:54,338 --> 00:06:56,930
There is nothing really
this could be literally

193
00:06:56,930 --> 00:06:59,671
hundreds of lines with if statements,

194
00:06:59,671 --> 00:07:01,911
and you can be running and
doing all kinds of stuff

195
00:07:01,911 --> 00:07:03,411
and running and doing all these things.

196
00:07:03,411 --> 00:07:04,947
You know, and these things could run

197
00:07:04,947 --> 00:07:06,433
all kinds of ways, right.

198
00:07:06,433 --> 00:07:08,941
The point is is as soon as
you hit a break statement,

199
00:07:08,941 --> 00:07:10,673
however much stuff is down here,

200
00:07:10,673 --> 00:07:12,127
however much stuff is up here,

201
00:07:12,127 --> 00:07:15,338
it exits to whatever the next line is

202
00:07:15,338 --> 00:07:17,588
beyond the end of the loop.

203
00:07:19,608 --> 00:07:22,414
Continue is another
loop control statement.

204
00:07:22,414 --> 00:07:24,734
But it works differently than break.

205
00:07:24,734 --> 00:07:26,867
So break says get out of this loop.

206
00:07:26,867 --> 00:07:29,034
Continue effectively says,

207
00:07:29,904 --> 00:07:32,574
stop this iteration, we're
done with this iteration.

208
00:07:32,574 --> 00:07:34,376
And so continue says,

209
00:07:34,376 --> 00:07:36,551
go up back to the top of the loop.

210
00:07:36,551 --> 00:07:37,579
Oops, yeah.

211
00:07:37,579 --> 00:07:39,490
Go up back to the top of the loop.

212
00:07:39,490 --> 00:07:41,138
(mimicking whooshing)

213
00:07:41,138 --> 00:07:42,944
And so, here we read a line.

214
00:07:42,944 --> 00:07:45,603
If the first character is a pound sign,

215
00:07:45,603 --> 00:07:46,577
line sub zero.

216
00:07:46,577 --> 00:07:50,072
If that first character is a
pound sign we're gonna skip it.

217
00:07:50,072 --> 00:07:52,516
And this is a way for us to
make like little comments

218
00:07:52,516 --> 00:07:53,703
in our typing.

219
00:07:53,703 --> 00:07:55,701
And then, if the line is done,

220
00:07:55,701 --> 00:07:57,914
we get out and otherwise we print it.

221
00:07:57,914 --> 00:07:59,642
And so that's why there
is not printout here.

222
00:07:59,642 --> 00:08:01,709
Because it comes in,

223
00:08:01,709 --> 00:08:02,626
runs, oops.

224
00:08:05,920 --> 00:08:07,696
It comes in,

225
00:08:07,696 --> 00:08:10,424
this is true and then it goes back up.

226
00:08:10,424 --> 00:08:13,547
But it comes back and
prints out the next one

227
00:08:13,547 --> 00:08:14,528
and does another thing.

228
00:08:14,528 --> 00:08:16,041
And so the loop continues

229
00:08:16,041 --> 00:08:18,725
whereas the break ends the loop.

230
00:08:18,725 --> 00:08:20,589
And so again, the same kind of notion

231
00:08:20,589 --> 00:08:22,493
that you're sort of doing
all kinds of complexity.

232
00:08:22,493 --> 00:08:24,408
Wherever you're at in this loop,

233
00:08:24,408 --> 00:08:27,041
you hit continue and it does not,

234
00:08:27,041 --> 00:08:28,621
it doesn't go any further,

235
00:08:28,621 --> 00:08:31,198
it goes back up and
runs the question mark.

236
00:08:31,198 --> 00:08:32,794
It asks the question mark.

237
00:08:32,794 --> 00:08:35,262
And so, I mean asks the question,

238
00:08:35,262 --> 00:08:37,812
and it might exit the loop
in that particular case.

239
00:08:37,812 --> 00:08:39,151
But this one here is a true.

240
00:08:39,151 --> 00:08:41,219
This is an infinite loop
that I've constructed.

241
00:08:41,219 --> 00:08:43,699
This is not an infinite
loop because at some point

242
00:08:43,699 --> 00:08:45,318
the break gets us out of the loop.

243
00:08:45,318 --> 00:08:46,953
And so it's an infinite loop

244
00:08:46,953 --> 00:08:48,795
with break to escape it.

245
00:08:48,795 --> 00:08:52,962
And that's another common
way to construct a loop.

246
00:08:54,308 --> 00:08:57,007
So, these loops that
we've been drawing so far,

247
00:08:57,007 --> 00:09:00,537
the ones that use while as their key word,

248
00:09:00,537 --> 00:09:02,647
are called indefinite loops.

249
00:09:02,647 --> 00:09:04,885
And that's because they
kind of go for a while.

250
00:09:04,885 --> 00:09:06,060
Till a break hits,

251
00:09:06,060 --> 00:09:09,136
or until some value becomes true.

252
00:09:09,136 --> 00:09:12,364
I mean, along as that value remains true.

253
00:09:12,364 --> 00:09:15,305
So all the ones we've done so far

254
00:09:15,305 --> 00:09:16,452
are easy to look at

255
00:09:16,452 --> 00:09:18,828
and know that they look pretty good

256
00:09:18,828 --> 00:09:20,489
and they're probably gonna finish.

257
00:09:20,489 --> 00:09:23,440
But there are some times
if they're long and complex

258
00:09:23,440 --> 00:09:25,940
and their exit or termination conditions

259
00:09:25,940 --> 00:09:27,588
are a little more complex,

260
00:09:27,588 --> 00:09:30,502
it's not clear that they're
really gonna terminate.

261
00:09:30,502 --> 00:09:33,446
And so we can use while
loops for a lot of things

262
00:09:33,446 --> 00:09:36,549
but for most of our looping,

263
00:09:36,549 --> 00:09:38,562
we're gonna use what are
called definite loops.

264
00:09:38,562 --> 00:09:41,465
And that's what we're
gonna talk about next.

265
00:09:41,465 --> 00:09:44,548
(jazzy piano music)

