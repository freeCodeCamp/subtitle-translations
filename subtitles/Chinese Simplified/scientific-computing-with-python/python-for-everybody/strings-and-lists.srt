1
00:00:00,525 --> 00:00:01,662
- So, now we're going to wrap up

2
00:00:01,662 --> 00:00:02,838
and talk a little bit about

3
00:00:02,838 --> 00:00:04,365
how strings and lists are related.

4
00:00:04,365 --> 00:00:06,069
They're sort of related
in that they both have

5
00:00:06,069 --> 00:00:07,834
zero based things and we used the

6
00:00:07,834 --> 00:00:10,557
square bracket operator
to do various things.

7
00:00:10,557 --> 00:00:12,613
But there's a lot of situations

8
00:00:12,613 --> 00:00:14,296
where we're looking at our data

9
00:00:14,296 --> 00:00:17,029
and we're combing the
use of lists and strings.

10
00:00:17,029 --> 00:00:19,157
So, let me show you the first thing.

11
00:00:19,157 --> 00:00:20,576
Probably the coolest thing,

12
00:00:20,576 --> 00:00:22,960
we're going to use it a
lot, the rest of the class

13
00:00:22,960 --> 00:00:25,069
and that is the split function.

14
00:00:25,069 --> 00:00:27,449
So, let's take a string, we got abc here.

15
00:00:27,449 --> 00:00:28,727
It's with three words.

16
00:00:28,727 --> 00:00:30,214
But we're interested in the fact

17
00:00:30,214 --> 00:00:32,061
that there is spaces in this word.

18
00:00:32,061 --> 00:00:34,004
And was split does, it says,
you know I'm gonna look

19
00:00:34,004 --> 00:00:35,626
through this thing, I'm gonna find this

20
00:00:35,626 --> 00:00:37,447
and I'm gonna break this into pieces

21
00:00:37,447 --> 00:00:39,807
and I'm going to return you a list

22
00:00:39,807 --> 00:00:41,835
of the separate individual pieces.

23
00:00:41,835 --> 00:00:44,441
So, look for blanks and break it in pieces

24
00:00:44,441 --> 00:00:46,484
and give me back the pieces.

25
00:00:46,484 --> 00:00:47,645
So, I'll print these out

26
00:00:47,645 --> 00:00:49,402
and now you'll see that it's a list

27
00:00:49,402 --> 00:00:51,338
with three items, with three words.

28
00:00:51,338 --> 00:00:53,698
The spaces are gone but
it's given it to us.

29
00:00:53,698 --> 00:00:55,885
So, it's like split this into words please

30
00:00:55,885 --> 00:00:57,426
and give me the individual words.

31
00:00:57,426 --> 00:00:59,298
Give me a list of individual words,

32
00:00:59,298 --> 00:01:00,618
rather than a big long string

33
00:01:00,618 --> 00:01:01,972
with spaces in the middle of it.

34
00:01:01,972 --> 00:01:04,237
And that is a quick way to go from a line

35
00:01:04,237 --> 00:01:06,539
and it's really common.

36
00:01:06,539 --> 00:01:08,235
A lot of things are going,

37
00:01:08,235 --> 00:01:10,903
like go get the second thing
or the third thing or whatever.

38
00:01:10,903 --> 00:01:12,067
So, the split's really nice

39
00:01:12,067 --> 00:01:13,635
'cause then you can just grab stuff.

40
00:01:13,635 --> 00:01:15,647
So you say, oh, how many things did I get?

41
00:01:15,647 --> 00:01:17,564
Well I got three, the LEN
function tells us that

42
00:01:17,564 --> 00:01:20,196
and I can print the first word I got,

43
00:01:20,196 --> 00:01:23,028
which is with the sub zero

44
00:01:23,028 --> 00:01:24,027
and that'll be like with.

45
00:01:24,027 --> 00:01:25,568
With will be the first word,

46
00:01:25,568 --> 00:01:27,467
'cause that's the sub zero position.

47
00:01:27,467 --> 00:01:29,496
So I read something, I split it,

48
00:01:29,496 --> 00:01:31,490
I can say there's three things

49
00:01:31,490 --> 00:01:34,167
and I can look at stuff,
the first word basically.

50
00:01:34,167 --> 00:01:35,526
Without really knowing much.

51
00:01:35,526 --> 00:01:37,805
Now, if you remember earlier,

52
00:01:37,805 --> 00:01:40,921
we'll see this, we used find and slicing

53
00:01:40,921 --> 00:01:42,513
to do a similar kind of thing,

54
00:01:42,513 --> 00:01:45,513
but people tend to prefer the split.

55
00:01:49,646 --> 00:01:51,333
Oops, go back.

56
00:01:51,333 --> 00:01:52,750
You can also then

57
00:01:54,317 --> 00:01:56,703
look through them, you
can split these things

58
00:01:56,703 --> 00:01:57,955
into stuff as a word

59
00:01:57,955 --> 00:02:00,268
and go through the with W

60
00:02:00,268 --> 00:02:02,083
and then it's gonna go through,

61
00:02:02,083 --> 00:02:06,077
W is gonna take the
successive with three words.

62
00:02:06,077 --> 00:02:09,122
So, you can make a loop
by reading through data,

63
00:02:09,122 --> 00:02:10,849
splitting it, then writing a for loop

64
00:02:10,849 --> 00:02:13,019
and then it's effectively
going through the words

65
00:02:13,019 --> 00:02:14,626
to that line of data.

66
00:02:14,626 --> 00:02:16,316
And so that's a really powerful concept

67
00:02:16,316 --> 00:02:18,377
that we'll use in a lot of programs

68
00:02:18,377 --> 00:02:20,405
that we're going to write.

69
00:02:20,405 --> 00:02:22,033
Just a couple of bits about this

70
00:02:22,033 --> 00:02:24,152
and how it works.

71
00:02:24,152 --> 00:02:25,637
Split with no parameters here,

72
00:02:25,637 --> 00:02:26,901
it looks for spaces.

73
00:02:26,901 --> 00:02:31,204
But it also treats a bunch
of spaces as a single space.

74
00:02:31,204 --> 00:02:33,237
So it's pretty smart about that

75
00:02:33,237 --> 00:02:34,805
and so even though this
has a lot of spaces

76
00:02:34,805 --> 00:02:36,638
between lot and of,

77
00:02:36,638 --> 00:02:39,084
you only see lot, of,
all the spaces are gone.

78
00:02:39,084 --> 00:02:41,622
It does something special about spaces.

79
00:02:41,622 --> 00:02:43,208
It's really white space.

80
00:02:43,208 --> 00:02:45,358
So tabs, new lines, or other characters

81
00:02:45,358 --> 00:02:48,608
would also qualify in split, basically.

82
00:02:49,616 --> 00:02:51,987
Now, you don't always have
to split based on spaces

83
00:02:51,987 --> 00:02:54,509
and a lot of data that
you're going to run into,

84
00:02:54,509 --> 00:02:56,281
you're going to want to
split on something else.

85
00:02:56,281 --> 00:02:57,887
So, here's some data that looks like

86
00:02:57,887 --> 00:02:59,176
we're using colons to separate

87
00:02:59,176 --> 00:03:00,880
the first, second, and third piece.

88
00:03:00,880 --> 00:03:02,779
Now, if you just call split,

89
00:03:02,779 --> 00:03:04,870
split's looking for space

90
00:03:04,870 --> 00:03:06,765
and so split gives you back a list

91
00:03:06,765 --> 00:03:09,360
of the things broken apart with spaces

92
00:03:09,360 --> 00:03:11,578
but there's not a single
space in that line

93
00:03:11,578 --> 00:03:13,842
and so we get a list, see it's a list,

94
00:03:13,842 --> 00:03:15,417
but there's only one item

95
00:03:15,417 --> 00:03:17,239
and the semi colons are sitting there.

96
00:03:17,239 --> 00:03:18,072
Split doesn't go like,
whoa this looks like

97
00:03:18,072 --> 00:03:20,093
it should be semi colons.

98
00:03:20,093 --> 00:03:21,753
Split's job is to use spaces

99
00:03:21,753 --> 00:03:24,867
and split the string based on spaces.

100
00:03:24,867 --> 00:03:28,713
But, given that this is
something we like to do,

101
00:03:28,713 --> 00:03:30,991
you can split what
character you'd actually

102
00:03:30,991 --> 00:03:32,761
like to split on.

103
00:03:32,761 --> 00:03:34,275
Now, it's not quite as clever

104
00:03:34,275 --> 00:03:36,125
when splitting something
other than spaces.

105
00:03:36,125 --> 00:03:37,501
It doesn't understand that

106
00:03:37,501 --> 00:03:39,511
if there's a bunch of
semi colons in a row,

107
00:03:39,511 --> 00:03:43,994
it still thinks of those
as points to split.

108
00:03:43,994 --> 00:03:45,836
But in this particular case
when there's no spaces,

109
00:03:45,836 --> 00:03:47,515
it's going to split that.

110
00:03:47,515 --> 00:03:49,710
So it says split this
based on the semi colon

111
00:03:49,710 --> 00:03:52,710
instead of being based on the space.

112
00:03:54,708 --> 00:03:56,416
And so, if you take a look
at what comes out of this,

113
00:03:56,416 --> 00:03:58,160
we split on semi colon,

114
00:03:58,160 --> 00:03:59,587
now we have a three item list

115
00:03:59,587 --> 00:04:02,339
and we get first, second, and third.

116
00:04:02,339 --> 00:04:04,260
And a lot of your data comes
out of some logging system

117
00:04:04,260 --> 00:04:06,843
or some router, status updates,

118
00:04:08,097 --> 00:04:09,838
who knows what you're looking at.

119
00:04:09,838 --> 00:04:12,300
But the delimiters off in
something other than space

120
00:04:12,300 --> 00:04:14,883
and you can do that with split.

121
00:04:17,574 --> 00:04:20,613
So, this is a useful
thing when parsing things

122
00:04:20,613 --> 00:04:21,950
like our email address.

123
00:04:21,950 --> 00:04:24,236
We want it to get things
like the email address,

124
00:04:24,236 --> 00:04:27,303
this second piece off of the line

125
00:04:27,303 --> 00:04:31,470
and so we can use split
to take advantage of this.

126
00:04:33,509 --> 00:04:34,839
So, here's a little loop

127
00:04:34,839 --> 00:04:36,287
that's just going to print out,

128
00:04:36,287 --> 00:04:38,070
not the email addresses but instead

129
00:04:38,070 --> 00:04:40,221
the day of the week.

130
00:04:40,221 --> 00:04:42,624
We'll print the day of the
week out for all these things.

131
00:04:42,624 --> 00:04:43,693
How do we do that?

132
00:04:43,693 --> 00:04:46,776
Well, we can observe, really quickly,

133
00:04:48,992 --> 00:04:51,742
that if we split based on spaces,

134
00:04:53,154 --> 00:04:57,211
it's the zero, one, two,
it's the two positions.

135
00:04:57,211 --> 00:04:59,613
So we can quickly write a bit of code

136
00:04:59,613 --> 00:05:01,280
that opens the file,

137
00:05:02,876 --> 00:05:04,180
then loops through the lines.

138
00:05:04,180 --> 00:05:05,761
We do this all the time now.

139
00:05:05,761 --> 00:05:08,080
Our strip takes off the
end of the new lines.

140
00:05:08,080 --> 00:05:11,184
We can check to see if it
starts with from space.

141
00:05:11,184 --> 00:05:12,764
From space is our key.

142
00:05:12,764 --> 00:05:15,532
So, we're ignoring all of the lines

143
00:05:15,532 --> 00:05:16,994
that don't start with from space,

144
00:05:16,994 --> 00:05:19,076
but then we find a line
that starts with from space

145
00:05:19,076 --> 00:05:22,030
and we split and we just
print out the second word.

146
00:05:22,030 --> 00:05:24,413
And so we get the second word of the lines

147
00:05:24,413 --> 00:05:25,586
that start with from

148
00:05:25,586 --> 00:05:28,253
and that's how this thing works.

149
00:05:32,769 --> 00:05:35,529
Now, sometimes we're going
to dig into it deeper

150
00:05:35,529 --> 00:05:37,825
and we will take something, split it,

151
00:05:37,825 --> 00:05:39,885
and then split another piece of it again,

152
00:05:39,885 --> 00:05:41,345
with a different delimiter.

153
00:05:41,345 --> 00:05:43,598
So let's just say the
thing we want to achieve

154
00:05:43,598 --> 00:05:46,129
is getting the part after the
@ sign for email addresses.

155
00:05:46,129 --> 00:05:50,516
We did this with again, find
and pose and stuff like that,

156
00:05:50,516 --> 00:05:53,278
but you can use split to do this as well.

157
00:05:53,278 --> 00:05:54,534
So the first thing we're going to do,

158
00:05:54,534 --> 00:05:55,892
we're going to take this line,

159
00:05:55,892 --> 00:05:57,531
we're going to split it based on spaces.

160
00:05:57,531 --> 00:05:59,364
Chop, chop, chop, chop

161
00:06:00,413 --> 00:06:02,141
and the fact that there's
an extra space there.

162
00:06:02,141 --> 00:06:05,690
Doesn't matter, split happily
just like zooms through that

163
00:06:05,690 --> 00:06:07,389
and then words sub one,

164
00:06:07,389 --> 00:06:08,639
zero, one, two,

165
00:06:09,802 --> 00:06:11,179
words sub one is this email address,

166
00:06:11,179 --> 00:06:12,543
so we'll put that in a
variable called email

167
00:06:12,543 --> 00:06:15,739
and so email will be a
string that's just this.

168
00:06:15,739 --> 00:06:17,533
So in two lines,

169
00:06:17,533 --> 00:06:20,581
we've pulled out the second
address into a variable.

170
00:06:20,581 --> 00:06:22,293
Then what we're going to do,

171
00:06:22,293 --> 00:06:24,839
is we're going to resplit that.

172
00:06:24,839 --> 00:06:26,886
We're going to take this string we got

173
00:06:26,886 --> 00:06:28,659
and split it based on @ sign,

174
00:06:28,659 --> 00:06:30,158
'cause we know it's an email address.

175
00:06:30,158 --> 00:06:31,730
So we get a new set of pieces,

176
00:06:31,730 --> 00:06:33,892
the first part is the persons name

177
00:06:33,892 --> 00:06:37,176
and the second part is the host name

178
00:06:37,176 --> 00:06:39,800
their email is hosted on.

179
00:06:39,800 --> 00:06:40,981
And what we can do then

180
00:06:40,981 --> 00:06:44,302
is we just happen to know that

181
00:06:44,302 --> 00:06:48,757
this is the zero item
and this is the one item.

182
00:06:48,757 --> 00:06:50,227
So we can get at that.

183
00:06:50,227 --> 00:06:51,915
So the interesting thing of going here,

184
00:06:51,915 --> 00:06:54,508
if you think back to
how we did this before

185
00:06:54,508 --> 00:06:57,443
with find and pose and all that stuff,

186
00:06:57,443 --> 00:06:58,745
it's really a lot cleaner.

187
00:06:58,745 --> 00:07:01,239
For me, I can look at this,

188
00:07:01,239 --> 00:07:02,944
after you understand it

189
00:07:02,944 --> 00:07:05,374
and it's easy for me to
understand that it's correct,

190
00:07:05,374 --> 00:07:06,793
where as that pose stuff,

191
00:07:06,793 --> 00:07:08,190
you gotta add one

192
00:07:08,190 --> 00:07:09,949
and start the second find after,

193
00:07:09,949 --> 00:07:12,861
just remember that and
this is a lot cleaner way.

194
00:07:12,861 --> 00:07:14,895
This is a more typical way of pulling

195
00:07:14,895 --> 00:07:18,241
this kind of information out of a line.

196
00:07:18,241 --> 00:07:20,549
So, in this chapter we talked about lists,

197
00:07:20,549 --> 00:07:22,383
we talked about the concept of collections

198
00:07:22,383 --> 00:07:23,908
at their first data structures,

199
00:07:23,908 --> 00:07:25,421
not just doing algorithms.

200
00:07:25,421 --> 00:07:26,926
We kind of know algorithms now.

201
00:07:26,926 --> 00:07:28,852
But now we're going to do data structures.

202
00:07:28,852 --> 00:07:30,877
This chapter and the next two chapters

203
00:07:30,877 --> 00:07:33,099
are foundational data structures

204
00:07:33,099 --> 00:07:34,774
and then we'll, like everything,

205
00:07:34,774 --> 00:07:36,191
we'll make more complex data structures

206
00:07:36,191 --> 00:07:38,716
by composing those data
structures together.

207
00:07:38,716 --> 00:07:40,977
We've looked at how strings
and lists connect together

208
00:07:40,977 --> 00:07:43,024
and how split works

209
00:07:43,024 --> 00:07:45,613
and these are all really powerful tools,

210
00:07:45,613 --> 00:07:48,780
that we're going to use going forward.

211
00:07:52,331 --> 00:07:55,248
(piano jazz music)

