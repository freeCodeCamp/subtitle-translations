1
00:00:00,418 --> 00:00:01,997
- Hello, and welcome to chapter six.

2
00:00:01,997 --> 00:00:03,709
In this chapter, we're
gonna talk about strings,

3
00:00:03,709 --> 00:00:06,199
and chapter seven is the payoff chapter,

4
00:00:06,199 --> 00:00:08,513
so we, you know, up to this point

5
00:00:08,513 --> 00:00:10,218
we're still learning, sort of,

6
00:00:10,218 --> 00:00:12,234
basic building blocks and actually,

7
00:00:12,234 --> 00:00:14,490
we're gonna write a real
program in chapter seven.

8
00:00:14,490 --> 00:00:18,635
So, just learn this, and the
payoff's in chapter seven.

9
00:00:18,635 --> 00:00:20,158
So we actually have been using strings

10
00:00:20,158 --> 00:00:21,505
from the very first lecture,

11
00:00:21,505 --> 00:00:24,890
'cause if you print "Hello,
world," well, that's a string.

12
00:00:24,890 --> 00:00:26,489
And so, we've been doing things

13
00:00:26,489 --> 00:00:29,517
this, this little, this
slide here is all review.

14
00:00:29,517 --> 00:00:31,581
We use plus to concatenate strings,

15
00:00:31,581 --> 00:00:33,257
we use print to print them out,

16
00:00:33,257 --> 00:00:35,770
print's just a function
it takes as a parameter,

17
00:00:35,770 --> 00:00:38,360
something strings, integers, et cetera.

18
00:00:38,360 --> 00:00:42,941
We can put digits in strings,
but we can't add to them.

19
00:00:42,941 --> 00:00:44,988
By now you've figured this out.

20
00:00:44,988 --> 00:00:47,820
But you can use things like
ints to convert the strings

21
00:00:47,820 --> 00:00:50,736
to integers and then print things out.

22
00:00:50,736 --> 00:00:53,006
So, you know, we've been
doing this for a while,

23
00:00:53,006 --> 00:00:55,192
and we've been talking
about strings all along.

24
00:00:55,192 --> 00:00:58,048
Now today, what we're gonna do is going to

25
00:00:58,048 --> 00:01:01,131
just get into strings in more detail,

26
00:01:02,383 --> 00:01:06,337
we've reading, we input data
with the input function,

27
00:01:06,337 --> 00:01:08,670
input returns us a string...

28
00:01:10,718 --> 00:01:12,347
and, if we want to input a number

29
00:01:12,347 --> 00:01:14,408
we have to run some kind of conversion,

30
00:01:14,408 --> 00:01:18,066
like we have to do an int
before we take this data

31
00:01:18,066 --> 00:01:20,418
that we read from input, you know,

32
00:01:20,418 --> 00:01:23,081
and so there's things that we've gotta do,

33
00:01:23,081 --> 00:01:25,895
and we've been doing all these
things in programs so far.

34
00:01:25,895 --> 00:01:29,723
But if we look in a little
more detail inside strings,

35
00:01:29,723 --> 00:01:33,087
we can index within
strings each character.

36
00:01:33,087 --> 00:01:34,498
So each character has a separate

37
00:01:34,498 --> 00:01:37,177
position and a separate index.

38
00:01:37,177 --> 00:01:41,344
And they basically, the
letters, are, have positions.

39
00:01:42,925 --> 00:01:44,812
And the positions start at zero,

40
00:01:44,812 --> 00:01:47,424
and the best way to, I explain
this, to remember this,

41
00:01:47,424 --> 00:01:51,159
is the elevators as we
used in one of our examples

42
00:01:51,159 --> 00:01:53,757
a long time ago, elevators
in Europe start at zero,

43
00:01:53,757 --> 00:01:57,112
and so strings start at zero as well.

44
00:01:57,112 --> 00:01:59,377
Turns out, in the old days,
there's some efficiency

45
00:01:59,377 --> 00:02:02,651
with the notion of lists
of things starting at zero.

46
00:02:02,651 --> 00:02:04,735
These days, the efficiency
isn't the issue,

47
00:02:04,735 --> 00:02:07,895
but there's a certain
elegance starting at zero,

48
00:02:07,895 --> 00:02:09,573
even though intellectually,
you might think that one

49
00:02:09,573 --> 00:02:13,472
would be the, the first
character in the string

50
00:02:13,472 --> 00:02:16,016
might make most sense to be sub one,

51
00:02:16,016 --> 00:02:17,515
but it's not, it's sub zero.

52
00:02:17,515 --> 00:02:21,400
But just remember that, and
so we have this operator

53
00:02:21,400 --> 00:02:24,322
called the index operator,
and it's square brackets.

54
00:02:24,322 --> 00:02:27,072
So, you know, fruit is a variable

55
00:02:28,800 --> 00:02:32,284
that contains the string
banana, and then fruit sub one

56
00:02:32,284 --> 00:02:35,210
is the character that's in position one.

57
00:02:35,210 --> 00:02:36,538
Now that actually is the second character,

58
00:02:36,538 --> 00:02:39,751
I'll keep reminding you until
I get tired of reminding you.

59
00:02:39,751 --> 00:02:42,501
So, that assigns A, the letter A,

60
00:02:43,352 --> 00:02:47,519
into I mean, the letter A
into the variable letter.

61
00:02:49,203 --> 00:02:50,685
Of course, that's a badly choice,

62
00:02:50,685 --> 00:02:52,068
it's either a well chosen variable name

63
00:02:52,068 --> 00:02:53,788
or a badly chosen variable name.

64
00:02:53,788 --> 00:02:56,789
And the thing that goes
inside this can either be

65
00:02:56,789 --> 00:02:58,631
a constant or it can be an expression,

66
00:02:58,631 --> 00:03:02,348
so this is x equals three
and then fruits of x minus 1,

67
00:03:02,348 --> 00:03:04,356
well that means two,
which is position two,

68
00:03:04,356 --> 00:03:07,846
which is an N, and so that gives us an N.

69
00:03:07,846 --> 00:03:10,570
So the index is an operator,
and you can add this

70
00:03:10,570 --> 00:03:14,991
bracket syntax to the
end of a string variable.

71
00:03:14,991 --> 00:03:18,634
You can't index beyond
the length of the string,

72
00:03:18,634 --> 00:03:20,699
so if I say zots of five,

73
00:03:20,699 --> 00:03:22,031
well there are only three characters,

74
00:03:22,031 --> 00:03:25,886
which means zero, one, two,
but so five doesn't work.

75
00:03:25,886 --> 00:03:30,410
And of course, we get a
happy little traceback.

76
00:03:30,410 --> 00:03:31,243
Hmm.

77
00:03:31,243 --> 00:03:32,661
So you have to be careful
when you're starting

78
00:03:32,661 --> 00:03:33,875
to pull stuff out of strings.

79
00:03:33,875 --> 00:03:35,268
Although some of the things allow it,

80
00:03:35,268 --> 00:03:38,553
some of them don't and then
you'll kinda get used to that.

81
00:03:38,553 --> 00:03:41,305
We can ask how long a string is.

82
00:03:41,305 --> 00:03:43,412
And so we use the len function.

83
00:03:43,412 --> 00:03:44,972
We pass the string variable,

84
00:03:44,972 --> 00:03:47,945
and we pass it into len as parameter,

85
00:03:47,945 --> 00:03:50,306
and len gives us back
the length of the string.

86
00:03:50,306 --> 00:03:54,473
Not the position, so it's
zero through len minus one.

87
00:03:55,524 --> 00:03:58,446
So it's zero through length minus one.

88
00:03:58,446 --> 00:04:01,564
So you, length is just
another function that,

89
00:04:01,564 --> 00:04:03,462
we've been doing
functions now for a while,

90
00:04:03,462 --> 00:04:06,723
you pass in a parameter,
and then len does some work,

91
00:04:06,723 --> 00:04:09,878
and out comes six, and
that goes back into x,

92
00:04:09,878 --> 00:04:12,210
'cause the function has a residual value.

93
00:04:12,210 --> 00:04:15,444
It just happens to be a built-in function.

94
00:04:15,444 --> 00:04:19,240
And so, you know, somewhere
deep inside Python,

95
00:04:19,240 --> 00:04:22,287
there is code that takes this,

96
00:04:22,287 --> 00:04:24,356
and somebody wrote a
loop or look something up

97
00:04:24,356 --> 00:04:27,283
and then returned a
return value and sent back

98
00:04:27,283 --> 00:04:30,200
a six to go into our x variable.

99
00:04:31,736 --> 00:04:34,315
And so a function is
there, and like I said,

100
00:04:34,315 --> 00:04:36,650
we've been using this for a while.

101
00:04:36,650 --> 00:04:38,632
Another thing we tend to do
is to look through strings

102
00:04:38,632 --> 00:04:42,259
and look at strings and
dig data out of strings.

103
00:04:42,259 --> 00:04:44,810
Python is excellent for doing, sort of,

104
00:04:44,810 --> 00:04:46,883
these kinds of look-ups.

105
00:04:46,883 --> 00:04:49,369
And so, we can write a simple loop.

106
00:04:49,369 --> 00:04:51,702
We can write a for loop that

107
00:04:52,654 --> 00:04:55,973
creates some kind of a iteration variable,

108
00:04:55,973 --> 00:04:59,058
like index, and given that
we know that these positions

109
00:04:59,058 --> 00:05:02,076
are zero through five, we
can set this to be zero,

110
00:05:02,076 --> 00:05:04,647
and then write a while loop:
while the iteration variable

111
00:05:04,647 --> 00:05:07,357
is less than the length
of fruit, and remember,

112
00:05:07,357 --> 00:05:10,587
this is six, so it's gonna
be zero through five.

113
00:05:10,587 --> 00:05:14,861
Zero through five are the
values we wanna generate,

114
00:05:14,861 --> 00:05:17,311
and then we can look up one at a time,

115
00:05:17,311 --> 00:05:19,580
pull out fruits of
index, so fruits of zero,

116
00:05:19,580 --> 00:05:21,886
fruits of one, two, three, four, five,

117
00:05:21,886 --> 00:05:24,812
and then print out the
position and the letter.

118
00:05:24,812 --> 00:05:27,368
Index, and then add one
to index and it runs,

119
00:05:27,368 --> 00:05:30,138
this'll run six times, zero through five,

120
00:05:30,138 --> 00:05:33,663
and out we go to produce
this output right here.

121
00:05:33,663 --> 00:05:36,071
And so that's one way of
looping through strings.

122
00:05:36,071 --> 00:05:38,988
That is a basic indeterminate loop,

123
00:05:40,652 --> 00:05:44,484
but we construct carefully
an iteration value.

124
00:05:44,484 --> 00:05:45,633
Construct an iteration value

125
00:05:45,633 --> 00:05:48,966
and work our way through that loop data.

126
00:05:51,063 --> 00:05:54,600
The other way is to use a
determinant loop, a for loop.

127
00:05:54,600 --> 00:05:57,176
And generally, when we're able to use

128
00:05:57,176 --> 00:06:00,322
a while loop or a for
loop, all else being equal,

129
00:06:00,322 --> 00:06:02,929
we generally prefer a for loop.

130
00:06:02,929 --> 00:06:05,876
And so here we have the
for key word and fruit,

131
00:06:05,876 --> 00:06:09,574
and it's an in, and so
for letter in fruit,

132
00:06:09,574 --> 00:06:11,336
well that just says letter
is our iteration variable

133
00:06:11,336 --> 00:06:13,474
and it's gonna take on
the successive values

134
00:06:13,474 --> 00:06:15,774
of each of the characters,

135
00:06:15,774 --> 00:06:17,353
so this loop is gonna run six times,

136
00:06:17,353 --> 00:06:21,520
and letters gonna be B-A-N-A-N-A, banana.

137
00:06:22,482 --> 00:06:24,032
I'm always terrified
when I make these slides

138
00:06:24,032 --> 00:06:25,849
that I'm gonna misspell banana,

139
00:06:25,849 --> 00:06:27,193
because somehow I always think

140
00:06:27,193 --> 00:06:30,357
that there are two N's somewhere,

141
00:06:30,357 --> 00:06:33,646
I don't know, it's not one of
my favorite words to spell.

142
00:06:33,646 --> 00:06:36,086
I actually didn't choose
banana as the constant,

143
00:06:36,086 --> 00:06:38,910
the author who I borrowed
the textbook from,

144
00:06:38,910 --> 00:06:41,262
Allen Downey and Jeff Elkner,

145
00:06:41,262 --> 00:06:43,660
they used banana and so
I'm still using banana.

146
00:06:43,660 --> 00:06:44,967
So some of the jokes in the book

147
00:06:44,967 --> 00:06:46,847
aren't my book, aren't my jokes,

148
00:06:46,847 --> 00:06:50,455
they are the jokes of Jeff and Allen.

149
00:06:50,455 --> 00:06:53,165
So here are just two equivalent, you know,

150
00:06:53,165 --> 00:06:54,619
so you can have the while loop,

151
00:06:54,619 --> 00:06:56,143
they sort of both do the same thing,

152
00:06:56,143 --> 00:06:59,064
they both just print the
letters out one time through,

153
00:06:59,064 --> 00:07:00,865
each of these loops runs five times,

154
00:07:00,865 --> 00:07:03,961
but you can see how the determinant loop,

155
00:07:03,961 --> 00:07:06,231
the for loop, is a prettier loop.

156
00:07:06,231 --> 00:07:08,776
Unless you truly somehow
need to know this number

157
00:07:08,776 --> 00:07:09,753
as you're going through the loop.

158
00:07:09,753 --> 00:07:10,922
But if all you're doing is going through,

159
00:07:10,922 --> 00:07:12,310
and you wanna touch, in order,

160
00:07:12,310 --> 00:07:14,923
each of the characters of the string,

161
00:07:14,923 --> 00:07:18,154
you then simply write a for
loop, 'cause it's more elegant.

162
00:07:18,154 --> 00:07:20,133
The less code you write,
the less code you write,

163
00:07:20,133 --> 00:07:23,303
the less chance there is
for you to make a mistake.

164
00:07:23,303 --> 00:07:24,934
And so, the fact that
these are equivalent,

165
00:07:24,934 --> 00:07:27,801
this is three lines,
well, two lines of a loop

166
00:07:27,801 --> 00:07:29,072
and this is four lines of a loop,

167
00:07:29,072 --> 00:07:31,695
that's twice as many places
as you could make a mistake.

168
00:07:31,695 --> 00:07:34,908
'Cause you might, you know,
misspell index or something.

169
00:07:34,908 --> 00:07:36,781
I mean, why even make
an iteration variable

170
00:07:36,781 --> 00:07:40,213
if you don't need to make
an iteration variable.

171
00:07:40,213 --> 00:07:43,858
And so, we can do things that hearken back

172
00:07:43,858 --> 00:07:46,450
to our iterations and loops chapter,

173
00:07:46,450 --> 00:07:48,815
where anything that you
can do in those things,

174
00:07:48,815 --> 00:07:50,256
like look for the largest letter,

175
00:07:50,256 --> 00:07:51,640
look for the smallest letter,

176
00:07:51,640 --> 00:07:53,679
search to see if a letter exists,

177
00:07:53,679 --> 00:07:57,883
or say, count the number
of A's in the word banana.

178
00:07:57,883 --> 00:07:59,996
And so, that's what this is doing.

179
00:07:59,996 --> 00:08:03,572
And so, we, so we have a counter,

180
00:08:03,572 --> 00:08:05,616
so again we do something
at the top of the loop,

181
00:08:05,616 --> 00:08:07,398
we're gonna do something
in the middle loop,

182
00:08:07,398 --> 00:08:08,693
and then we're gonna print
it out at the bottom.

183
00:08:08,693 --> 00:08:10,033
So we start our counter at zero,

184
00:08:10,033 --> 00:08:12,839
we're gonna loop through
B-A, all the letters,

185
00:08:12,839 --> 00:08:14,560
and then if the letter is A,

186
00:08:14,560 --> 00:08:16,430
then count equals count plus one.

187
00:08:16,430 --> 00:08:18,580
And this is kinda a pattern
in a loop where we're

188
00:08:18,580 --> 00:08:20,626
noticing something and instead of like,

189
00:08:20,626 --> 00:08:23,104
we did it earlier, where
we said found equals true,

190
00:08:23,104 --> 00:08:24,715
well, we're gonna count them this time.

191
00:08:24,715 --> 00:08:26,397
So if we have one, we'll get one,

192
00:08:26,397 --> 00:08:29,596
if we have zero, we get zero,
and how many ever there are,

193
00:08:29,596 --> 00:08:32,826
but there should be three,
because it's gonna run

194
00:08:32,826 --> 00:08:35,763
three times and there's
three A's in banana.

195
00:08:35,763 --> 00:08:40,124
And so, this is, you know, a
conditional within a count.

196
00:08:40,124 --> 00:08:42,269
We've seen counts, we've
seen conditionals in loop,

197
00:08:42,269 --> 00:08:43,769
in prior chapters.

198
00:08:44,661 --> 00:08:48,578
And so, again, I love
the in keyword in Python.

199
00:08:49,848 --> 00:08:53,717
It again reminds me of a
set notation in algebra.

200
00:08:53,717 --> 00:08:56,032
If you're a math whiz, if you're
not, don't worry about it,

201
00:08:56,032 --> 00:08:58,497
or maybe you will be a
math whiz and you'll say,

202
00:08:58,497 --> 00:09:00,215
"Woah, this set notation reminds me a lot

203
00:09:00,215 --> 00:09:03,215
"of the, the in, keyword in Python."

204
00:09:06,955 --> 00:09:11,122
So, (coughs) again, it's for
iteration variable letter,

205
00:09:12,318 --> 00:09:13,991
again, don't get stuck with letter,

206
00:09:13,991 --> 00:09:17,207
I just happen to be
using it here, in banana.

207
00:09:17,207 --> 00:09:21,697
And that's for each character
in the string banana,

208
00:09:21,697 --> 00:09:25,816
run this loop once changing
the variable letter

209
00:09:25,816 --> 00:09:28,678
to be the particular character
that we're pointing at.

210
00:09:28,678 --> 00:09:29,744
And so, it's taking care,

211
00:09:29,744 --> 00:09:32,920
for is taking care of a lot for us, right?

212
00:09:32,920 --> 00:09:34,999
And so this is sort of
this really smart for loop.

213
00:09:34,999 --> 00:09:38,579
The for loop is, you know,
both deciding how many times

214
00:09:38,579 --> 00:09:40,761
to run the loop, in this case six,

215
00:09:40,761 --> 00:09:42,943
and it's advancing the letter.

216
00:09:42,943 --> 00:09:47,071
So, advance, print, you know,
decide whether you're done,

217
00:09:47,071 --> 00:09:49,338
advance, print, decide
whether you're done,

218
00:09:49,338 --> 00:09:51,419
advance, print, decide
whether you're done,

219
00:09:51,419 --> 00:09:53,872
advance, print, decide
whether you're done,

220
00:09:53,872 --> 00:09:55,159
advance, print, decide
whether you're done,

221
00:09:55,159 --> 00:09:57,283
advance, print, decide
whether you're done,

222
00:09:57,283 --> 00:10:00,821
I am now done, because I (beeps
and makes wooshing sound),

223
00:10:00,821 --> 00:10:02,378
you know we're done with
that particular string.

224
00:10:02,378 --> 00:10:06,211
And so, you can think
of the for as, you know,

225
00:10:07,605 --> 00:10:10,577
magically doing all of this for you.

226
00:10:10,577 --> 00:10:12,392
Of both deciding how long to run the loop,

227
00:10:12,392 --> 00:10:15,350
when you're done or not, and moving down

228
00:10:15,350 --> 00:10:19,366
through all the successive
letters in the loop.

229
00:10:19,366 --> 00:10:21,434
So, up next, we'll do, talk a little bit

230
00:10:21,434 --> 00:10:25,841
about additional things
that we can do with strings.

231
00:10:25,841 --> 00:10:28,258
(light jazz)

