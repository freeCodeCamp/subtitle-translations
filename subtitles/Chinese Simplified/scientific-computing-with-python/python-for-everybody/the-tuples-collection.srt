1
00:00:00,181 --> 00:00:02,414
- Hello and welcome to Chapter 10.

2
00:00:02,414 --> 00:00:03,247
Now we're gonna talk

3
00:00:03,247 --> 00:00:05,236
about our third kind of
collection called tuples.

4
00:00:05,236 --> 00:00:07,450
But tuples are really a lot like lists.

5
00:00:07,450 --> 00:00:09,002
There's not too much to them.

6
00:00:09,002 --> 00:00:13,208
They're really kind of
reductionist version of lists.

7
00:00:13,208 --> 00:00:16,708
They function very much like lists in that

8
00:00:18,370 --> 00:00:19,637
you know, they have things

9
00:00:19,637 --> 00:00:21,945
and the difference is is
there are no square braces.

10
00:00:21,945 --> 00:00:24,766
There is a parenthesis,
round brace or whatever.

11
00:00:24,766 --> 00:00:27,899
And they have positions
zero, one, and two,

12
00:00:27,899 --> 00:00:28,937
just like a list.

13
00:00:28,937 --> 00:00:31,422
And you can look things up x(2),

14
00:00:31,422 --> 00:00:34,557
so x(2) is the third element here.

15
00:00:34,557 --> 00:00:36,191
And so that prints out Joseph.

16
00:00:36,191 --> 00:00:39,349
You can assign, you
know make a tuples here.

17
00:00:39,349 --> 00:00:41,740
This is a constant syntax for a tuples

18
00:00:41,740 --> 00:00:42,576
and print that out

19
00:00:42,576 --> 00:00:45,101
and a print statement shows
you that this is a tuple

20
00:00:45,101 --> 00:00:47,081
not a list by showing
you round parenthesis

21
00:00:47,081 --> 00:00:49,551
and a whole bunch of
functions that work with lists

22
00:00:49,551 --> 00:00:51,997
work the same way with tuples.

23
00:00:51,997 --> 00:00:54,707
You can put a tuple at
the end of a end statement

24
00:00:54,707 --> 00:00:56,475
in a for as you might expect

25
00:00:56,475 --> 00:00:57,961
and then it iterates through the tuples.

26
00:00:57,961 --> 00:00:59,311
tuples maintain order,

27
00:00:59,311 --> 00:01:01,227
so it prints out one, nine and two.

28
00:01:01,227 --> 00:01:03,940
So, literally this bit of code here

29
00:01:03,940 --> 00:01:07,151
could be identical whether
it was a list or a tuple.

30
00:01:07,151 --> 00:01:10,072
It really would do the exact same thing.

31
00:01:10,072 --> 00:01:13,466
The difference between tuples
are that they are immutable.

32
00:01:13,466 --> 00:01:14,939
Once you create the tuple

33
00:01:14,939 --> 00:01:17,146
you can only sort of assign a tuples

34
00:01:17,146 --> 00:01:18,270
but you can't modify it.

35
00:01:18,270 --> 00:01:20,027
You can modify a list.

36
00:01:20,027 --> 00:01:21,646
So if we take a look at a list here.

37
00:01:21,646 --> 00:01:23,780
We make a list that's nine, eight, seven.

38
00:01:23,780 --> 00:01:25,776
And we say x(2) equals 6,

39
00:01:25,776 --> 00:01:28,436
well that just means
this seven becomes a six.

40
00:01:28,436 --> 00:01:29,906
And that's just natural,

41
00:01:29,906 --> 00:01:32,606
meaning we can reassign slots.

42
00:01:32,606 --> 00:01:33,836
We can delete things.

43
00:01:33,836 --> 00:01:34,953
We can insert things.

44
00:01:34,953 --> 00:01:36,548
We can mutate them.

45
00:01:36,548 --> 00:01:37,841
We can change them.

46
00:01:37,841 --> 00:01:40,164
So they're changeable, right.

47
00:01:40,164 --> 00:01:41,229
They're changeable.

48
00:01:41,229 --> 00:01:44,671
But if we try to do that
same thing with a string.

49
00:01:44,671 --> 00:01:46,472
So we say y = ABC and we know

50
00:01:46,472 --> 00:01:48,321
that this is position zero, one and two.

51
00:01:48,321 --> 00:01:51,005
But if we tried to say
let's change the C to a D

52
00:01:51,005 --> 00:01:55,085
by saying y(2) equals
D, that is not allowed.

53
00:01:55,085 --> 00:01:57,426
And it says it doesn't
support item assignment.

54
00:01:57,426 --> 00:01:59,433
And this little bracket,

55
00:01:59,433 --> 00:02:02,585
you know, x(2), is what
they call item assignment

56
00:02:02,585 --> 00:02:04,396
inside of Python.

57
00:02:04,396 --> 00:02:06,002
And so if we do the same thing then

58
00:02:06,002 --> 00:02:08,252
with a three element tuple,

59
00:02:09,864 --> 00:02:13,629
put that in C and we try to
change this slot to be a zero,

60
00:02:13,629 --> 00:02:14,657
it's gonna blow up

61
00:02:14,657 --> 00:02:16,180
because it's the exact same thing.

62
00:02:16,180 --> 00:02:17,699
And that has to do with the fact that

63
00:02:17,699 --> 00:02:19,591
once this assignment is made,

64
00:02:19,591 --> 00:02:21,515
this is not modifiable.

65
00:02:21,515 --> 00:02:24,010
Now it turns out that the
reason it's not modifiable

66
00:02:24,010 --> 00:02:25,510
is for efficiency.

67
00:02:27,660 --> 00:02:29,504
They take up less storage,

68
00:02:29,504 --> 00:02:32,395
they are quicker to access

69
00:02:32,395 --> 00:02:35,230
and they're really designed
internally behind the scenes

70
00:02:35,230 --> 00:02:38,061
in ways we don't really
need to understand.

71
00:02:38,061 --> 00:02:40,541
They're just more efficient than lists.

72
00:02:40,541 --> 00:02:42,166
If all you wanna do is store a list

73
00:02:42,166 --> 00:02:44,000
and look at it and then throw it away,

74
00:02:44,000 --> 00:02:45,892
you probably should use a tuple instead.

75
00:02:45,892 --> 00:02:48,079
So there's a lot of things
that you can do with lists

76
00:02:48,079 --> 00:02:49,496
that you also can't do with tuples

77
00:02:49,496 --> 00:02:51,425
but they're really just a corollary

78
00:02:51,425 --> 00:02:53,976
of this notion of non mutability.

79
00:02:53,976 --> 00:02:55,581
And so like you can sort a list,

80
00:02:55,581 --> 00:02:56,999
but you can't sort tuples.

81
00:02:56,999 --> 00:02:59,660
You can add a five to the
end of three, two, one.

82
00:02:59,660 --> 00:03:01,164
Can't do that in a tuple,

83
00:03:01,164 --> 00:03:02,396
but you can in a list.

84
00:03:02,396 --> 00:03:03,567
And flip the order.

85
00:03:03,567 --> 00:03:05,187
Dot dot dot dot dot dot.

86
00:03:05,187 --> 00:03:07,255
So anything that you can do to a list

87
00:03:07,255 --> 00:03:09,472
that modifies the list,

88
00:03:09,472 --> 00:03:11,617
not allowed for tuples.

89
00:03:11,617 --> 00:03:14,439
And so you can take a look
at the kinds of things

90
00:03:14,439 --> 00:03:15,748
that are inside,

91
00:03:15,748 --> 00:03:19,027
the methods that are part of each list.

92
00:03:19,027 --> 00:03:19,860
Append, count,

93
00:03:19,860 --> 00:03:20,693
extend, index,

94
00:03:20,693 --> 00:03:21,848
insert, pop.

95
00:03:21,848 --> 00:03:22,968
All of these some of these many of these

96
00:03:22,968 --> 00:03:24,857
are modifying and then count and index

97
00:03:24,857 --> 00:03:28,083
are the only ones that work for tuples.

98
00:03:28,083 --> 00:03:31,379
And so tuples are limited lists.

99
00:03:31,379 --> 00:03:33,281
Now at some point there's
gonna be a but here

100
00:03:33,281 --> 00:03:35,388
to say why do we like them?

101
00:03:35,388 --> 00:03:37,695
And the reason that we like them

102
00:03:37,695 --> 00:03:39,503
is that they're just more efficient.

103
00:03:39,503 --> 00:03:40,801
They don't have build,

104
00:03:40,801 --> 00:03:45,119
Python in its own internal
organization of these objects

105
00:03:45,119 --> 00:03:47,804
it knows that they'll never be modified.

106
00:03:47,804 --> 00:03:48,954
'Cause when you make a tuple,

107
00:03:48,954 --> 00:03:50,256
you as the programmer are saying,

108
00:03:50,256 --> 00:03:51,853
I'm never gonna modify this.

109
00:03:51,853 --> 00:03:54,149
And Python won't let you do it.

110
00:03:54,149 --> 00:03:56,390
So it's higher performance,
better memory use.

111
00:03:56,390 --> 00:03:58,210
And you know, to a beginning programmer

112
00:03:58,210 --> 00:04:00,654
that doesn't really matter
but that's the reason.

113
00:04:00,654 --> 00:04:02,987
And so we tend to use tuples

114
00:04:03,965 --> 00:04:06,103
in situations where we're
gonna make a temporary variable

115
00:04:06,103 --> 00:04:08,584
and then temporarily
use it just a little bit

116
00:04:08,584 --> 00:04:10,584
and then throw it away without
really messing with it.

117
00:04:10,584 --> 00:04:12,607
And we tend to use lists
to build things up,

118
00:04:12,607 --> 00:04:15,107
et cetera et cetera et cetera.

119
00:04:16,198 --> 00:04:19,163
So, the other thing that's
interesting about tuples

120
00:04:19,163 --> 00:04:20,978
and we've actually sort of seen this

121
00:04:20,978 --> 00:04:24,406
is that you can put a tuple
that includes variables

122
00:04:24,406 --> 00:04:27,448
on the left side of the assignment.

123
00:04:27,448 --> 00:04:29,370
And this takes a little getting used to

124
00:04:29,370 --> 00:04:30,868
but it's really cool.

125
00:04:30,868 --> 00:04:33,149
And no other language
that I know of does this.

126
00:04:33,149 --> 00:04:34,747
So if we say x comma y,

127
00:04:34,747 --> 00:04:36,030
that's a two tuple,

128
00:04:36,030 --> 00:04:37,176
both have to be variables.

129
00:04:37,176 --> 00:04:38,985
You can't put constants on this side.

130
00:04:38,985 --> 00:04:41,348
You know and it's like
saying x equals four,

131
00:04:41,348 --> 00:04:43,265
y equals "fred", right.

132
00:04:44,682 --> 00:04:47,448
So what happens is is you can put a tuple

133
00:04:47,448 --> 00:04:49,408
on the far side of an
assignment statement.

134
00:04:49,408 --> 00:04:52,296
And the four goes to x
and the "fred" goes to y.

135
00:04:52,296 --> 00:04:53,446
And you say what's in y?

136
00:04:53,446 --> 00:04:54,645
Well y is indeed "fred".

137
00:04:54,645 --> 00:04:56,725
And so this is like two
assignment statements.

138
00:04:56,725 --> 00:04:58,480
Now the way I've got this syntax,

139
00:04:58,480 --> 00:05:00,745
I would probably do, you
know, two separate statements.

140
00:05:00,745 --> 00:05:04,954
Just not to show off that
I know how to do tuples,

141
00:05:04,954 --> 00:05:07,098
you know, and so you
can, here's another one,

142
00:05:07,098 --> 00:05:09,309
and they just move correspondingly.

143
00:05:09,309 --> 00:05:10,566
If you don't have two here,

144
00:05:10,566 --> 00:05:11,753
and you do have two here.

145
00:05:11,753 --> 00:05:15,895
Well if you have three here
or two here and three here

146
00:05:15,895 --> 00:05:17,211
and you don't match the number there,

147
00:05:17,211 --> 00:05:18,371
you get in some trouble.

148
00:05:18,371 --> 00:05:20,645
Now if you just say x equals tuple,

149
00:05:20,645 --> 00:05:22,675
then that is the tuple in the list.

150
00:05:22,675 --> 00:05:26,750
But this is just a simple
straight 99 value going into A.

151
00:05:26,750 --> 00:05:30,188
So you can put tuples
as the left hand side.

152
00:05:30,188 --> 00:05:31,224
And you can even do things like

153
00:05:31,224 --> 00:05:32,950
return a tuple from functions.

154
00:05:32,950 --> 00:05:36,584
That's a real nice Python
feature that I like a lot.

155
00:05:36,584 --> 00:05:38,509
tuples are also related to dictionaries

156
00:05:38,509 --> 00:05:40,695
as we've seen in the previous chapter.

157
00:05:40,695 --> 00:05:42,086
So here we make a little dictionary,

158
00:05:42,086 --> 00:05:44,123
we make a empty dictionary by constructing

159
00:05:44,123 --> 00:05:45,013
an empty dictionary,

160
00:05:45,013 --> 00:05:47,147
stick it in d so d is sort of like this

161
00:05:47,147 --> 00:05:49,173
place that can hold key value pairs.

162
00:05:49,173 --> 00:05:52,560
And we put "csev" and
there's a two in there.

163
00:05:52,560 --> 00:05:54,693
And "cwen" and there's a four in there.

164
00:05:54,693 --> 00:05:55,895
So we have this, you know,

165
00:05:55,895 --> 00:05:57,918
associative mapping
between "csev" and two,

166
00:05:57,918 --> 00:06:00,173
and "cwen" and four, all stuff we know.

167
00:06:00,173 --> 00:06:02,278
And now, we say hey.

168
00:06:02,278 --> 00:06:04,762
We're gonna loop through
the key value pairs here

169
00:06:04,762 --> 00:06:08,083
and we've seen this
syntax before, k comma v.

170
00:06:08,083 --> 00:06:09,444
So this is a tuple.

171
00:06:09,444 --> 00:06:11,322
So you can think of this
as each one of these things

172
00:06:11,322 --> 00:06:13,589
is going to get assigned into this tuple

173
00:06:13,589 --> 00:06:15,146
which means the key ends up,

174
00:06:15,146 --> 00:06:16,928
and the first one's the key
and the second one's the value,

175
00:06:16,928 --> 00:06:20,506
I use the variable k v all
the time in code that I write

176
00:06:20,506 --> 00:06:22,353
just for my own sanity.

177
00:06:22,353 --> 00:06:24,675
So k v are gonna iterate successively

178
00:06:24,675 --> 00:06:28,412
through the successive
keys and values in that.

179
00:06:28,412 --> 00:06:31,909
So this is gonna run twice
and k's gonna be "csev" two,

180
00:06:31,909 --> 00:06:33,168
and "cwen" four,

181
00:06:33,168 --> 00:06:36,644
the order just happened to stay the same.

182
00:06:36,644 --> 00:06:38,144
And so if you say,

183
00:06:39,195 --> 00:06:41,212
what is in one of these things?

184
00:06:41,212 --> 00:06:42,859
You can actually take d items,

185
00:06:42,859 --> 00:06:45,082
the items method within that dictionary

186
00:06:45,082 --> 00:06:46,006
and say hey,

187
00:06:46,006 --> 00:06:48,056
give me back, give that to me back,

188
00:06:48,056 --> 00:06:49,217
and then print tups,

189
00:06:49,217 --> 00:06:51,621
and this is a special kind of a class

190
00:06:51,621 --> 00:06:55,064
but really ultimately
it is a list of tuples.

191
00:06:55,064 --> 00:06:57,518
You know this is two, this is the zero,

192
00:06:57,518 --> 00:06:59,248
this is the two, the one,

193
00:06:59,248 --> 00:07:00,487
the first and the second.

194
00:07:00,487 --> 00:07:01,881
And then within each thing you get,

195
00:07:01,881 --> 00:07:03,637
you have a two tuple.

196
00:07:03,637 --> 00:07:06,304
And so, in a sense this k and v

197
00:07:06,304 --> 00:07:09,447
are iterating through those things

198
00:07:09,447 --> 00:07:13,614
when we're putting d items
here and d items there.

199
00:07:14,742 --> 00:07:17,128
One nice thing about tuples
is that they're comparable.

200
00:07:17,128 --> 00:07:18,451
They're comparable in the same way

201
00:07:18,451 --> 00:07:19,587
that strings are comparable,

202
00:07:19,587 --> 00:07:21,813
meaning that they're
compared from left to write

203
00:07:21,813 --> 00:07:23,798
with the left most or zero tuple

204
00:07:23,798 --> 00:07:25,390
being the most significant.

205
00:07:25,390 --> 00:07:28,024
And it doesn't compare any
further than it has to.

206
00:07:28,024 --> 00:07:30,114
If its asking less than,

207
00:07:30,114 --> 00:07:32,610
so if it's looking at
say this first tuple,

208
00:07:32,610 --> 00:07:34,846
it starts at the left and says okay,

209
00:07:34,846 --> 00:07:37,010
it asks the question,
tell me true or false.

210
00:07:37,010 --> 00:07:40,237
Is zero less than five
and the answer is true

211
00:07:40,237 --> 00:07:43,410
and so the answer to this
overall expression is true

212
00:07:43,410 --> 00:07:45,906
and it doesn't even
compare those two numbers,

213
00:07:45,906 --> 00:07:48,106
those second and third number.

214
00:07:48,106 --> 00:07:49,523
They don't compare them.

215
00:07:49,523 --> 00:07:53,005
If on the other hand we're
asking is this less than that,

216
00:07:53,005 --> 00:07:54,880
it only looks at the first one

217
00:07:54,880 --> 00:07:57,033
and asks if it can answer the question.

218
00:07:57,033 --> 00:07:58,912
And the answer is well they're both zero.

219
00:07:58,912 --> 00:08:00,287
And so I can't answer the question

220
00:08:00,287 --> 00:08:02,665
so I have to go to the
second one, second pair.

221
00:08:02,665 --> 00:08:05,878
And one is less than three and
so that means this is true.

222
00:08:05,878 --> 00:08:08,241
And it does not check this,

223
00:08:08,241 --> 00:08:11,211
even though 20 million
is bigger than four,

224
00:08:11,211 --> 00:08:14,962
it doesn't matter because
these are the numbers

225
00:08:14,962 --> 00:08:18,066
that cause the true to happen.

226
00:08:18,066 --> 00:08:19,733
And the same is true

227
00:08:20,901 --> 00:08:22,831
if you do this with strings.

228
00:08:22,831 --> 00:08:24,950
Again, we start the first one.

229
00:08:24,950 --> 00:08:27,582
So Jones, Sally, well that's the same.

230
00:08:27,582 --> 00:08:28,825
So we don't know the answer yet.

231
00:08:28,825 --> 00:08:30,782
And so Sally, Sam, well okay.

232
00:08:30,782 --> 00:08:33,318
S, S, oh they're the same,

233
00:08:33,318 --> 00:08:35,490
a, a they're the same.

234
00:08:35,490 --> 00:08:36,332
Oh ...

235
00:08:36,332 --> 00:08:37,165
l and m.

236
00:08:38,340 --> 00:08:40,134
L is less than m,

237
00:08:40,134 --> 00:08:43,226
so the actual letter that
makes the difference here

238
00:08:43,226 --> 00:08:46,490
the l and the m and
leads to us being true.

239
00:08:46,490 --> 00:08:48,415
And so this, it goes left to right

240
00:08:48,415 --> 00:08:49,439
but then even when it's doing strings

241
00:08:49,439 --> 00:08:50,648
it's going left to right.

242
00:08:50,648 --> 00:08:53,981
That's just how string comparison works.

243
00:08:56,238 --> 00:09:01,080
And if we say is Jones,
Sally greater than Adam, Sam,

244
00:09:01,080 --> 00:09:03,979
well we check the first one
and we check the J and the A.

245
00:09:03,979 --> 00:09:06,455
Well J is greater than A
and so we don't have to

246
00:09:06,455 --> 00:09:07,343
look at anything else.

247
00:09:07,343 --> 00:09:08,703
We don't have to look at these,

248
00:09:08,703 --> 00:09:09,826
any more of these characters.

249
00:09:09,826 --> 00:09:11,825
We don't have to look at the
second thing in the tuple.

250
00:09:11,825 --> 00:09:12,719
We don't have to look at,

251
00:09:12,719 --> 00:09:14,501
that is enough to be true.

252
00:09:14,501 --> 00:09:17,756
So it only scans until it
has a definitive answer.

253
00:09:17,756 --> 00:09:20,089
It doesn't scan any further.

254
00:09:21,153 --> 00:09:22,447
So now what we're gonna do is

255
00:09:22,447 --> 00:09:24,402
use this comparable capability

256
00:09:24,402 --> 00:09:25,991
to sort these lists of tuples

257
00:09:25,991 --> 00:09:27,441
and then bring this all back

258
00:09:27,441 --> 00:09:30,441
and connect it more to dictionaries.

259
00:09:31,298 --> 00:09:34,715
(slow jazzy piano music)

