1
00:00:00,624 --> 00:00:02,502
- So now we're gonna talk a
little bit about XML Schema.

2
00:00:02,502 --> 00:00:06,830
XML Schema is a language
that allows you to decide

3
00:00:06,830 --> 00:00:09,868
on whether or not a
particular XML document

4
00:00:09,868 --> 00:00:11,758
meets a contract, an arrangement.

5
00:00:11,758 --> 00:00:13,413
So you have two pieces of software

6
00:00:13,413 --> 00:00:16,948
exchanging data using XML,
and what if one of them,

7
00:00:16,948 --> 00:00:17,781
if they're all working

8
00:00:17,781 --> 00:00:19,377
nobody really worries too much about it,

9
00:00:19,377 --> 00:00:20,747
but if all of sudden one breaks,

10
00:00:20,747 --> 00:00:22,831
you change one side
and another one breaks,

11
00:00:22,831 --> 00:00:24,680
whose fault was it, right?

12
00:00:24,680 --> 00:00:26,844
Was it the side that got
changed or the other side?

13
00:00:26,844 --> 00:00:28,490
And so you could argue.

14
00:00:28,490 --> 00:00:30,440
So what you like to do
is before you set up

15
00:00:30,440 --> 00:00:32,510
these arrangements between
these applications,

16
00:00:32,510 --> 00:00:33,987
set up a contract.

17
00:00:33,987 --> 00:00:37,226
In a way, they're kind
of like the RFCs are

18
00:00:37,226 --> 00:00:41,393
except that their scope is
between pairs of applications.

19
00:00:42,491 --> 00:00:44,658
So it is in itself is XML.

20
00:00:47,076 --> 00:00:50,216
Basically what we do is
we take an XML document

21
00:00:50,216 --> 00:00:52,756
and an XML Schema contract,
and then we either say

22
00:00:52,756 --> 00:00:55,087
that's good, or that that is bad.

23
00:00:55,087 --> 00:00:57,159
And that's called validation.

24
00:00:57,159 --> 00:00:59,590
A piece of software that validates XML

25
00:00:59,590 --> 00:01:03,044
when given a schema is called a validator.

26
00:01:03,044 --> 00:01:05,666
And so an XML document.

27
00:01:05,666 --> 00:01:07,393
Here we have our little XML document.

28
00:01:07,393 --> 00:01:09,181
We're passing it to the validator.

29
00:01:09,181 --> 00:01:13,425
And then we have a schema
contract, which is itself XML.

30
00:01:13,425 --> 00:01:17,774
It's kind of a particular kind
of XML, that xs:complexType.

31
00:01:17,774 --> 00:01:19,003
That's just a tag.

32
00:01:19,003 --> 00:01:22,123
Colon is a legitimate character
for the name of a tag.

33
00:01:22,123 --> 00:01:24,642
Name equals person,
that's just an attribute.

34
00:01:24,642 --> 00:01:28,809
And so XML schema is a
particular format of XML that

35
00:01:29,803 --> 00:01:33,573
renders an opinion about what
XML is supposed to look like.

36
00:01:33,573 --> 00:01:36,784
So, there's a number of
different XML Schema languages,

37
00:01:36,784 --> 00:01:39,210
the one we're goin to look at is one

38
00:01:39,210 --> 00:01:41,172
that kinda came a little bit later,

39
00:01:41,172 --> 00:01:44,268
that's very common, called XSD,

40
00:01:44,268 --> 00:01:48,513
which is the Worldwide Web
Consortium Schema specification.

41
00:01:48,513 --> 00:01:51,696
Often you'll find files
that have suffixes of .xsd

42
00:01:51,696 --> 00:01:53,363
that actually contain

43
00:01:53,363 --> 00:01:56,967
the XML just like we're going to show you.

44
00:01:56,967 --> 00:01:59,383
So if you recall there
are simple elements,

45
00:01:59,383 --> 00:02:01,231
which have text children,

46
00:02:01,231 --> 00:02:02,790
and then there are complex elements

47
00:02:02,790 --> 00:02:06,780
where, other nodes or
children of other nodes.

48
00:02:06,780 --> 00:02:08,305
And so we can say this.

49
00:02:08,305 --> 00:02:10,113
And so here we have a little bit of XML,

50
00:02:10,113 --> 00:02:13,293
and the XML Schema that
makes sense with that.

51
00:02:13,293 --> 00:02:15,172
So, what we're saying

52
00:02:15,172 --> 00:02:17,691
is the outer tag of this legitimate XML

53
00:02:17,691 --> 00:02:20,800
is supposed to be a complex
tag, with the name of person.

54
00:02:20,800 --> 00:02:22,507
And so there we go, that looks good.

55
00:02:22,507 --> 00:02:23,981
Good, good.

56
00:02:23,981 --> 00:02:26,256
Then there is a sequence,

57
00:02:26,256 --> 00:02:28,561
and then there is a simple element,

58
00:02:28,561 --> 00:02:30,765
name of last name, looks good,

59
00:02:30,765 --> 00:02:33,997
and it's a string, that looks good,

60
00:02:33,997 --> 00:02:35,429
another tag that's in it,

61
00:02:35,429 --> 00:02:38,377
named age that's a type integer,

62
00:02:38,377 --> 00:02:39,332
that's good,

63
00:02:39,332 --> 00:02:42,530
and then a thing that's called dateborn,

64
00:02:42,530 --> 00:02:44,229
and then there, it looks like a date,

65
00:02:44,229 --> 00:02:45,548
so we check all these things

66
00:02:45,548 --> 00:02:47,965
and we can basically say yup,

67
00:02:49,602 --> 00:02:52,537
that is a good XML document
according to this Schema.

68
00:02:52,537 --> 00:02:54,519
And, you don't have to
write this generally,

69
00:02:54,519 --> 00:02:57,038
but there is software that
reads these two things

70
00:02:57,038 --> 00:02:59,996
and comes back with a true or a false

71
00:02:59,996 --> 00:03:03,845
and not even have some
detail as to what went wrong

72
00:03:03,845 --> 00:03:06,178
with this particular schema.

73
00:03:07,136 --> 00:03:10,163
Here's some more that
you can do with a Schema.

74
00:03:10,163 --> 00:03:12,541
We can do things like, you know,

75
00:03:12,541 --> 00:03:14,848
have a complex type, we have a sequence,

76
00:03:14,848 --> 00:03:16,859
here we have a string full_name

77
00:03:16,859 --> 00:03:18,790
and a string child_name.

78
00:03:18,790 --> 00:03:21,165
But we have this min
occurs and max occurs.

79
00:03:21,165 --> 00:03:24,081
So min occurs is the minimum
number of times it can occur

80
00:03:24,081 --> 00:03:26,002
and maximum is the maximum,

81
00:03:26,002 --> 00:03:28,530
so min occurs equals one,
max occurs equals one,

82
00:03:28,530 --> 00:03:29,903
means it's required.

83
00:03:29,903 --> 00:03:31,151
And so this is required.

84
00:03:31,151 --> 00:03:32,362
And we don't have two of 'em,

85
00:03:32,362 --> 00:03:33,811
two of 'em would be an error.

86
00:03:33,811 --> 00:03:35,662
One of 'em is fine so that's good.

87
00:03:35,662 --> 00:03:38,019
Here the child_name is

88
00:03:38,019 --> 00:03:40,286
min occurs zero, max occurs 10.

89
00:03:40,286 --> 00:03:43,008
So we have four here,
and so that's good too.

90
00:03:43,008 --> 00:03:47,273
So that is another kind
of XML Schema constraint

91
00:03:47,273 --> 00:03:48,778
that you can have.

92
00:03:48,778 --> 00:03:52,528
Here's a few other data
types that we can do.

93
00:03:53,553 --> 00:03:55,857
We've done the string,
we've done the date.

94
00:03:55,857 --> 00:03:57,015
The date look like this.

95
00:03:57,015 --> 00:04:01,182
Dates are four-digit year,
two-digit month, two-digit day

96
00:04:02,269 --> 00:04:03,142
with dashes.

97
00:04:03,142 --> 00:04:05,479
Now there's lots of different
ways to represent dates,

98
00:04:05,479 --> 00:04:06,788
but the nice thing about this

99
00:04:06,788 --> 00:04:08,901
and you don't, you have
to put the zeros in,

100
00:04:08,901 --> 00:04:11,522
so zero nine for September.

101
00:04:11,522 --> 00:04:13,696
It means that these are
sortable as strings,

102
00:04:13,696 --> 00:04:15,839
so that if you do all your dates this way,

103
00:04:15,839 --> 00:04:16,947
they're sortable as strings.

104
00:04:16,947 --> 00:04:18,523
So you could argue what is prettier,

105
00:04:18,523 --> 00:04:20,331
but for computers we
don't worry about that,

106
00:04:20,331 --> 00:04:23,144
we're arguing about what's
the most functional.

107
00:04:23,144 --> 00:04:26,879
And then the dateTime
is that same date format

108
00:04:26,879 --> 00:04:29,105
with zeros followed by the letter T,

109
00:04:29,105 --> 00:04:30,191
letter T,

110
00:04:30,191 --> 00:04:32,955
and then followed by
hours minutes seconds,

111
00:04:32,955 --> 00:04:37,122
zero-filled, right, so nine
o'clock is um, zero nine,

112
00:04:38,188 --> 00:04:39,285
and then the time zone,

113
00:04:39,285 --> 00:04:41,743
which we'll talk about a
second in the next slide.

114
00:04:41,743 --> 00:04:43,134
You can have decimal numbers

115
00:04:43,134 --> 00:04:45,734
and you can have integer numbers as well.

116
00:04:45,734 --> 00:04:48,223
And so we are able to
sort of render an opinion

117
00:04:48,223 --> 00:04:51,069
as to what is good, and what is bad,

118
00:04:51,069 --> 00:04:53,555
in the resulting XML.

119
00:04:53,555 --> 00:04:55,498
So dates are kind of interesting.

120
00:04:55,498 --> 00:04:58,412
There's, again, we have lots
of different formats of dates,

121
00:04:58,412 --> 00:05:00,495
you know, nine, slash 10,

122
00:05:02,132 --> 00:05:03,632
slash 2002, right.

123
00:05:05,764 --> 00:05:08,536
That's a format of a date but that's one.

124
00:05:08,536 --> 00:05:11,116
There's another format of
the date which is you know,

125
00:05:11,116 --> 00:05:13,366
12 December 2002, whatever.

126
00:05:14,936 --> 00:05:16,898
And so this is how people show dates.

127
00:05:16,898 --> 00:05:19,479
Computers don't wanna have
all those different dates

128
00:05:19,479 --> 00:05:21,205
and don't wanna figure those out.

129
00:05:21,205 --> 00:05:23,815
They have libraries that produce dates

130
00:05:23,815 --> 00:05:26,671
and make 'em look pretty
for particular locales,

131
00:05:26,671 --> 00:05:30,113
but computers really want
dates that work best for them.

132
00:05:30,113 --> 00:05:32,145
So we just say okay, we're going to have

133
00:05:32,145 --> 00:05:35,924
this year month day
time, and then zero fill,

134
00:05:35,924 --> 00:05:39,841
hours minutes seconds,
hms, and then time zone.

135
00:05:40,882 --> 00:05:43,839
Now computers even prefer a time zone.

136
00:05:43,839 --> 00:05:45,505
I don't know if you've used

137
00:05:45,505 --> 00:05:46,936
something like your Google calendar,

138
00:05:46,936 --> 00:05:49,731
and you take a flight
or take a train trip,

139
00:05:49,731 --> 00:05:51,133
and you end up in a different time zone,

140
00:05:51,133 --> 00:05:52,555
everything switches

141
00:05:52,555 --> 00:05:54,271
and that's because Google Calendar

142
00:05:54,271 --> 00:05:57,150
is not really storing the time zone

143
00:05:57,150 --> 00:05:58,206
that you're,

144
00:05:58,206 --> 00:06:01,295
not storing the dates relative
in your current time zone,

145
00:06:01,295 --> 00:06:04,432
it's storing them in what
we call universal time,

146
00:06:04,432 --> 00:06:05,877
or Greenwich Mean Time,

147
00:06:05,877 --> 00:06:08,069
Zulu time is another word for that.

148
00:06:08,069 --> 00:06:10,548
And Z means this time that is

149
00:06:10,548 --> 00:06:13,433
the time in London, England,

150
00:06:13,433 --> 00:06:15,860
Greenwich Mean time.

151
00:06:15,860 --> 00:06:17,677
And so the thing is that, that means,

152
00:06:17,677 --> 00:06:20,217
if this data moves between time zones,

153
00:06:20,217 --> 00:06:22,445
or crosses the International Date Line,

154
00:06:22,445 --> 00:06:24,201
or Standard Daylight Savings Time,

155
00:06:24,201 --> 00:06:25,501
or anything like that,

156
00:06:25,501 --> 00:06:26,892
none of that changes.

157
00:06:26,892 --> 00:06:30,633
And so we have this internal date and time

158
00:06:30,633 --> 00:06:33,010
that's very common in situations

159
00:06:33,010 --> 00:06:35,355
where computers are exchanging data

160
00:06:35,355 --> 00:06:38,362
that then gets shown with
the time zone converted

161
00:06:38,362 --> 00:06:41,186
to the time zone or the local format

162
00:06:41,186 --> 00:06:42,477
that's the the right way to do that.

163
00:06:42,477 --> 00:06:44,640
And there's a standard
for how dates and times

164
00:06:44,640 --> 00:06:46,034
are supposed to look.

165
00:06:46,034 --> 00:06:49,412
So here's another little
example of some stuff,

166
00:06:49,412 --> 00:06:50,266
let's see what we got.

167
00:06:50,266 --> 00:06:53,438
Now if you see this
little question mark XML,

168
00:06:53,438 --> 00:06:54,494
that's not a problem,

169
00:06:54,494 --> 00:06:56,660
that just is a way of
sort of putting a header

170
00:06:56,660 --> 00:06:59,289
on the whole document that
says it's an XML document,

171
00:06:59,289 --> 00:07:02,408
telling it that's a UTF-8 document,

172
00:07:02,408 --> 00:07:04,044
and that's not really a tag

173
00:07:04,044 --> 00:07:06,278
that's sort of like a marker on the file,

174
00:07:06,278 --> 00:07:07,976
so that you can put that there

175
00:07:07,976 --> 00:07:10,331
but it doesn't harm the XML.

176
00:07:10,331 --> 00:07:12,568
The outer tag is this tag right here,

177
00:07:12,568 --> 00:07:16,235
xsdet;schema, and then
um, what else we got?

178
00:07:17,717 --> 00:07:18,603
We got an address,

179
00:07:18,603 --> 00:07:20,735
we gotta string string
string string string,

180
00:07:20,735 --> 00:07:22,077
we've seen all those,

181
00:07:22,077 --> 00:07:23,710
here we have country,

182
00:07:23,710 --> 00:07:24,901
and we're gonna have a restriction

183
00:07:24,901 --> 00:07:26,120
that basically says,

184
00:07:26,120 --> 00:07:28,253
this is a simple string,

185
00:07:28,253 --> 00:07:31,370
but we're going to make it
so that you have to list

186
00:07:31,370 --> 00:07:34,876
one of these four as the country code.

187
00:07:34,876 --> 00:07:36,886
And so here we are down here,

188
00:07:36,886 --> 00:07:41,053
and that's UK, and that's
UK, and so that is valid XML.

189
00:07:43,906 --> 00:07:46,426
Another couple of examples here.

190
00:07:46,426 --> 00:07:50,343
Let's see, string, string
string string string,

191
00:07:51,192 --> 00:07:54,411
max occurs unbounded, that
means infinite number,

192
00:07:54,411 --> 00:07:56,840
there's no limit on the
number, you can do that,

193
00:07:56,840 --> 00:07:58,139
min occurs of zero,

194
00:07:58,139 --> 00:08:00,425
x is positive integer, we've seen integer

195
00:08:00,425 --> 00:08:02,976
but you can also say it's
gotta be a positive integer,

196
00:08:02,976 --> 00:08:04,607
decimal we've seen that,

197
00:08:04,607 --> 00:08:07,121
and then use equals required
is just another statement

198
00:08:07,121 --> 00:08:07,975
that you can make.

199
00:08:07,975 --> 00:08:10,015
I'm not trying to get you to the point

200
00:08:10,015 --> 00:08:11,438
where you can do XML Schema,

201
00:08:11,438 --> 00:08:12,930
just get you a sense of the kinds

202
00:08:12,930 --> 00:08:15,013
of statements that we can

203
00:08:15,887 --> 00:08:17,727
speak about when we're talking about

204
00:08:17,727 --> 00:08:20,560
what is and is not legitimate XML.

205
00:08:21,646 --> 00:08:22,795
So let's talk a little bit about

206
00:08:22,795 --> 00:08:25,791
how we might talk XML inside Python.

207
00:08:25,791 --> 00:08:28,229
And so, like most things

208
00:08:28,229 --> 00:08:30,818
that are in this extended part of Python,

209
00:08:30,818 --> 00:08:32,527
we have to import something.

210
00:08:32,527 --> 00:08:36,112
And so this is the name of a
library xml etree ElemenTree

211
00:08:36,112 --> 00:08:38,773
and then as ET this ends
up being a shortcut,

212
00:08:38,773 --> 00:08:41,362
so we don't have to type these long things

213
00:08:41,362 --> 00:08:43,577
and so ET is the same as typing that,

214
00:08:43,577 --> 00:08:45,345
it's almost like a mac row.

215
00:08:45,345 --> 00:08:47,620
Now, normally this XML is gonna come

216
00:08:47,620 --> 00:08:48,912
somewhere from the network,

217
00:08:48,912 --> 00:08:51,094
but I'm just gonna put this in a string,

218
00:08:51,094 --> 00:08:53,462
I'm using a triple quoted string,

219
00:08:53,462 --> 00:08:55,016
and so that means that
this triple quoted string

220
00:08:55,016 --> 00:08:56,702
starts here and ends here,

221
00:08:56,702 --> 00:08:58,685
and all these new lines that are here

222
00:08:58,685 --> 00:09:00,409
are actually part of the string.

223
00:09:00,409 --> 00:09:01,956
So this is kinda like I opened a file

224
00:09:01,956 --> 00:09:03,519
and read the whole thing in.

225
00:09:03,519 --> 00:09:06,089
But just to keep this
totally self-contained

226
00:09:06,089 --> 00:09:07,420
I'm putting it in a string.

227
00:09:07,420 --> 00:09:10,570
So the XML would come from some server

228
00:09:10,570 --> 00:09:12,976
on the other side of the
network, we would get this XML.

229
00:09:12,976 --> 00:09:16,137
So that's how it would
normally work, okay?

230
00:09:16,137 --> 00:09:16,970
So,

231
00:09:18,433 --> 00:09:20,392
this is the XML.

232
00:09:20,392 --> 00:09:21,745
Right there.

233
00:09:21,745 --> 00:09:24,245
And, we parse a string of data

234
00:09:25,633 --> 00:09:27,576
and we call ET from string,

235
00:09:27,576 --> 00:09:30,325
so we're passing in the
less thans, the new lines,

236
00:09:30,325 --> 00:09:33,334
the greater thans, all of this
stuff we're passing it in.

237
00:09:33,334 --> 00:09:35,540
And this could have syntax errors in it,

238
00:09:35,540 --> 00:09:39,469
so this might blow up if
this had a syntax error

239
00:09:39,469 --> 00:09:41,279
like we forgot the little
slash or something,

240
00:09:41,279 --> 00:09:42,617
there was a syntax error.

241
00:09:42,617 --> 00:09:44,377
But this doesn't have a syntax error

242
00:09:44,377 --> 00:09:46,744
so then what we do is

243
00:09:46,744 --> 00:09:48,442
we get back an object.

244
00:09:48,442 --> 00:09:49,803
I just happen to call it tree,

245
00:09:49,803 --> 00:09:51,722
because it kinda is like that tree

246
00:09:51,722 --> 00:09:53,305
version of the XML.

247
00:09:54,272 --> 00:09:56,709
That is an object that we can then query

248
00:09:56,709 --> 00:09:58,253
to pull data out of it,

249
00:09:58,253 --> 00:09:59,836
so we say tree.find

250
00:10:01,344 --> 00:10:03,475
and look for a tag named name,

251
00:10:03,475 --> 00:10:06,706
so that finds the tag named name is this.

252
00:10:06,706 --> 00:10:10,292
It's everything, it's
the tag and the text.

253
00:10:10,292 --> 00:10:12,588
If we want the text we add .text.

254
00:10:12,588 --> 00:10:15,514
And then that .text, that .text,

255
00:10:15,514 --> 00:10:19,801
that actually refines it
to only the word Chuck.

256
00:10:19,801 --> 00:10:21,324
And, similarly,

257
00:10:21,324 --> 00:10:23,407
if we do tree.find email,

258
00:10:24,445 --> 00:10:26,424
that tree.find email,

259
00:10:26,424 --> 00:10:28,975
that finds the email
tag which is this tag,

260
00:10:28,975 --> 00:10:30,885
it has a child attribute

261
00:10:30,885 --> 00:10:32,632
and you can get in any of the attributes

262
00:10:32,632 --> 00:10:34,034
you say .get,

263
00:10:34,034 --> 00:10:36,072
there's only one text child,

264
00:10:36,072 --> 00:10:38,879
but there are many attribute children

265
00:10:38,879 --> 00:10:41,314
so you have to tell it which one you want

266
00:10:41,314 --> 00:10:42,731
and so this here,

267
00:10:43,613 --> 00:10:45,543
this bit right here, all of that,

268
00:10:45,543 --> 00:10:48,620
will resolve down to that string yes.

269
00:10:48,620 --> 00:10:51,261
That's what you're
going to get there, yes.

270
00:10:51,261 --> 00:10:53,345
And so you kinda build up

271
00:10:53,345 --> 00:10:56,848
these little finds and call methods,

272
00:10:56,848 --> 00:11:00,070
this is not a, clearly, a full
introduction to ElementTree,

273
00:11:00,070 --> 00:11:01,005
but you get the idea,

274
00:11:01,005 --> 00:11:04,427
you sort of dive down
in with these methods,

275
00:11:04,427 --> 00:11:06,458
the call methods, the call methods,

276
00:11:06,458 --> 00:11:10,533
to get little pieces out
and parse all of that.

277
00:11:10,533 --> 00:11:12,992
Here is a different example,

278
00:11:12,992 --> 00:11:16,304
in this one again we're
using triple quoted string,

279
00:11:16,304 --> 00:11:19,967
we always have a single
tag on the outside,

280
00:11:19,967 --> 00:11:22,446
and then I have a complex type of users,

281
00:11:22,446 --> 00:11:24,702
and in it there are two user objects,

282
00:11:24,702 --> 00:11:26,928
so this is kind of like a list,

283
00:11:26,928 --> 00:11:29,458
right, so this is more
than one of these things.

284
00:11:29,458 --> 00:11:33,477
So this user can occur more than one time.

285
00:11:33,477 --> 00:11:37,074
And again, we take this and
we pass that into from string,

286
00:11:37,074 --> 00:11:41,198
and get back an object that
represents the name stuff,

287
00:11:41,198 --> 00:11:45,383
does not necessarily need to
be the same as this outer tag,

288
00:11:45,383 --> 00:11:46,216
just a variable,

289
00:11:46,216 --> 00:11:50,462
this could just as
easily be x if I wanted.

290
00:11:50,462 --> 00:11:52,889
So now what I wanna say is Hey Stuff,

291
00:11:52,889 --> 00:11:56,872
I wanna find the tag, the
path, users slash user,

292
00:11:56,872 --> 00:12:00,398
I wanna find all tags
that match users/user.

293
00:12:00,398 --> 00:12:02,775
So that's gonna give
me a list of two tags.

294
00:12:02,775 --> 00:12:03,608
One tag,

295
00:12:04,695 --> 00:12:05,964
two tags,

296
00:12:05,964 --> 00:12:06,797
in a list.

297
00:12:08,381 --> 00:12:09,214
Tag,

298
00:12:10,169 --> 00:12:11,002
tag.

299
00:12:12,419 --> 00:12:13,342
Oops.

300
00:12:13,342 --> 00:12:14,924
So two tags.

301
00:12:14,924 --> 00:12:16,948
Now I can print out how many I get,

302
00:12:16,948 --> 00:12:19,489
that'll be two in this
case cuz I got two tags,

303
00:12:19,489 --> 00:12:23,823
and then I can actually
iterate through the list,

304
00:12:23,823 --> 00:12:26,162
so I can iterate through the list,

305
00:12:26,162 --> 00:12:29,912
so this item is gonna
iterate first to this tag,

306
00:12:29,912 --> 00:12:33,720
and that tag now, it's like
in the previous example,

307
00:12:33,720 --> 00:12:36,820
we can look for the name tag within there,

308
00:12:36,820 --> 00:12:38,100
and pull the text out,

309
00:12:38,100 --> 00:12:39,551
so we pull that text out,

310
00:12:39,551 --> 00:12:41,969
find the name tag, find the name tag,

311
00:12:41,969 --> 00:12:43,879
and then within that, find the text.

312
00:12:43,879 --> 00:12:48,308
And we can find the id tag
and pull the text of that out.

313
00:12:48,308 --> 00:12:50,724
So that pulls out this zero zero one,

314
00:12:50,724 --> 00:12:51,557
and,

315
00:12:53,547 --> 00:12:55,547
I've scribbled too much.

316
00:12:57,591 --> 00:12:59,433
And then we can item,

317
00:12:59,433 --> 00:13:00,754
which is, this is item,

318
00:13:00,754 --> 00:13:02,921
is that whole tag, .get x.

319
00:13:04,107 --> 00:13:06,281
So that gets the attribute,
that gets the two,

320
00:13:06,281 --> 00:13:08,889
that two comes down here, kay.

321
00:13:08,889 --> 00:13:09,722
And then,

322
00:13:12,851 --> 00:13:14,631
item goes to the next one,

323
00:13:14,631 --> 00:13:16,887
cuz item is looping
through so item iterates

324
00:13:16,887 --> 00:13:18,521
down to that one

325
00:13:18,521 --> 00:13:20,771
and pulls out the name.text

326
00:13:21,650 --> 00:13:22,650
the id.text,

327
00:13:23,809 --> 00:13:25,629
and the attribute.x

328
00:13:25,629 --> 00:13:27,517
and pulls all those pieces out.

329
00:13:27,517 --> 00:13:29,196
So this is the basic pattern.

330
00:13:29,196 --> 00:13:30,313
You saw one where you just,

331
00:13:30,313 --> 00:13:33,503
you're tearing into a single thing,

332
00:13:33,503 --> 00:13:35,603
and here you're tearing into something

333
00:13:35,603 --> 00:13:38,765
that is expected to
occur more than one time.

334
00:13:38,765 --> 00:13:40,593
And so that's a quick summary

335
00:13:40,593 --> 00:13:43,343
of how you talk to XML in Python.

336
00:13:45,006 --> 00:13:45,992
Up next we're gonna talk about

337
00:13:45,992 --> 00:13:47,853
the other serialization format,

338
00:13:47,853 --> 00:13:50,103
JavaScript Object Notation.

