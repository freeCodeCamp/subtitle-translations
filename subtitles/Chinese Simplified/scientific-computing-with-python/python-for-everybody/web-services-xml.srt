1
00:00:00,326 --> 00:00:03,482
- So one of the two ways
that we mark up data is XML,

2
00:00:03,482 --> 00:00:04,440
the other is JSON.

3
00:00:04,440 --> 00:00:05,612
First we'll talk about XML.

4
00:00:05,612 --> 00:00:08,250
We'll talk about XML more
and for a longer time

5
00:00:08,250 --> 00:00:10,057
than we talk about JSON.

6
00:00:10,057 --> 00:00:14,342
XML stands for extensible markup language.

7
00:00:14,342 --> 00:00:16,910
There was a number of
markup languages in the 90s

8
00:00:16,910 --> 00:00:20,573
that were out there, ways to
send data between computers

9
00:00:20,573 --> 00:00:24,287
and none of them was amazingly
better than the other,

10
00:00:24,287 --> 00:00:27,704
but in the early 1990s, as HTML came out,

11
00:00:28,641 --> 00:00:32,100
the idea that we could use
less thans and greater thans,

12
00:00:32,100 --> 00:00:35,433
or angle brackets some people call them,

13
00:00:36,769 --> 00:00:38,591
once HTML made angle brackets popular

14
00:00:38,591 --> 00:00:40,772
as representation format

15
00:00:40,772 --> 00:00:42,567
it was pretty natural that we would find

16
00:00:42,567 --> 00:00:44,121
a data representation format

17
00:00:44,121 --> 00:00:47,533
that would take a similar approach.

18
00:00:47,533 --> 00:00:50,051
So inside XML we're gonna talk about tags,

19
00:00:50,051 --> 00:00:51,138
we're gonna talk about attributes,

20
00:00:51,138 --> 00:00:52,147
we're gonna talk about data,

21
00:00:52,147 --> 00:00:54,303
and we've already talked
about serialization

22
00:00:54,303 --> 00:00:55,772
and deserialization.

23
00:00:55,772 --> 00:00:57,442
Serialization is the act of taking data

24
00:00:57,442 --> 00:01:00,160
inside of a computer in
one programming language,

25
00:01:00,160 --> 00:01:02,501
setting it up for transport,
transporting it across,

26
00:01:02,501 --> 00:01:04,724
and then taking it back apart

27
00:01:04,724 --> 00:01:06,310
and turning it back into the data,

28
00:01:06,310 --> 00:01:09,406
whatever internal data it needs to be

29
00:01:09,406 --> 00:01:11,654
in the destination system.

30
00:01:11,654 --> 00:01:13,322
So here is some basic XML.

31
00:01:13,322 --> 00:01:15,888
We can take a look at various
things that make up the XML.

32
00:01:15,888 --> 00:01:19,465
So it's very much like
HTML in that we have tags,

33
00:01:19,465 --> 00:01:20,327
less than greater than.

34
00:01:20,327 --> 00:01:22,698
The difference is we get to
name the tags anything we want

35
00:01:22,698 --> 00:01:26,644
rather than the a tag or
the p tag or the h1 tag.

36
00:01:26,644 --> 00:01:28,341
And there's a beginning
tag and an ending tag

37
00:01:28,341 --> 00:01:29,408
and they're bracketed together

38
00:01:29,408 --> 00:01:31,700
and there's syntax errors in the XML.

39
00:01:31,700 --> 00:01:33,764
Syntax errors in XML are more severe

40
00:01:33,764 --> 00:01:36,373
than syntax errors in HTML.

41
00:01:36,373 --> 00:01:37,582
It's supposed to be right

42
00:01:37,582 --> 00:01:40,362
and if you send bad XML it's likely

43
00:01:40,362 --> 00:01:43,495
that the far end will not understand it.

44
00:01:43,495 --> 00:01:45,643
So we have a beginning
tag and an ending tag

45
00:01:45,643 --> 00:01:47,089
and so like name and slash name

46
00:01:47,089 --> 00:01:48,767
or a beginning and ending pair.

47
00:01:48,767 --> 00:01:51,143
Then there is the actual textual content

48
00:01:51,143 --> 00:01:53,547
and that is the material between it.

49
00:01:53,547 --> 00:01:55,081
And then here is a phone and slash phone

50
00:01:55,081 --> 00:01:56,993
and we have this thing
called the attribute.

51
00:01:56,993 --> 00:01:58,910
Key equals value.

52
00:01:58,910 --> 00:02:00,230
The key doesn't have double quotes,

53
00:02:00,230 --> 00:02:01,757
the value always has double quotes.

54
00:02:01,757 --> 00:02:05,590
And this is like href
equals on an anchor tag.

55
00:02:06,583 --> 00:02:09,034
And sometimes you have what
is called a self closing tag

56
00:02:09,034 --> 00:02:11,030
where you don't actually
have a closing tag,

57
00:02:11,030 --> 00:02:14,136
you have all the data that
you need in the attributes

58
00:02:14,136 --> 00:02:15,377
and so you don't even bother

59
00:02:15,377 --> 00:02:18,271
putting an empty text
area in in a closing tag.

60
00:02:18,271 --> 00:02:21,696
So that is a start tag,
end tag, attribute,

61
00:02:21,696 --> 00:02:23,145
and then a self closing tag.

62
00:02:23,145 --> 00:02:25,562
Those are some basics of XML.

63
00:02:26,500 --> 00:02:30,759
In general, XML doesn't care
too much about white space.

64
00:02:30,759 --> 00:02:33,013
It does in the text areas,

65
00:02:33,013 --> 00:02:35,277
so in here it matters and here it matters.

66
00:02:35,277 --> 00:02:36,210
But things like,

67
00:02:36,210 --> 00:02:37,948
we can indent this a
little bit differently.

68
00:02:37,948 --> 00:02:41,353
And we tend to indent it in a
way to make it look reasonable

69
00:02:41,353 --> 00:02:43,403
although once you have programs
sending it back and forth,

70
00:02:43,403 --> 00:02:46,082
they tend to send it more compacted

71
00:02:46,082 --> 00:02:48,499
just for efficiency purposes.

72
00:02:49,518 --> 00:02:53,118
So one of the concepts is that there is

73
00:02:53,118 --> 00:02:56,451
a hierarchical structure
within an XML document

74
00:02:56,451 --> 00:02:58,796
and there are parent nodes and child nodes

75
00:02:58,796 --> 00:03:01,250
and you can think of
these as simple nodes,

76
00:03:01,250 --> 00:03:03,957
that is a tag and some data

77
00:03:03,957 --> 00:03:07,061
or a complex element that has a tag

78
00:03:07,061 --> 00:03:09,979
that includes other tags, some child tags.

79
00:03:09,979 --> 00:03:11,063
And there's a couple of different ways

80
00:03:11,063 --> 00:03:13,910
we can take a look at this.

81
00:03:13,910 --> 00:03:16,338
The simple, more natural
way to think about this

82
00:03:16,338 --> 00:03:19,184
is a tree with parent child relationships.

83
00:03:19,184 --> 00:03:21,573
So here we have this a tag on the outside

84
00:03:21,573 --> 00:03:23,277
and that's the top level one.

85
00:03:23,277 --> 00:03:25,393
You can only have one outer tag

86
00:03:25,393 --> 00:03:28,627
and you can't have another tag down here.

87
00:03:28,627 --> 00:03:31,004
So you have to have one tag
that's sort of the root tag

88
00:03:31,004 --> 00:03:33,611
for everything in this XML document.

89
00:03:33,611 --> 00:03:34,689
And it has two children.

90
00:03:34,689 --> 00:03:37,799
So the c tag and the b
tag are two children.

91
00:03:37,799 --> 00:03:40,577
So the b tag is a child of a.

92
00:03:40,577 --> 00:03:44,584
And then c has a d and an e
tag that are children there.

93
00:03:44,584 --> 00:03:47,793
And then the textual data we model

94
00:03:47,793 --> 00:03:50,543
as a child of each of those tags,

95
00:03:51,481 --> 00:03:54,357
and you'll see in a bit
why it's best to do that.

96
00:03:54,357 --> 00:03:58,430
So that is the way to think
about this, as a tree.

97
00:03:58,430 --> 00:04:01,332
To represent that XML as a tree.

98
00:04:01,332 --> 00:04:03,026
If we add attributes to it,

99
00:04:03,026 --> 00:04:04,817
and this is where you
kind of see why it's nice

100
00:04:04,817 --> 00:04:08,295
to take the text area and
make that a child of the node,

101
00:04:08,295 --> 00:04:09,961
an attribute is different.

102
00:04:09,961 --> 00:04:12,560
So the text is a special kind of child.

103
00:04:12,560 --> 00:04:14,545
And you can literally have
more than one attribute.

104
00:04:14,545 --> 00:04:19,248
You could have x equals two,
you know zap equals whatever.

105
00:04:19,248 --> 00:04:21,982
And these could have a
couple different attributes.

106
00:04:21,982 --> 00:04:24,760
The w attribute is a value of five.

107
00:04:24,760 --> 00:04:26,399
And that's the five down there.

108
00:04:26,399 --> 00:04:27,632
And so you could have multiple ones.

109
00:04:27,632 --> 00:04:29,742
You can only have one text node.

110
00:04:29,742 --> 00:04:32,513
Now, in the case of a you have
a whole bunch of text nodes,

111
00:04:32,513 --> 00:04:35,244
but these are because
these are child nodes.

112
00:04:35,244 --> 00:04:39,337
Within one simple node you can
only have one text element.

113
00:04:39,337 --> 00:04:41,679
You can also think of XML as paths,

114
00:04:41,679 --> 00:04:43,942
and the easiest way is
to sort of look down

115
00:04:43,942 --> 00:04:47,558
this tree version and look at
from the path from the parent.

116
00:04:47,558 --> 00:04:48,437
So you go to a

117
00:04:48,437 --> 00:04:50,520
and then the parent of
the child b and then x.

118
00:04:50,520 --> 00:04:53,665
So at position ab you find x.

119
00:04:53,665 --> 00:04:56,617
So ab is the path up to the root.

120
00:04:56,617 --> 00:05:00,117
So acd, that's this one, is the path to y.

121
00:05:01,275 --> 00:05:03,358
And ace is the path to z.

122
00:05:04,353 --> 00:05:06,404
And so you can think of these as paths.

123
00:05:06,404 --> 00:05:07,237
Part of what we're doing

124
00:05:07,237 --> 00:05:09,889
is we're coming up with
ways to walk through

125
00:05:09,889 --> 00:05:12,222
and parse trees of XML data.

126
00:05:13,539 --> 00:05:14,812
So the next thing we'll talk about

127
00:05:14,812 --> 00:05:19,753
is how we determine if a
particular XML document is legal

128
00:05:19,753 --> 00:05:23,920
or meets the contracts that
two applications have set up.

129
00:05:26,088 --> 00:05:28,588
(piano music)

