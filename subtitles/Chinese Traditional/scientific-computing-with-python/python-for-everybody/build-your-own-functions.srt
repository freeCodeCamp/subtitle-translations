1
00:00:00,706 --> 00:00:01,965
歡迎回來，我們繼續

2
00:00:01,965 --> 00:00:06,049
講如何構建自己的函數

3
00:00:06,049 --> 00:00:07,611
我們再次

4
00:00:07,611 --> 00:00:10,397
使用 def 關鍵字來定義函數

5
00:00:10,397 --> 00:00:13,221
我們將在後面調用這個函數

6
00:00:13,221 --> 00:00:14,460
還有一點

7
00:00:14,460 --> 00:00:16,338
是我們要定義函數的名稱

8
00:00:16,338 --> 00:00:17,874
實際上我們在擴展 Python

9
00:00:17,874 --> 00:00:19,987
並創建新的預定義內容

10
00:00:19,987 --> 00:00:22,242
以供自己在後面的代碼裏使用

11
00:00:22,242 --> 00:00:23,895
從 def 關鍵字開始

12
00:00:23,895 --> 00:00:26,407
我們會看到一些可選的參數

13
00:00:26,407 --> 00:00:27,748
括弧括起來的部分

14
00:00:27,748 --> 00:00:28,581
然後是名稱

15
00:00:28,581 --> 00:00:30,613
函數名稱遵循相同的規則

16
00:00:30,613 --> 00:00:32,461
如同變量名稱

17
00:00:32,461 --> 00:00:34,421
然後添加一個縮進

18
00:00:34,421 --> 00:00:35,557
和你想實現的任何代碼

19
00:00:35,557 --> 00:00:37,083
然後是取消縮進的代碼塊

20
00:00:37,083 --> 00:00:39,837
這些定義了函數的重要部分

21
00:00:39,837 --> 00:00:43,169
這裏有個關鍵點，這並不是

22
00:00:43,169 --> 00:00:44,002
調用

23
00:00:45,473 --> 00:00:47,577
不是調用和執行

24
00:00:47,577 --> 00:00:51,344
這只是保存，弄清定義

25
00:00:51,344 --> 00:00:53,397
這是程序的輸出

26
00:00:53,397 --> 00:00:55,949
這定義了函數，但沒有使用它

27
00:00:55,949 --> 00:00:58,396
所以這是種不完整的函數

28
00:00:58,396 --> 00:01:00,641
所以我們現在就開始打印出 x 等於 5

29
00:01:00,641 --> 00:01:01,474
你不需要重新定義

30
00:01:01,474 --> 00:01:03,283
在開始已經定義好了所有的函數

31
00:01:03,283 --> 00:01:04,703
這個函數運行後

32
00:01:04,703 --> 00:01:07,091
輸出 hello

33
00:01:07,091 --> 00:01:09,399
然後我們在這裏定義一個函數

34
00:01:09,399 --> 00:01:11,776
哦，你想在這裏做新的事情

35
00:01:11,776 --> 00:01:12,679
那就添加一個新的

36
00:01:12,679 --> 00:01:14,464
這從某種意義上來說是個變量

37
00:01:14,464 --> 00:01:17,099
把這段複製到這裏

38
00:01:17,099 --> 00:01:19,465
想着以後要使用

39
00:01:19,465 --> 00:01:22,658
自己就需要記住，這裏還沒有執行任何事

40
00:01:22,658 --> 00:01:24,525
沒有輸出

41
00:01:24,525 --> 00:01:28,042
這裏說打印 Yo，輸出一個 Yo

42
00:01:28,042 --> 00:01:30,642
這裏給 x 加上 2，那現在 x 等於7

43
00:01:30,642 --> 00:01:31,595
然後輸出一個 x

44
00:01:31,595 --> 00:01:33,060
沒有七，有七

45
00:01:33,060 --> 00:01:36,035
這些打印語句一直沒有運行

46
00:01:36,035 --> 00:01:37,272
沒有運行

47
00:01:37,272 --> 00:01:38,105
爲什麼

48
00:01:38,105 --> 00:01:39,956
因爲我們沒有在調用這個函數

49
00:01:39,956 --> 00:01:43,117
我們只是定義了，但還沒有調用

50
00:01:43,117 --> 00:01:46,589
所以讓我們來看看如何調用函數

51
00:01:46,589 --> 00:01:48,327
你定義它，然後使用它

52
00:01:48,327 --> 00:01:50,135
有時候你定義了一次並使用一次

53
00:01:50,135 --> 00:01:52,463
但更常用是定義一次後

54
00:01:52,463 --> 00:01:54,036
多次使用

55
00:01:54,036 --> 00:01:55,601
也就是儲存和複用的模式

56
00:01:55,601 --> 00:02:00,326
定義是儲存，調用是複用

57
00:02:00,326 --> 00:02:01,931
這裏只是一個略微不同的版本

58
00:02:01,931 --> 00:02:03,423
相對上一個程序

59
00:02:03,423 --> 00:02:07,232
這裏會真正的調用它

60
00:02:07,232 --> 00:02:08,989
當 x 等於 five，打印 hello

61
00:02:08,989 --> 00:02:12,464
定義，打印 hello

62
00:02:12,464 --> 00:02:15,126
這個定義的函數沒有輸出

63
00:02:15,126 --> 00:02:17,359
由於這裏沒有縮進

64
00:02:17,359 --> 00:02:20,522
那這就是整個代碼塊

65
00:02:20,522 --> 00:02:22,400
打印的部分

66
00:02:22,400 --> 00:02:24,544
打印出 Yo

67
00:02:24,544 --> 00:02:25,871
現在我們調用

68
00:02:25,871 --> 00:02:27,328
這是調用

69
00:02:27,328 --> 00:02:28,749
我們就調用這個函數

70
00:02:28,749 --> 00:02:31,127
現在這個函數可以進行

71
00:02:31,127 --> 00:02:32,544
讓我們清除這些

72
00:02:33,644 --> 00:02:35,554
所以我們到這裏了

73
00:02:35,554 --> 00:02:38,796
現在彷彿程序在這裏暫停

74
00:02:38,796 --> 00:02:41,742
等定義調用完再重新回到這裏開始運行

75
00:02:41,742 --> 00:02:45,582
繼續運行代碼，然後再回到這部分

76
00:02:45,582 --> 00:02:46,801
然後繼續進行

77
00:02:46,801 --> 00:02:48,946
就像錨點一樣

78
00:02:48,946 --> 00:02:50,742
可以返回到應該返回的地方

79
00:02:50,742 --> 00:02:52,749
然後再接着運行和打印

80
00:02:52,749 --> 00:02:54,700
產生

81
00:02:54,700 --> 00:02:57,962
兩行的輸出

82
00:02:57,962 --> 00:02:59,648
應該在

83
00:02:59,648 --> 00:03:01,526
應該是這裏的

84
00:03:01,526 --> 00:03:03,163
然後 x = x 加上 2， 得到 7

85
00:03:03,163 --> 00:03:05,285
輸出 7

86
00:03:05,285 --> 00:03:07,618
然後這裏調用

87
00:03:08,861 --> 00:03:11,337
自動調用或者手動調用這個函數

88
00:03:11,337 --> 00:03:16,040
定義，然後調用，對吧

89
00:03:16,040 --> 00:03:20,532
現在，除開聲明、返回和調用

90
00:03:20,532 --> 00:03:22,501
我們可以傳遞參數

91
00:03:22,501 --> 00:03:24,758
一個參數的例子是

92
00:03:24,758 --> 00:03:26,436
在 max 函數中，我們說

93
00:03:26,436 --> 00:03:28,395
這是我希望這個函數能找到最大值

94
00:03:28,395 --> 00:03:30,273
最大的那一個

95
00:03:30,273 --> 00:03:31,737
其中

96
00:03:31,737 --> 00:03:34,116
在整個存儲和複用的模式裏

97
00:03:34,116 --> 00:03:35,221
我們有幾行代碼

98
00:03:35,221 --> 00:03:38,736
有時我們會想要做一些略微不同的操作

99
00:03:38,736 --> 00:03:40,008
在不同的調用裏

100
00:03:40,008 --> 00:03:43,827
所以我們使用這些參數來進行調整

101
00:03:43,827 --> 00:03:47,960
比如通常會查找最大值

102
00:03:47,960 --> 00:03:50,033
但什麼東西定義了最大值

103
00:03:50,033 --> 00:03:53,365
構成一個函數，這更有用

104
00:03:53,365 --> 00:03:56,047
並在更多的情況下可重複使用

105
00:03:56,047 --> 00:03:58,668
參數是我們傳遞進去的

106
00:03:58,668 --> 00:04:00,142
我們定義了函數

107
00:04:00,142 --> 00:04:01,788
我們要去構建的函數

108
00:04:01,788 --> 00:04:03,871
在定義的描述裏

109
00:04:04,732 --> 00:04:07,335
定義函數的名稱爲 green

110
00:04:07,335 --> 00:04:08,940
然後這裏是參數

111
00:04:08,940 --> 00:04:11,642
就是我們要傳遞進入的

112
00:04:11,642 --> 00:04:13,705
這個變量 lang

113
00:04:13,705 --> 00:04:17,078
只存在於該函數體內

114
00:04:17,078 --> 00:04:19,078
而且它代表一種佔位符

115
00:04:19,078 --> 00:04:21,934
同樣，這並不是一個真正的變量

116
00:04:21,934 --> 00:04:23,606
它是一個引用的佔位符

117
00:04:23,606 --> 00:04:26,688
來代表傳入的第一個變量

118
00:04:26,688 --> 00:04:28,923
就會被設置在這裏

119
00:04:28,923 --> 00:04:29,923
那麼 lang 變量

120
00:04:30,964 --> 00:04:33,788
就說我們的第一個參數，不管傳遞進來的是什麼值

121
00:04:33,788 --> 00:04:37,172
我們現在就不需要看到這個部分

122
00:04:37,172 --> 00:04:39,009
我們只用知道我們需要創建一個函數

123
00:04:39,009 --> 00:04:41,650
然後要使用一個參數

124
00:04:41,650 --> 00:04:43,938
lang 在這裏就作爲一個佔位符來表示

125
00:04:43,938 --> 00:04:46,120
傳入的是什麼參數

126
00:04:46,120 --> 00:04:46,994
好了

127
00:04:46,994 --> 00:04:49,168
所以在函數裏我們將判斷

128
00:04:49,168 --> 00:04:52,432
如果語言是西班牙語，就打印 Hola

129
00:04:52,432 --> 00:04:55,735
如果是法語，就打印 Bonjour

130
00:04:55,735 --> 00:04:56,905
其他打印 Hello

131
00:04:56,905 --> 00:04:59,831
我們在這裏有一個非常簡化的

132
00:04:59,831 --> 00:05:02,379
語言翻譯系統

133
00:05:02,379 --> 00:05:05,438
然後，這裏的 def 當然什麼也不做

134
00:05:05,438 --> 00:05:09,605
只是記住它然後定義 greet

135
00:05:12,465 --> 00:05:13,665
接下來

136
00:05:13,665 --> 00:05:14,866
我們現在來調用

137
00:05:14,866 --> 00:05:16,053
這裏的意思是來找到某一個

138
00:05:16,053 --> 00:05:17,446
被叫作 greet 的定義

139
00:05:17,446 --> 00:05:19,127
如果這裏不填內容

140
00:05:19,127 --> 00:05:22,489
它會返回一個回溯，因爲你將它擴展並命名爲 greet

141
00:05:22,489 --> 00:05:24,468
所以它現在開始運行

142
00:05:24,468 --> 00:05:26,166
在這裏停住

143
00:05:26,166 --> 00:05:27,385
返回這裏

144
00:05:27,385 --> 00:05:28,819
然後

145
00:05:28,819 --> 00:05:31,069
lang 代表的是 en

146
00:05:32,697 --> 00:05:36,310
現在我們可以運行下面的 if 程序

147
00:05:36,310 --> 00:05:39,893
elif，這裏太亂了

148
00:05:43,332 --> 00:05:45,315
現在 en 被通過 lang 傳遞進來

149
00:05:45,315 --> 00:05:47,590
進入這裏的代碼

150
00:05:47,590 --> 00:05:51,979
如果不是 es、fr，那麼就會打印 hello

151
00:05:51,979 --> 00:05:54,974
然後又回到下一行

152
00:05:54,974 --> 00:05:56,550
然後我們再一次調用它

153
00:05:56,550 --> 00:06:00,318
並且這次 es 是 lang，所以它運行這個代碼

154
00:06:00,318 --> 00:06:02,370
並打印 Hola

155
00:06:02,370 --> 00:06:04,735
接着它就像這樣調用

156
00:06:04,735 --> 00:06:05,818
並打印

157
00:06:07,658 --> 00:06:08,520
Bonjour

158
00:06:08,520 --> 00:06:09,353
你理解到這個想法

159
00:06:09,353 --> 00:06:14,179
所以這是一個佔位符，用於函數接下來的

160
00:06:14,179 --> 00:06:18,121
調用

161
00:06:18,121 --> 00:06:20,985
我們可以獲取程序員輸入的任意值

162
00:06:20,985 --> 00:06:22,448
作爲第一個參數

163
00:06:22,448 --> 00:06:25,121
我們在這個定義中明確了

164
00:06:25,121 --> 00:06:27,385
我們準備好了接受第一個參數

165
00:06:27,385 --> 00:06:29,876
請用參數調用我們

166
00:06:29,876 --> 00:06:31,034
然後我們就可以

167
00:06:31,034 --> 00:06:33,481
針對不同的值做稍微不同的操作

168
00:06:33,481 --> 00:06:35,756
所以這是一個可重複使用的函數

169
00:06:35,756 --> 00:06:38,287
能夠打印三種不同語言的“你好”

170
00:06:38,287 --> 00:06:39,506
然後我們告訴它是用什麼語言

171
00:06:39,506 --> 00:06:43,339
我們現在實際調用了函數

172
00:06:44,928 --> 00:06:47,053
所以這會將一些東西放入函數中

173
00:06:47,053 --> 00:06:48,668
然後獲取到一些東西

174
00:06:48,668 --> 00:06:51,541
這是返回的概念

175
00:06:51,541 --> 00:06:54,194
這就是 return 語句

176
00:06:54,194 --> 00:06:55,944
return 語句

177
00:06:57,404 --> 00:07:00,675
這是一個可以做兩件基本事情的可執行語句

178
00:07:00,675 --> 00:07:03,114
它做的第一件事是

179
00:07:03,114 --> 00:07:04,231
在這裏結束

180
00:07:04,231 --> 00:07:07,267
因爲是一個單行函數，描述得有點冗雜了

181
00:07:07,267 --> 00:07:11,451
但是當 Python 進入 return 語句時

182
00:07:11,451 --> 00:07:13,870
它不會繼續到下一行

183
00:07:13,870 --> 00:07:15,120
它只是返回

184
00:07:15,120 --> 00:07:16,979
這是調用的結束

185
00:07:16,979 --> 00:07:18,758
對於這個特定的函數

186
00:07:18,758 --> 00:07:21,459
但更重要的是，它將作爲其參數

187
00:07:21,459 --> 00:07:24,150
你可以在沒有參數的情況下返回

188
00:07:24,150 --> 00:07:26,264
那它將停止執行這個函數

189
00:07:26,264 --> 00:07:28,883
就像結束循環一樣

190
00:07:28,883 --> 00:07:30,101
跳出循環，繼續進行

191
00:07:30,101 --> 00:07:33,204
不要運行這個下一行，退出這個部分

192
00:07:33,204 --> 00:07:37,044
但它也同樣允許說明你想要的具體操作

193
00:07:37,044 --> 00:07:39,206
作爲表達式中的剩餘值（residual value）

194
00:07:39,206 --> 00:07:40,628
我們現在打印

195
00:07:40,628 --> 00:07:42,245
這個 greet 函數

196
00:07:42,245 --> 00:07:44,358
那麼這裏就會出現

197
00:07:44,358 --> 00:07:48,459
函數運行後 return 的值

198
00:07:48,459 --> 00:07:50,735
那麼這裏就會打印 hello

199
00:07:50,735 --> 00:07:53,476
我們再次調用，就會再次打印 hello

200
00:07:53,476 --> 00:07:54,727
好了

201
00:07:54,727 --> 00:07:55,560
那麼

202
00:07:58,027 --> 00:08:01,217
對於 return 語句來說

203
00:08:01,217 --> 00:08:03,043
我稱之爲剩餘值

204
00:08:03,043 --> 00:08:06,540
代表着函數運行結束後會出現在這裏的值

205
00:08:06,540 --> 00:08:08,707
這裏就是字符串 hello

206
00:08:09,911 --> 00:08:12,403
我們稱一個函數如果有產出結果

207
00:08:12,403 --> 00:08:14,130
那就是成功返回

208
00:08:14,130 --> 00:08:16,961
你可以只說一個單獨的 return

209
00:08:16,961 --> 00:08:18,568
甚至不需要 return 語句

210
00:08:18,568 --> 00:08:19,888
函數會自動運行到最後一行

211
00:08:19,888 --> 00:08:21,484
然後從函數的最後一行

212
00:08:21,484 --> 00:08:22,945
自動返回

213
00:08:22,945 --> 00:08:24,634
這裏我們重寫一下

214
00:08:24,634 --> 00:08:26,051
我們的小語言系統

215
00:08:27,458 --> 00:08:29,133
我們要創建一個 greeting 的程序

216
00:08:29,133 --> 00:08:31,873
然後把語言作爲第一個參數

217
00:08:31,873 --> 00:08:33,559
不僅僅做打印的操作

218
00:08:33,559 --> 00:08:35,330
之前已經做過了

219
00:08:35,330 --> 00:08:37,126
現在把它改得更像一個函數

220
00:08:37,126 --> 00:08:40,673
同時具備輸入和輸出

221
00:08:40,673 --> 00:08:42,590
並且將輸出作爲返回的內容，而不僅僅是打印

222
00:08:42,590 --> 00:08:45,834
用函數來打印有點誇張了

223
00:08:45,834 --> 00:08:49,389
然後我們返回 hola、bonjour 和 hello

224
00:08:49,389 --> 00:08:51,349
在不同情況下返回它們

225
00:08:51,349 --> 00:08:53,694
於是我們這裏打印 greet('en')

226
00:08:53,694 --> 00:08:56,216
所以它運行一次代碼，lang 是 en

227
00:08:56,216 --> 00:08:58,277
然後運行這個代碼

228
00:08:58,277 --> 00:09:00,219
這個產生的值是 hello

229
00:09:00,219 --> 00:09:02,349
所以打印出 Hello Glenn

230
00:09:02,349 --> 00:09:03,516
同樣

231
00:09:04,776 --> 00:09:08,060
運行這段代碼的時候，會將 es 傳遞作爲 lang 的值

232
00:09:08,060 --> 00:09:10,386
然後運行這個語句

233
00:09:10,386 --> 00:09:12,347
即使這兒有其他語句

234
00:09:12,347 --> 00:09:14,389
函數也不會執行，直到返回

235
00:09:14,389 --> 00:09:17,306
也就是說這裏這個部分

236
00:09:19,622 --> 00:09:21,308
會變成 Hola

237
00:09:21,308 --> 00:09:22,600
也就是 Hola Sally

238
00:09:22,600 --> 00:09:25,166
法語也是一樣，獲取參數然後執行

239
00:09:25,166 --> 00:09:28,817
返回一個 return 語句，也就是 Bonjour Michael

240
00:09:28,817 --> 00:09:31,040
那麼現在應該能明白如何去控制

241
00:09:31,040 --> 00:09:33,194
我們在寫這段程序的時候

242
00:09:33,194 --> 00:09:35,704
就可以通過寫函數來控制程序

243
00:09:35,704 --> 00:09:38,820
來得到我們想要的輸出

244
00:09:38,820 --> 00:09:40,975
以及調用的形式

245
00:09:40,975 --> 00:09:42,032
有時候有返回

246
00:09:42,032 --> 00:09:44,786
有時候沒有

247
00:09:44,786 --> 00:09:45,619
所以

248
00:09:48,728 --> 00:09:51,439
我們回到之前討論過的這個 max 函數

249
00:09:51,439 --> 00:09:53,897
可以看到這裏面的這段代碼

250
00:09:53,897 --> 00:09:54,925
有一個返回值

251
00:09:54,925 --> 00:09:57,789
這也是函數如何將 w 返回給主程序

252
00:09:57,789 --> 00:09:59,931
我們傳入一個 Hello World 的參數

253
00:09:59,931 --> 00:10:01,638
被函數作爲參數接收

254
00:10:01,638 --> 00:10:04,920
然後如果滿足條件則進入 for 循環

255
00:10:04,920 --> 00:10:06,892
然後一直循環

256
00:10:06,892 --> 00:10:08,912
直到某個點得到結果

257
00:10:08,912 --> 00:10:11,687
函數告訴我們要返回一個值

258
00:10:11,687 --> 00:10:14,545
也就是 return 語句，這裏就返回了 w

259
00:10:14,545 --> 00:10:16,795
然後被賦值給 big

260
00:10:19,108 --> 00:10:21,078
你可以傳遞多個參數

261
00:10:21,078 --> 00:10:22,519
只要按順序傳遞

262
00:10:22,519 --> 00:10:24,044
第一個，第二個

263
00:10:24,044 --> 00:10:24,877
分別是 3 和 5

264
00:10:24,877 --> 00:10:27,539
所以 3 被傳遞給 a，5 被傳遞給 b

265
00:10:27,539 --> 00:10:28,811
然後

266
00:10:28,811 --> 00:10:30,811
我們這個函數只是用於將兩個數相加

267
00:10:30,811 --> 00:10:33,478
所以 3 + 5 = 8

268
00:10:35,664 --> 00:10:37,332
你可以將任意兩個數相加

269
00:10:37,332 --> 00:10:38,388
記住參數傳遞的順序是重要的

270
00:10:38,388 --> 00:10:40,035
然後如果你定義了一個

271
00:10:40,035 --> 00:10:41,660
需要參數的函數

272
00:10:41,660 --> 00:10:42,778
但是調用的時候並不傳遞參數

273
00:10:42,778 --> 00:10:44,597
那函數就會回溯

274
00:10:44,597 --> 00:10:45,816
然後出錯

275
00:10:45,816 --> 00:10:47,584
當然也有可選的參數

276
00:10:47,584 --> 00:10:49,076
我們之後再講

277
00:10:49,076 --> 00:10:51,177
你不必有返回的值

278
00:10:51,177 --> 00:10:53,009
也就是說可以簡單的

279
00:10:53,009 --> 00:10:55,093
不去專門調用帶值的 return

280
00:10:55,093 --> 00:10:56,843
等函數運行到最後

281
00:10:57,722 --> 00:11:02,578
會默認返回值

282
00:11:02,578 --> 00:11:06,903
這就是函數的基礎知識

283
00:11:06,903 --> 00:11:08,194
操作

284
00:11:08,194 --> 00:11:10,542
但我不想讓你們太激動

285
00:11:10,542 --> 00:11:11,892
關於寫函數

286
00:11:11,892 --> 00:11:14,432
一些編程類課程喜歡讓學生

287
00:11:14,432 --> 00:11:16,362
不停地寫函數

288
00:11:16,362 --> 00:11:20,405
但可以明確的是，函數是一個非常強大的機制

289
00:11:20,405 --> 00:11:24,690
當我們寫了 15 萬 20 萬行代碼

290
00:11:24,690 --> 00:11:26,622
兩百，一千行

291
00:11:26,622 --> 00:11:28,124
一萬行代碼後

292
00:11:28,124 --> 00:11:30,901
函數的概念就非常重要

293
00:11:30,901 --> 00:11:33,022
如果沒有函數，寫碼會寫瘋

294
00:11:33,022 --> 00:11:35,885
但假如只能寫 20 行

295
00:11:35,885 --> 00:11:39,393
逼自己用函數就顯得沒有必要

296
00:11:39,393 --> 00:11:41,881
所以不用擔心這點

297
00:11:41,881 --> 00:11:45,285
也許還不着急着用這個

298
00:11:45,285 --> 00:11:47,317
我們調用不少的預定義函數

299
00:11:47,317 --> 00:11:49,815
我們將在接下來的課程中細講

300
00:11:49,815 --> 00:11:51,421
當你在某個時間感到

301
00:11:51,421 --> 00:11:53,290
再也不想重複某些代碼的時候

302
00:11:53,290 --> 00:11:55,991
就是時候開始寫函數了

303
00:11:55,991 --> 00:11:59,058
這也是爲什麼我們不用過早地強調函數

304
00:11:59,058 --> 00:12:01,954
我們只是希望你知道函數是什麼

305
00:12:01,954 --> 00:12:03,803
如何使用，然後在某個時候

306
00:12:03,803 --> 00:12:05,063
你會想到要自己定義一個

307
00:12:05,063 --> 00:12:06,851
但不要擔心，可能還會有些時間

308
00:12:06,851 --> 00:12:09,504
你才需要定義一個函數

309
00:12:09,504 --> 00:12:13,527
以上就總結了我們關於函數的課程

310
00:12:13,527 --> 00:12:17,360
然後我們接着來學習迭代

