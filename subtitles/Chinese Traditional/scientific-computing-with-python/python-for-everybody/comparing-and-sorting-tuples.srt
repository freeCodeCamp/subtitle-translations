1
00:00:00,564 --> 00:00:02,218
- So now we can take
advantage of the notion

2
00:00:02,218 --> 00:00:05,020
of comparing tuples and use sorting.

3
00:00:05,020 --> 00:00:08,048
And so what we'll wanna
produce is a list of tuples,

4
00:00:08,048 --> 00:00:10,468
and then we're going to sort them, right?

5
00:00:10,468 --> 00:00:12,876
And so, we can get a list
of tuples from a dictionary,

6
00:00:12,876 --> 00:00:14,823
and then we can sort that list of tuples,

7
00:00:14,823 --> 00:00:17,132
and then we can end up
sorting dictionary items

8
00:00:17,132 --> 00:00:18,888
by taking this two-step process,

9
00:00:18,888 --> 00:00:21,234
convert dictionary to
a list, sort the list,

10
00:00:21,234 --> 00:00:25,062
and then we can have a sorted
dictionary values, okay?

11
00:00:25,062 --> 00:00:26,972
And so we'll do this a
couple of different times.

12
00:00:26,972 --> 00:00:29,036
So if we take a look at
this code right here,

13
00:00:29,036 --> 00:00:31,378
we have our happy little dictionary, ABC,

14
00:00:31,378 --> 00:00:34,695
map, A maps to 10, B maps
to one, C maps to 20,

15
00:00:34,695 --> 00:00:35,806
what are we gonna get here?

16
00:00:35,806 --> 00:00:38,577
Well, it comes out the
mapping is the right way,

17
00:00:38,577 --> 00:00:40,346
but the order is whatever.

18
00:00:40,346 --> 00:00:42,891
And now we say, this
function called sorted,

19
00:00:42,891 --> 00:00:46,139
which takes inside a
sequence, and then returns us

20
00:00:46,139 --> 00:00:49,393
a sorted version of that,
a list that's sorted.

21
00:00:49,393 --> 00:00:52,077
And so, it says "sort D
items," so it's basically

22
00:00:52,077 --> 00:00:55,307
gonna take this list and
compare the As and the Cs

23
00:00:55,307 --> 00:00:57,421
and the Bs, and because it's a dictionary,

24
00:00:57,421 --> 00:00:59,127
and all the keys are
unique, there's never gonna

25
00:00:59,127 --> 00:01:01,095
be equality, so it really
is gonna just sort this

26
00:01:01,095 --> 00:01:04,064
by keys and never get to
looking at the values.

27
00:01:04,064 --> 00:01:07,326
You could construct a
list that had duplicate--

28
00:01:07,326 --> 00:01:09,314
you could make a list of tuples that had

29
00:01:09,314 --> 00:01:11,842
duplicates in the first,
like we did before,

30
00:01:11,842 --> 00:01:14,684
but given that this
coming from a dictionary,

31
00:01:14,684 --> 00:01:17,451
the first thing is gonna
always be unique and distinct,

32
00:01:17,451 --> 00:01:19,371
and so if we say "sorted D of items,"

33
00:01:19,371 --> 00:01:22,697
that we're passing this stuff into sorted,

34
00:01:22,697 --> 00:01:25,999
sorted's gonna go around,
move stuff around,

35
00:01:25,999 --> 00:01:28,174
and then get us back

36
00:01:28,174 --> 00:01:31,011
a sorted version, sorted
in ascending order,

37
00:01:31,011 --> 00:01:33,386
based on key without looking at the value.

38
00:01:33,386 --> 00:01:35,420
And so that's a way

39
00:01:35,420 --> 00:01:36,253
to see

40
00:01:37,402 --> 00:01:39,196
dictionaries sorted by key,

41
00:01:39,196 --> 00:01:41,429
is just, say, "sorted of Ds of items,"

42
00:01:41,429 --> 00:01:44,285
and sorted is a function,
and so it just fixed stuff.

43
00:01:44,285 --> 00:01:46,433
And so, this is the kinda
loop that you're gonna

44
00:01:46,433 --> 00:01:48,602
write to do that.

45
00:01:48,602 --> 00:01:51,077
Now, we did this before, we took sorted

46
00:01:51,077 --> 00:01:53,205
and we got the sorted by keys,

47
00:01:53,205 --> 00:01:55,636
and so you can just make
this nice and simple.

48
00:01:55,636 --> 00:01:57,717
For K value, by the way, you can eliminate

49
00:01:57,717 --> 00:01:59,848
the parentheses here,
and I think it's prettier

50
00:01:59,848 --> 00:02:00,793
if you eliminate the parentheses,

51
00:02:00,793 --> 00:02:02,343
but you could put parentheses.

52
00:02:02,343 --> 00:02:04,934
This is still a tuple
without the parentheses.

53
00:02:04,934 --> 00:02:08,462
For K, key in value in
sorted, so that says

54
00:02:08,462 --> 00:02:10,647
go through D items, but
before I go through them,

55
00:02:10,647 --> 00:02:11,902
please sort them.

56
00:02:11,902 --> 00:02:14,503
So that means K is gonna
go through A, B, and C,

57
00:02:14,503 --> 00:02:16,790
deterministically, every single time.

58
00:02:16,790 --> 00:02:19,147
It's gonna go, and of course
value is gonna go through

59
00:02:19,147 --> 00:02:21,279
the corresponding values, so now we can

60
00:02:21,279 --> 00:02:23,826
print this out nicely, sorted

61
00:02:23,826 --> 00:02:27,743
by key, and that's a real
nice, succinct little

62
00:02:29,726 --> 00:02:30,743
way to say that.

63
00:02:30,743 --> 00:02:33,293
I mean, again, these are
one of the kinda things

64
00:02:33,293 --> 00:02:35,554
that people really like about Python,

65
00:02:35,554 --> 00:02:37,678
is that you can do pretty powerful things

66
00:02:37,678 --> 00:02:39,321
with easy to under--

67
00:02:39,321 --> 00:02:40,481
I mean, you know, you might've seen this

68
00:02:40,481 --> 00:02:42,214
for the first time, but
ultimately, you look at that

69
00:02:42,214 --> 00:02:43,891
eventually, you'll be like,
oh yeah, that's, I see

70
00:02:43,891 --> 00:02:45,806
exactly what that's doing, easy.

71
00:02:45,806 --> 00:02:47,139
Not hard at all.

72
00:02:48,249 --> 00:02:50,948
So, but let's say we're
looking for the most common

73
00:02:50,948 --> 00:02:55,281
word, which we have been for
weeks and weeks and weeks now.

74
00:02:55,281 --> 00:02:58,402
And so we wanna sort by values, not key.

75
00:02:58,402 --> 00:03:00,787
So, this is an example of where we're

76
00:03:00,787 --> 00:03:02,802
going to construct a data structure.

77
00:03:02,802 --> 00:03:04,469
We're gonna imagine a data structure,

78
00:03:04,469 --> 00:03:06,213
and then we're gonna
write code to construct

79
00:03:06,213 --> 00:03:07,764
the data structure, and
then that's gonna make

80
00:03:07,764 --> 00:03:08,768
our problem easy.

81
00:03:08,768 --> 00:03:11,608
So this is an example of
using cleverly constructed

82
00:03:11,608 --> 00:03:13,584
data structures to do this.

83
00:03:13,584 --> 00:03:16,103
And the data structure
that we're going to create

84
00:03:16,103 --> 00:03:19,419
is a list of tuples
where the value is first

85
00:03:19,419 --> 00:03:20,823
and the key is second.

86
00:03:20,823 --> 00:03:23,784
So you can just with items get key value.

87
00:03:23,784 --> 00:03:25,379
I want value key.

88
00:03:25,379 --> 00:03:27,766
So, let's take a look at this code.

89
00:03:27,766 --> 00:03:29,522
Take your time, and get it right.

90
00:03:29,522 --> 00:03:31,727
So, KV goes in C items.

91
00:03:31,727 --> 00:03:35,068
Well, that is unsorted and
going to go through whatever,

92
00:03:35,068 --> 00:03:37,823
A, B, and C, in whatever
order, and we're going

93
00:03:37,823 --> 00:03:39,000
to make a new list.

94
00:03:39,000 --> 00:03:40,168
So this is a data structure

95
00:03:40,168 --> 00:03:42,027
that we're creating temporarily.

96
00:03:42,027 --> 00:03:46,027
And what we're going to
do, is this is a list...

97
00:03:47,563 --> 00:03:50,577
And we're going to append to that list

98
00:03:50,577 --> 00:03:54,410
a tuple, so this going
to be a list of tuples.

99
00:03:56,088 --> 00:03:58,729
Except, we're not gonna append them

100
00:03:58,729 --> 00:04:01,365
in key value order, we're gonna flip 'em,

101
00:04:01,365 --> 00:04:04,074
and append-- the first of the
tuple is gonna be the value,

102
00:04:04,074 --> 00:04:06,335
and the second part is gonna be the key.

103
00:04:06,335 --> 00:04:07,838
So, we end up with this.

104
00:04:07,838 --> 00:04:09,326
This is sort of our
temporary data structure

105
00:04:09,326 --> 00:04:13,417
that we have constructed to
make our job really easy.

106
00:04:13,417 --> 00:04:14,417
So,

107
00:04:14,417 --> 00:04:16,793
this ends up being 10 A,

108
00:04:16,793 --> 00:04:17,715
22 C,

109
00:04:17,715 --> 00:04:19,559
1 B, now, we just kinda flipped 'em.

110
00:04:19,559 --> 00:04:22,590
We took this order, and
then we flipped 'em around,

111
00:04:22,590 --> 00:04:24,081
and so now we have this nice little list,

112
00:04:24,081 --> 00:04:25,922
sitting in memory, in a variable.

113
00:04:25,922 --> 00:04:27,367
And now it's really simple.

114
00:04:27,367 --> 00:04:30,814
We can say, "Oh, look, we can use sorted."

115
00:04:30,814 --> 00:04:33,852
And we can sort by, now,
the values because they're

116
00:04:33,852 --> 00:04:35,119
the first thing.

117
00:04:35,119 --> 00:04:36,572
The sorted doesn't know that they're--

118
00:04:36,572 --> 00:04:38,728
how we produced this list,
it just looks at that,

119
00:04:38,728 --> 00:04:40,409
and says, "Oh, that's a list of tuples;

120
00:04:40,409 --> 00:04:42,820
"I'm gonna always sort
by looking at the first

121
00:04:42,820 --> 00:04:44,236
"item in any tuple."

122
00:04:44,236 --> 00:04:46,133
And I'm gonna add reverse equals true,

123
00:04:46,133 --> 00:04:47,335
so I get a descending sort.

124
00:04:47,335 --> 00:04:49,012
So I see that

125
00:04:49,012 --> 00:04:53,092
the value that is highest
ends up being first.

126
00:04:53,092 --> 00:04:55,764
And so that changes this,
and I'm just, sort it,

127
00:04:55,764 --> 00:04:58,271
and then reassign it back into temp,

128
00:04:58,271 --> 00:05:00,252
and I'll print this
out, and so now you see

129
00:05:00,252 --> 00:05:02,658
it's sorted in descending order of key.

130
00:05:02,658 --> 00:05:04,183
So it's value,

131
00:05:04,183 --> 00:05:05,016
key,

132
00:05:05,016 --> 00:05:05,849
value,

133
00:05:05,849 --> 00:05:06,682
key,

134
00:05:06,682 --> 00:05:10,461
value, key, but it's sorted
in descending order, 'kay?

135
00:05:10,461 --> 00:05:13,838
And so, that's an
example, sort of, of just,

136
00:05:13,838 --> 00:05:15,484
you know, if I just made a data structure,

137
00:05:15,484 --> 00:05:16,700
and I flipped those things around,

138
00:05:16,700 --> 00:05:19,522
I could use sorted to sort these things.

139
00:05:19,522 --> 00:05:20,708
There are many other ways you could do it,

140
00:05:20,708 --> 00:05:22,745
but there's sort of like
the more elegant way

141
00:05:22,745 --> 00:05:25,164
of doing it, and the clever bit here

142
00:05:25,164 --> 00:05:28,400
is, make a new list and make
it be a little bit different.

143
00:05:28,400 --> 00:05:29,233
'Kay?

144
00:05:30,338 --> 00:05:32,045
So, here we're going to print out

145
00:05:32,045 --> 00:05:34,978
the top 10 most common words in a file.

146
00:05:34,978 --> 00:05:37,214
And most of this code
is review, so if we take

147
00:05:37,214 --> 00:05:38,297
a look at it,

148
00:05:39,593 --> 00:05:42,794
we're gonna open a file,
we're gonna start a dictionary

149
00:05:42,794 --> 00:05:45,324
for our counting, we're going to,

150
00:05:45,324 --> 00:05:48,991
you know, there's gonna
be words, and lines,

151
00:05:50,922 --> 00:05:52,924
alright? And so we're
gonna have a for-loop.

152
00:05:52,924 --> 00:05:55,554
This for-loop is gonna
go through each line,

153
00:05:55,554 --> 00:05:56,992
and then, of course,
we're gonna split 'em,

154
00:05:56,992 --> 00:05:58,786
which is busting them into pieces,

155
00:05:58,786 --> 00:06:00,861
and then we have a for-loop within that

156
00:06:00,861 --> 00:06:03,666
and this for-loop is gonna
go through each word,

157
00:06:03,666 --> 00:06:06,843
and so that means that
by nesting these loops,

158
00:06:06,843 --> 00:06:09,267
we're going through each
line, and then within the line

159
00:06:09,267 --> 00:06:10,216
we're going through, we're-- then we go

160
00:06:10,216 --> 00:06:12,115
to the next line, and
go through the words,

161
00:06:12,115 --> 00:06:14,586
and eventually, this line
of code, counts sub word

162
00:06:14,586 --> 00:06:17,180
equals counts dot get word zero plus one,

163
00:06:17,180 --> 00:06:19,930
our idiom for making a histogram,

164
00:06:21,268 --> 00:06:23,704
alright, this line right here is an idiom.

165
00:06:23,704 --> 00:06:25,462
If you don't know already what that is,

166
00:06:25,462 --> 00:06:28,089
go back to the previous dictionary lecture

167
00:06:28,089 --> 00:06:29,043
and understand it.

168
00:06:29,043 --> 00:06:31,182
Understand it 'cause
you're just gonna use it

169
00:06:31,182 --> 00:06:32,705
over and over again.

170
00:06:32,705 --> 00:06:34,307
So now, at this point,
and I always like drawing

171
00:06:34,307 --> 00:06:36,771
horizontal lines in code when we write it.

172
00:06:36,771 --> 00:06:38,990
At this point, coming
through at this point,

173
00:06:38,990 --> 00:06:41,663
counts as right, counts as the histogram.

174
00:06:41,663 --> 00:06:42,641
It's not sorted.

175
00:06:42,641 --> 00:06:45,691
So now we wanna sort it,
so we're going to make

176
00:06:45,691 --> 00:06:48,394
a new list, we're gonna
loop through key value,

177
00:06:48,394 --> 00:06:49,933
and then we're gonna make a tuple.

178
00:06:49,933 --> 00:06:52,459
I'm making this be two lines
to make it a little easier.

179
00:06:52,459 --> 00:06:54,165
Value key, so I'm flipping it, right?

180
00:06:54,165 --> 00:06:56,440
So I'm flipping the order of these things.

181
00:06:56,440 --> 00:06:58,037
That's making a tuple,
and then I'm appending

182
00:06:58,037 --> 00:07:01,002
that tuple to the list, okay?

183
00:07:01,002 --> 00:07:04,919
So at the end of this,
we have a list of tuples

184
00:07:07,366 --> 00:07:09,025
in

185
00:07:09,025 --> 00:07:10,462
value key order,

186
00:07:10,462 --> 00:07:11,295
VK,

187
00:07:11,295 --> 00:07:12,128
VK,

188
00:07:12,128 --> 00:07:13,127
right?

189
00:07:13,127 --> 00:07:14,667
So, at this point, coming through here,

190
00:07:14,667 --> 00:07:18,357
I've got, in my LST variable,
I've got this really

191
00:07:18,357 --> 00:07:20,542
useful bit of code or useful bit of data

192
00:07:20,542 --> 00:07:21,866
that I produced.

193
00:07:21,866 --> 00:07:24,283
And then I'm like, "Oh! Now
it's ready to be sorted."

194
00:07:24,283 --> 00:07:28,819
Poof! Sort. So take list and
sort it in descending order,

195
00:07:28,819 --> 00:07:30,496
and then stick that back in list.

196
00:07:30,496 --> 00:07:34,838
Now, we wanna print it out, but
we don't wanna print it out.

197
00:07:34,838 --> 00:07:37,844
We don't-- so we got a nice
sorted list coming down here.

198
00:07:37,844 --> 00:07:40,580
We don't wanna print it out in value key,

199
00:07:40,580 --> 00:07:41,826
'cause that's what it is, it's in

200
00:07:41,826 --> 00:07:45,508
parentheses V comma K
order, but it's in sorted.

201
00:07:45,508 --> 00:07:49,335
And we know that the highest value is here

202
00:07:49,335 --> 00:07:51,436
on down, and so we're gonna say, you know,

203
00:07:51,436 --> 00:07:53,056
we're gonna run through
and now we're gonna

204
00:07:53,056 --> 00:07:56,352
go through this new
list, only the first 10.

205
00:07:56,352 --> 00:07:58,979
Start at the beginning, up to,
but not including number 10,

206
00:07:58,979 --> 00:08:00,958
which is the first 10.

207
00:08:00,958 --> 00:08:03,404
For value key in, and so value is good.

208
00:08:03,404 --> 00:08:05,496
So this is the iteration
variable that's gonna go through

209
00:08:05,496 --> 00:08:07,956
each of these things on and down,

210
00:08:07,956 --> 00:08:09,808
and then we're just gonna
print it out flipping it,

211
00:08:09,808 --> 00:08:12,501
so we re-flip it, flip, flip.

212
00:08:12,501 --> 00:08:13,852
We print it out key value.

213
00:08:13,852 --> 00:08:15,769
And it's going to work.

214
00:08:17,212 --> 00:08:18,045
Okay, so,

215
00:08:19,909 --> 00:08:23,021
that is one way of doing this,
and this slide right here

216
00:08:23,021 --> 00:08:25,681
you absolutely do not need to figure out,

217
00:08:25,681 --> 00:08:28,648
but some of you will look at
this slide, and you'll like,

218
00:08:28,648 --> 00:08:30,312
"Why didn't you show us
that in the beginning?"

219
00:08:30,312 --> 00:08:32,674
And others of you will be
like, "No, no, no, no, no,

220
00:08:32,674 --> 00:08:34,694
"keep telling me this stuff here."

221
00:08:34,694 --> 00:08:35,527
So,

222
00:08:36,393 --> 00:08:37,924
I don't know exactly the term for this,

223
00:08:37,924 --> 00:08:40,744
but this is a very procedural,

224
00:08:40,744 --> 00:08:43,379
this is a classic algorithms
and data structures approach

225
00:08:43,379 --> 00:08:45,379
to solving this problem.

226
00:08:46,220 --> 00:08:49,790
This next thing uses
what are called lambdas

227
00:08:49,790 --> 00:08:53,369
and they kinda create
what I call a closed form,

228
00:08:53,369 --> 00:08:54,990
where you kinda do it
in all one statement,

229
00:08:54,990 --> 00:08:57,086
and there's all this
implicit stuff going on.

230
00:08:57,086 --> 00:08:58,331
So if you don't get this right away,

231
00:08:58,331 --> 00:09:00,553
don't worry too much about that.

232
00:09:00,553 --> 00:09:01,386
But,

233
00:09:02,419 --> 00:09:06,313
roughly, this single line does everything

234
00:09:06,313 --> 00:09:08,409
that bottom half of that program does.

235
00:09:08,409 --> 00:09:11,325
I mean, if you go back,
if we go back to here,

236
00:09:11,325 --> 00:09:14,516
it's pretty much this
line does everything,

237
00:09:14,516 --> 00:09:16,908
does that in one line, 'kay?

238
00:09:16,908 --> 00:09:18,496
It doesn't create the counts,

239
00:09:18,496 --> 00:09:20,302
and it doesn't print out the top 10,

240
00:09:20,302 --> 00:09:23,335
but it does everything in that middle bit.

241
00:09:23,335 --> 00:09:25,249
So let's take a look at this.

242
00:09:25,249 --> 00:09:27,453
So we all are gonna collapse this down,

243
00:09:27,453 --> 00:09:30,752
so we have a print, that
parentheses the end of the print.

244
00:09:30,752 --> 00:09:33,719
And then, we have sorted,
and remember that sorted

245
00:09:33,719 --> 00:09:35,636
takes as input, a list.

246
00:09:36,667 --> 00:09:38,644
And so that's not too bad,
and returns us a list,

247
00:09:38,644 --> 00:09:42,846
and so we'll print the return from sorted.

248
00:09:42,846 --> 00:09:44,901
And then this is the funny part.

249
00:09:44,901 --> 00:09:46,447
The fun part, funny part.

250
00:09:46,447 --> 00:09:49,280
This is called list comprehension.

251
00:09:50,929 --> 00:09:53,805
And we have square brackets,
and we say to Python,

252
00:09:53,805 --> 00:09:55,268
"This is a list."

253
00:09:55,268 --> 00:09:58,898
But instead of a listing of
things, or having a constant

254
00:09:58,898 --> 00:10:02,260
of one comma two comma three,
or append, append, append,

255
00:10:02,260 --> 00:10:04,932
we are going to create an
expression that will act

256
00:10:04,932 --> 00:10:07,507
as a generator for all the elements.

257
00:10:07,507 --> 00:10:11,447
And so this basically says,
this is a list of two tuples,

258
00:10:11,447 --> 00:10:15,021
V and K, and then this is sort of implied.

259
00:10:15,021 --> 00:10:19,188
For all KV in c dot items,
and so this is like a for-loop

260
00:10:20,684 --> 00:10:23,071
that is sort of driving
this, think of this as like

261
00:10:23,071 --> 00:10:25,603
stamp, stamp, stamp, stamp, stamp.

262
00:10:25,603 --> 00:10:27,901
However many times it has to make a stamp,

263
00:10:27,901 --> 00:10:30,484
and so that's producing a list,

264
00:10:31,593 --> 00:10:32,426
right?

265
00:10:32,426 --> 00:10:35,129
It just manufactures this
list, and then that list

266
00:10:35,129 --> 00:10:37,099
is sort of manufactured in the moment.

267
00:10:37,099 --> 00:10:39,881
There's no sto-- that's
not put in a variable,

268
00:10:39,881 --> 00:10:43,348
Python makes that list according
to the stamping pattern

269
00:10:43,348 --> 00:10:45,375
that you've told it to
stamp out this list,

270
00:10:45,375 --> 00:10:47,491
and then it passes that stamped out list

271
00:10:47,491 --> 00:10:49,118
without even storing in a variable.

272
00:10:49,118 --> 00:10:52,014
Into sorted, sorted moves the list around,

273
00:10:52,014 --> 00:10:53,754
'cause it is just a list of tuples,

274
00:10:53,754 --> 00:10:55,718
and then gives us back the sorted list.

275
00:10:55,718 --> 00:10:59,174
And so, I didn't put
reverse equals true on here,

276
00:10:59,174 --> 00:11:02,590
but you see that this is
sorted in ascending order now

277
00:11:02,590 --> 00:11:06,757
by key, and I did that all
in one little statement.

278
00:11:08,083 --> 00:11:11,644
So, look at this; this is
also one of the beautiful

279
00:11:11,644 --> 00:11:14,187
things about Python that
you can build these things,

280
00:11:14,187 --> 00:11:16,355
and you can build more
complex versions of this.

281
00:11:16,355 --> 00:11:19,102
And there's a lot of real
elegant things that you can do

282
00:11:19,102 --> 00:11:21,639
in Python; they're really succinct.

283
00:11:21,639 --> 00:11:24,595
You should be careful
because in the beginning,

284
00:11:24,595 --> 00:11:26,349
I think this is easier to understand

285
00:11:26,349 --> 00:11:27,893
even though after a while you're like,

286
00:11:27,893 --> 00:11:30,762
"Wait a sec, why am I putting
all these extra lines in?"

287
00:11:30,762 --> 00:11:33,040
Because this is not so hard to understand,

288
00:11:33,040 --> 00:11:36,305
but at some point, you know,
you will want to master

289
00:11:36,305 --> 00:11:39,828
this more powerful and more
succinct version of Python

290
00:11:39,828 --> 00:11:42,794
that expresses it in terms
of the data you wanna see,

291
00:11:42,794 --> 00:11:45,597
rather than the steps you wanna take.

292
00:11:45,597 --> 00:11:47,580
So this sorta finishes up tuples.

293
00:11:47,580 --> 00:11:50,667
We've done a bunch of
stuff, I mean, really,

294
00:11:50,667 --> 00:11:52,148
they're simple and elegant.

295
00:11:52,148 --> 00:11:54,865
Tuples, lists, and
dictionaries are all related.

296
00:11:54,865 --> 00:11:57,704
They're really three different,
kinda three foundational

297
00:11:57,704 --> 00:12:01,420
data structures, three
foundational collections of Python.

298
00:12:01,420 --> 00:12:05,064
And we combine those in
a lot of different ways.

299
00:12:05,064 --> 00:12:09,231
("Soul and Mind" by E's Jammy Jams)

