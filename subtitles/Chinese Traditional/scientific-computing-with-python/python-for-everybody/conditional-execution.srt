1
00:00:00,896 --> 00:00:03,927
- Hello and welcome to chapter
three, Conditional Execution.

2
00:00:03,927 --> 00:00:06,976
In conditional execution,
we meet the if statement.

3
00:00:06,976 --> 00:00:09,495
The if statement is where
Python can go one way,

4
00:00:09,495 --> 00:00:12,241
or another way, and it's
the beginning, and sort of

5
00:00:12,241 --> 00:00:16,889
our way of making Python
make decisions for us.

6
00:00:16,889 --> 00:00:19,465
Sequential code, we just,
you know, do some things.

7
00:00:19,465 --> 00:00:20,791
Sometimes, that's useful, but now we can

8
00:00:20,791 --> 00:00:24,255
have our code check something and then

9
00:00:24,255 --> 00:00:27,063
make a decision based on that thing.

10
00:00:27,063 --> 00:00:29,281
So, the conditional steps in Python

11
00:00:29,281 --> 00:00:31,449
are pretty straightforward.

12
00:00:31,449 --> 00:00:34,210
The key word that we're going
to use is the if statement.

13
00:00:34,210 --> 00:00:38,471
And so if is a reserved word,
and the if statement has,

14
00:00:38,471 --> 00:00:40,816
as part of it, a question that it asks.

15
00:00:40,816 --> 00:00:43,769
This is asking if X is less than 10.

16
00:00:43,769 --> 00:00:45,488
The colon is the end of the if statement,

17
00:00:45,488 --> 00:00:48,179
and then we begin an
indented block of text.

18
00:00:48,179 --> 00:00:50,286
The way this works, in
this particular thing is,

19
00:00:50,286 --> 00:00:52,515
this line is the conditional line.

20
00:00:52,515 --> 00:00:55,520
If the question is
true, the line executes,

21
00:00:55,520 --> 00:00:58,258
and if the question is
false, the line will skip.

22
00:00:58,258 --> 00:01:00,385
And you can think of it
the way this is, right?

23
00:01:00,385 --> 00:01:03,382
X is five, ask a question,
is it 10, or not?

24
00:01:03,382 --> 00:01:06,055
These questions do not
harm the value of X.

25
00:01:06,055 --> 00:01:08,457
If it is, then we run this code, and then

26
00:01:08,457 --> 00:01:12,202
we sort of re-join here,
and we adjust this next if.

27
00:01:12,202 --> 00:01:14,916
And if that's true, we do this
code, and then we do there.

28
00:01:14,916 --> 00:01:16,313
But, in this case, it's gonna be false,

29
00:01:16,313 --> 00:01:17,798
because X is not less than 20,

30
00:01:17,798 --> 00:01:19,863
so it just continues down here.

31
00:01:19,863 --> 00:01:23,030
If we look at how this works, it runs,

32
00:01:24,582 --> 00:01:26,753
it runs this line, then it sees

33
00:01:26,753 --> 00:01:28,073
this question, it skips that line.

34
00:01:28,073 --> 00:01:31,119
So this line does not run,
and so smaller prints out,

35
00:01:31,119 --> 00:01:33,369
and finis prints out, okay?

36
00:01:34,439 --> 00:01:37,198
And so that's the basic
idea of an if statement,

37
00:01:37,198 --> 00:01:40,792
and the indentation, when we
are done with an if statement,

38
00:01:40,792 --> 00:01:43,746
we de-indent back, and
there's this little block.

39
00:01:43,746 --> 00:01:48,138
This is one if statement, and
this is another if statement,

40
00:01:48,138 --> 00:01:49,760
and these are the two conditional lines,

41
00:01:49,760 --> 00:01:51,542
that either run, or they don't run,

42
00:01:51,542 --> 00:01:55,898
depending on the question, and
the answer to that question.

43
00:01:55,898 --> 00:01:58,163
So, we have a number of
different comparison operators

44
00:01:58,163 --> 00:02:01,627
that we can use to ask these
"true-false" questions,

45
00:02:01,627 --> 00:02:03,396
that say, "Is this true?"

46
00:02:03,396 --> 00:02:06,033
So, again, we're kind
of limited to the keys

47
00:02:06,033 --> 00:02:10,200
that were on computer keyboards
in the 1940s, and 1950s.

48
00:02:11,527 --> 00:02:13,592
Less than, less than or equal to.

49
00:02:13,592 --> 00:02:15,966
So, we didn't have fancy math characters,

50
00:02:15,966 --> 00:02:18,343
so we just concatenated less than equal

51
00:02:18,343 --> 00:02:20,152
to be less than, or equal to.

52
00:02:20,152 --> 00:02:24,188
This double equals is
asking, "Is this equal to?"

53
00:02:24,188 --> 00:02:26,761
So that's a little tricky, the equals

54
00:02:26,761 --> 00:02:28,981
sign is that assignment operator.

55
00:02:28,981 --> 00:02:30,931
If I was building a
language today from scratch,

56
00:02:30,931 --> 00:02:32,967
I would probably make assignment be arrow,

57
00:02:32,967 --> 00:02:36,379
and the equals question to have an equals.

58
00:02:36,379 --> 00:02:39,779
Or, I might say, somewhere I would say,

59
00:02:39,779 --> 00:02:42,913
question equals, but I'm not building

60
00:02:42,913 --> 00:02:45,773
this language, so that's not up to me.

61
00:02:45,773 --> 00:02:47,792
So this is the question, double equals

62
00:02:47,792 --> 00:02:51,352
is asking the question, is equal to.

63
00:02:51,352 --> 00:02:54,708
Greater than or equal,
greater than, and not equal.

64
00:02:54,708 --> 00:02:56,266
So this is the exclamation point,

65
00:02:56,266 --> 00:03:00,973
is sort of like not equal, so
that's how we do not equal.

66
00:03:00,973 --> 00:03:04,223
So, we take a look at some
of these, and some examples.

67
00:03:04,223 --> 00:03:05,623
All of these are going to be true,

68
00:03:05,623 --> 00:03:07,956
because of the way X is set.

69
00:03:09,201 --> 00:03:12,702
If X is equal to five,
that's the question version.

70
00:03:12,702 --> 00:03:15,372
That's true or false, it'll execute that.

71
00:03:15,372 --> 00:03:18,299
If X is greater than four,
it's gonna execute that.

72
00:03:18,299 --> 00:03:19,860
If X is greater than or equals five,

73
00:03:19,860 --> 00:03:21,107
it's gonna execute that.

74
00:03:21,107 --> 00:03:23,082
Here's kind of a short
hand, where, if there's only

75
00:03:23,082 --> 00:03:25,276
one line in this block,
you can kind of pull it up,

76
00:03:25,276 --> 00:03:27,463
right on the same line, after the equals.

77
00:03:27,463 --> 00:03:31,498
If X is less than six, which
it is, true, execute that.

78
00:03:31,498 --> 00:03:34,184
Then, if X is less than
or equals five, do that.

79
00:03:34,184 --> 00:03:36,518
And if X is not equal six, do that.

80
00:03:36,518 --> 00:03:38,726
Now, like I said, all of these questions

81
00:03:38,726 --> 00:03:41,028
have been carefully constructed
so that they are true.

82
00:03:41,028 --> 00:03:45,646
Just to show you the syntax
of those comparison operators.

83
00:03:45,646 --> 00:03:47,279
And you don't just have to have a single

84
00:03:47,279 --> 00:03:49,690
line of text in the indented block.

85
00:03:49,690 --> 00:03:52,148
And this will be something
you're gonna get used to.

86
00:03:52,148 --> 00:03:55,148
So, if we indent more than one line,

87
00:03:56,523 --> 00:04:00,235
then the conditional code is
actually these three lines.

88
00:04:00,235 --> 00:04:02,213
So, the idea is, you have an if statement,

89
00:04:02,213 --> 00:04:03,870
you come in, you do an indent.

90
00:04:03,870 --> 00:04:06,929
And as long as you stay indented,
you stay in that if block.

91
00:04:06,929 --> 00:04:11,187
If it's false, it just skips all of those.

92
00:04:11,187 --> 00:04:13,853
So, the way this is going to execute.

93
00:04:13,853 --> 00:04:16,353
X is five, print, before five.

94
00:04:17,708 --> 00:04:20,845
Is X equal five, that's the
question mark, and that's true.

95
00:04:20,845 --> 00:04:23,950
So, it's gonna run all
these, and then come back,

96
00:04:23,950 --> 00:04:25,838
and then continue on, and then de-indent.

97
00:04:25,838 --> 00:04:28,750
So, all of this stuff is running.

98
00:04:28,750 --> 00:04:31,360
It says if X equals six,
well, that was false.

99
00:04:31,360 --> 00:04:33,394
So that skips all of them, so none

100
00:04:33,394 --> 00:04:37,561
of these lines of code run,
so these actually don't run.

101
00:04:39,443 --> 00:04:41,368
And, it says, afterwards six.

102
00:04:41,368 --> 00:04:44,267
That's a mistake, those
don't run right there.

103
00:04:44,267 --> 00:04:47,184
Okay, because X does not equal six.

104
00:04:49,220 --> 00:04:53,137
So, indentation is an
essential part of Python.

105
00:04:55,147 --> 00:04:57,801
We use indentation in lots
of programming languages,

106
00:04:57,801 --> 00:05:00,634
often to demarcate blocks, to show

107
00:05:01,638 --> 00:05:03,367
where blocks start and stop.

108
00:05:03,367 --> 00:05:06,632
But in Python, it's syntactically correct,

109
00:05:06,632 --> 00:05:09,482
if you make an error, if
your indentation is wrong,

110
00:05:09,482 --> 00:05:12,470
after an if, you must indent,
and you maintain the indent

111
00:05:12,470 --> 00:05:16,004
as long as you want to, to
be in that same if block.

112
00:05:16,004 --> 00:05:17,489
And then, when you're
done with the if block,

113
00:05:17,489 --> 00:05:18,847
you can reduce the indent.

114
00:05:18,847 --> 00:05:21,832
In this rule of indenting, comment lines,

115
00:05:21,832 --> 00:05:25,082
and blank lines are completely ignored.

116
00:05:26,061 --> 00:05:29,394
So, we're gonna tend to put four spaces.

117
00:05:32,116 --> 00:05:36,030
Four spaces ends up being
the normal thing that we do.

118
00:05:36,030 --> 00:05:38,122
You'll see, all the code that I write

119
00:05:38,122 --> 00:05:39,983
has four spaces for each indent.

120
00:05:39,983 --> 00:05:42,520
If I go in twice, I use eight spaces.

121
00:05:42,520 --> 00:05:44,548
We have this instinct of wanting to hit

122
00:05:44,548 --> 00:05:46,998
the tab key to move in four spaces.

123
00:05:46,998 --> 00:05:49,959
Now, the problem is that
it might look the same

124
00:05:49,959 --> 00:05:52,997
on your screen, a tab, and four spaces,

125
00:05:52,997 --> 00:05:56,458
might line up the same place,
depending on how tabs are set.

126
00:05:56,458 --> 00:05:58,192
But Python can get confused by that,

127
00:05:58,192 --> 00:06:02,109
so we tend to avoid using
actual tabs in files.

128
00:06:03,112 --> 00:06:04,979
So most programming text
editors, like if you're

129
00:06:04,979 --> 00:06:08,260
using Notepad, or
TextWrangler, there is a place

130
00:06:08,260 --> 00:06:11,366
to set the tabs, to say, "Don't
put tabs in this document,

131
00:06:11,366 --> 00:06:14,125
"but every time I hit tab,
move over four spaces."

132
00:06:14,125 --> 00:06:17,175
You hit a tab, but it's like,
space, space, space, space.

133
00:06:17,175 --> 00:06:19,703
The nice thing about Atom, and this is

134
00:06:19,703 --> 00:06:21,994
the text editor we tend to
recommend in this class.

135
00:06:21,994 --> 00:06:25,324
A, because it works on
Windows, Linux, and Mac,

136
00:06:25,324 --> 00:06:27,800
but also because it
automatically sets this up.

137
00:06:27,800 --> 00:06:30,506
As soon as you save your
file with .py extension,

138
00:06:30,506 --> 00:06:32,890
you can sort of hit the
tab key with impunity,

139
00:06:32,890 --> 00:06:35,765
and everything works perfectly.

140
00:06:35,765 --> 00:06:38,638
But, the key thing here
is that Python insists

141
00:06:38,638 --> 00:06:41,532
that you get this right, and
if you don't get this right,

142
00:06:41,532 --> 00:06:43,533
you're going to get indentation errors.

143
00:06:43,533 --> 00:06:46,366
They're just another syntax error.

144
00:06:47,873 --> 00:06:49,907
So, if you're using
something like TextWrangler,

145
00:06:49,907 --> 00:06:53,407
or Notepad, run around in the preferences,

146
00:06:54,360 --> 00:06:56,897
and you'll find something
about expanding tabs,

147
00:06:56,897 --> 00:07:01,013
or maybe how many spaces each
tab stop is supposed to be.

148
00:07:01,013 --> 00:07:03,372
So, you'd check these, and
what this really is doing

149
00:07:03,372 --> 00:07:05,481
is telling your text editor,
"Never put an actual tab

150
00:07:05,481 --> 00:07:07,753
"in a document, but somehow simulate

151
00:07:07,753 --> 00:07:09,920
"tab stops, using spaces."

152
00:07:10,920 --> 00:07:15,559
So, here is a bit of code,
it's got nested block.

153
00:07:15,559 --> 00:07:17,802
But it gives you the
sense that you have to be

154
00:07:17,802 --> 00:07:20,066
very explicit when you're
reading Python code,

155
00:07:20,066 --> 00:07:24,145
of whether the indent is
the same between two lines,

156
00:07:24,145 --> 00:07:26,978
the same, increased, or decreased.

157
00:07:28,063 --> 00:07:30,394
Every time you increase
it, you mean something,

158
00:07:30,394 --> 00:07:31,942
every time you decrease
it, you mean something,

159
00:07:31,942 --> 00:07:33,743
and literally, if it stays the same,

160
00:07:33,743 --> 00:07:35,415
you mean something, as well.

161
00:07:35,415 --> 00:07:37,671
So, if we take a look at this, here,

162
00:07:37,671 --> 00:07:40,217
we have a line, and the next
line has the same indent.

163
00:07:40,217 --> 00:07:42,736
This is an if, with a colon
at the end, so we have

164
00:07:42,736 --> 00:07:46,637
to increase the indent, and
now we're maintaining it.

165
00:07:46,637 --> 00:07:48,736
So, these two lines are part of that if,

166
00:07:48,736 --> 00:07:50,335
but now we have to de-indent it.

167
00:07:50,335 --> 00:07:53,062
So, whether you choose
to de-indent this word,

168
00:07:53,062 --> 00:07:55,725
or this word, or whatever, where you do

169
00:07:55,725 --> 00:07:59,023
this de-indent affects
the scope of how far

170
00:07:59,023 --> 00:08:01,190
this if statement lasts, right?

171
00:08:01,190 --> 00:08:03,389
It lasts up to, but not including,

172
00:08:03,389 --> 00:08:07,944
the line that's de-indented
to the same level as the if.

173
00:08:07,944 --> 00:08:10,552
This is a de-indent, now,
we have a blank line,

174
00:08:10,552 --> 00:08:12,757
which doesn't matter, and we maintain it.

175
00:08:12,757 --> 00:08:14,135
And we have a for,
which we'll learn about,

176
00:08:14,135 --> 00:08:16,311
in the next chapter, which
is a looping structure.

177
00:08:16,311 --> 00:08:18,723
Do a for, for runs this five times,

178
00:08:18,723 --> 00:08:22,678
it has a colon, and it also
expects an indented block.

179
00:08:22,678 --> 00:08:24,551
Now, we have what's called a nested block,

180
00:08:24,551 --> 00:08:27,580
where we have an if, and a
colon, we go in some more.

181
00:08:27,580 --> 00:08:29,410
So this is like two indents, right?

182
00:08:29,410 --> 00:08:32,124
So, these are one indent,
and these are two indents.

183
00:08:32,124 --> 00:08:36,742
This is a block, within a
block, and then we de-indent.

184
00:08:36,742 --> 00:08:38,252
So that means this print is not part

185
00:08:38,252 --> 00:08:41,492
of the if statement, but is
still part of the for statement.

186
00:08:41,492 --> 00:08:44,114
Then we de-indent again,
and then that means

187
00:08:44,114 --> 00:08:48,370
this print is on the same
level as that for statement.

188
00:08:48,370 --> 00:08:51,042
So, if you start thinking about this,

189
00:08:51,042 --> 00:08:52,799
you wanna be able to start thinking

190
00:08:52,799 --> 00:08:55,476
that these blocks are
the start of the block,

191
00:08:55,476 --> 00:08:59,274
with the colon line, up
to, but not including,

192
00:08:59,274 --> 00:09:01,118
this line that's been de-indented.

193
00:09:01,118 --> 00:09:04,132
So, the for goes this far, right?

194
00:09:04,132 --> 00:09:05,483
The for goes up to, but not

195
00:09:05,483 --> 00:09:07,381
including the line that's de-indented.

196
00:09:07,381 --> 00:09:08,822
The if goes up to, but not

197
00:09:08,822 --> 00:09:11,977
including the line that's de-indented.

198
00:09:11,977 --> 00:09:14,312
So, as you do this,
you'll sort of mentally

199
00:09:14,312 --> 00:09:16,331
start drawing these
blocks, and pretty soon,

200
00:09:16,331 --> 00:09:19,702
you will start constructing
them as blocks.

201
00:09:19,702 --> 00:09:22,007
It takes a while, but
it doesn't take forever.

202
00:09:22,007 --> 00:09:25,924
But in Python, unlike
other languages, oops ...

203
00:09:32,931 --> 00:09:36,361
In Python, unlike other languages,

204
00:09:36,361 --> 00:09:39,259
this is very important, and it matters,

205
00:09:39,259 --> 00:09:41,711
and you can have syntax
errors if you get it wrong.

206
00:09:41,711 --> 00:09:43,254
'Cause you're really communicating

207
00:09:43,254 --> 00:09:45,276
the shape and the structure of your code,

208
00:09:45,276 --> 00:09:48,555
using these indents, and de-indents.

209
00:09:48,555 --> 00:09:50,054
We already saw a nested indent,

210
00:09:50,054 --> 00:09:52,801
this is a nested if, so you can put an if

211
00:09:52,801 --> 00:09:55,516
within an if, and you can go
as far deep as you want to go,

212
00:09:55,516 --> 00:09:59,908
like Russian dolls, and so,
here we have X equals 42.

213
00:09:59,908 --> 00:10:01,989
If it's one, we indent one, and then

214
00:10:01,989 --> 00:10:04,572
with this next thing we do,
these are on the same level

215
00:10:04,572 --> 00:10:06,224
of indent, but now we see an if,

216
00:10:06,224 --> 00:10:07,854
and it has to indent further.

217
00:10:07,854 --> 00:10:11,186
So this is like two in, eight spaces.

218
00:10:11,186 --> 00:10:14,641
Then we de-indent back, actually,
we'd de-indent back two.

219
00:10:14,641 --> 00:10:16,510
So, if you watch this, and you take a look

220
00:10:16,510 --> 00:10:19,427
at how this works, it runs to here.

221
00:10:22,011 --> 00:10:24,908
Comes in here, the answer is,
"Yes, X is greater than one."

222
00:10:24,908 --> 00:10:26,653
Prints this, is X less than 100,

223
00:10:26,653 --> 00:10:28,557
well, it's 42, so the answer is yes.

224
00:10:28,557 --> 00:10:30,286
So, it runs this, and
then it kind of continues

225
00:10:30,286 --> 00:10:32,218
back to there, and you can also think

226
00:10:32,218 --> 00:10:33,859
of drawing boxes around this.

227
00:10:33,859 --> 00:10:37,398
This is one if box, and
then, within that if box,

228
00:10:37,398 --> 00:10:41,483
there is another if box,
and again, it's the indent.

229
00:10:41,483 --> 00:10:43,651
The indent block, up to, but not including

230
00:10:43,651 --> 00:10:45,298
where the de-indent happens.

231
00:10:45,298 --> 00:10:49,575
And this here is like
two backwards de-indents.

232
00:10:49,575 --> 00:10:51,296
So, it ends two blocks, so two blocks

233
00:10:51,296 --> 00:10:53,612
are ended by where we place this.

234
00:10:53,612 --> 00:10:55,868
We could move this in, or
we could move this out.

235
00:10:55,868 --> 00:10:57,313
We could have it all the way into here,

236
00:10:57,313 --> 00:10:59,136
we could have it to here, or here,

237
00:10:59,136 --> 00:11:01,316
and where we put that line depends on how

238
00:11:01,316 --> 00:11:05,323
the ends of these blocks
are going to work out.

239
00:11:05,323 --> 00:11:09,490
One form, that's a one-branch
if that we just saw,

240
00:11:10,423 --> 00:11:12,794
but then, you could also have
what's called a two-branch if.

241
00:11:12,794 --> 00:11:15,545
The basic idea of a two-branch if is that

242
00:11:15,545 --> 00:11:17,547
you're gonna come in,
you're gonna ask a question,

243
00:11:17,547 --> 00:11:19,667
and you're gonna go one
direction, if it's yes,

244
00:11:19,667 --> 00:11:21,223
and another direction, if it's no.

245
00:11:21,223 --> 00:11:22,627
We call this an if, then, else,

246
00:11:22,627 --> 00:11:24,359
it's kind of like a fork in the road.

247
00:11:24,359 --> 00:11:26,260
The way to think about it is, depending

248
00:11:26,260 --> 00:11:28,010
on the output of this
question, we're gonna pick

249
00:11:28,010 --> 00:11:30,300
one or two of these, but if we pick one,

250
00:11:30,300 --> 00:11:31,726
the other one's never gonna happen.

251
00:11:31,726 --> 00:11:33,634
So, it's like an either, or, we're either

252
00:11:33,634 --> 00:11:36,009
gonna go one way, or we're
gonna go the other way.

253
00:11:36,009 --> 00:11:37,658
But there is no path where we somehow

254
00:11:37,658 --> 00:11:41,453
go boot through both of
them, that doesn't happen.

255
00:11:41,453 --> 00:11:44,028
The syntax that we use for this

256
00:11:44,028 --> 00:11:47,015
is what we call the if, then, else.

257
00:11:47,015 --> 00:11:49,998
So, the first part is a normal if,

258
00:11:49,998 --> 00:11:52,165
with an indent, and then we de-indent,

259
00:11:52,165 --> 00:11:53,844
and then this is another reserved word,

260
00:11:53,844 --> 00:11:56,721
else, with a colon, and then we re-indent.

261
00:11:56,721 --> 00:11:59,882
This is really, ends up being
part of a whole block here,

262
00:11:59,882 --> 00:12:04,419
and the else is, this is the
part that runs if it's false,

263
00:12:04,419 --> 00:12:06,098
and this is the part
that runs if it's true.

264
00:12:06,098 --> 00:12:09,430
The first branch of the if,
the first indented block,

265
00:12:09,430 --> 00:12:11,221
is what runs if it's true,

266
00:12:11,221 --> 00:12:12,700
and then the second indented block

267
00:12:12,700 --> 00:12:15,492
is the one that runs if it's false.

268
00:12:15,492 --> 00:12:17,907
So, here we go, if X is greater than two,

269
00:12:17,907 --> 00:12:20,081
in this case, it's yes,
we're gonna print bigger.

270
00:12:20,081 --> 00:12:21,462
And then we're gonna be all done.

271
00:12:21,462 --> 00:12:23,970
So, we do one, and so, this one did run,

272
00:12:23,970 --> 00:12:25,429
and this one did not run.

273
00:12:25,429 --> 00:12:27,295
So, basically, with an if, then, else,

274
00:12:27,295 --> 00:12:29,300
one of the two branches is gonna run,

275
00:12:29,300 --> 00:12:32,863
but there's no case in
which both branches run.

276
00:12:32,863 --> 00:12:35,312
Again, you sort of draw these blocks

277
00:12:35,312 --> 00:12:38,005
around these things,
mentally, and in this one,

278
00:12:38,005 --> 00:12:39,863
you sort of take, from the if.

279
00:12:39,863 --> 00:12:41,925
The else is really part of the block,

280
00:12:41,925 --> 00:12:43,631
up to, but not including, that print,

281
00:12:43,631 --> 00:12:46,516
which is back, de-indented back

282
00:12:46,516 --> 00:12:49,683
to the same level as the if statement.

283
00:12:51,751 --> 00:12:54,643
Python is actually one of
the more elegant languages,

284
00:12:54,643 --> 00:12:57,282
even though, after a
while, this indenting,

285
00:12:57,282 --> 00:13:01,514
when you get too far in, it
gets a little bit complex.

286
00:13:01,514 --> 00:13:04,739
This is a good way to visualize
this, with these indents.

287
00:13:04,739 --> 00:13:06,782
Coming up next, we're gonna talk about

288
00:13:06,782 --> 00:13:10,199
some more complex conditional structures.

