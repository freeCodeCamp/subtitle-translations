1
00:00:00,845 --> 00:00:02,822
- So now, we're going to
dig into strings a bit,

2
00:00:02,822 --> 00:00:04,954
and we've already looked
at how you can pull out

3
00:00:04,954 --> 00:00:06,274
a single character in a string,

4
00:00:06,274 --> 00:00:08,195
and now we're going to look
at what we call slicing,

5
00:00:08,195 --> 00:00:10,742
and that is pulling
chunks of a string out.

6
00:00:10,742 --> 00:00:13,955
And again, we're gonna use
the square bracket operator

7
00:00:13,955 --> 00:00:16,622
and so, the way I say it is sub.

8
00:00:18,509 --> 00:00:20,021
S sub zero through four.

9
00:00:20,021 --> 00:00:21,015
That's how I read this.

10
00:00:21,015 --> 00:00:23,015
S sub zero through four,

11
00:00:24,290 --> 00:00:26,596
so I look at the colon as through,

12
00:00:26,596 --> 00:00:29,096
I look at the brackets as sub.

13
00:00:30,592 --> 00:00:33,765
And so, S sub zero through four says

14
00:00:33,765 --> 00:00:35,682
start at position zero,

15
00:00:37,335 --> 00:00:38,549
and then go up through,

16
00:00:38,549 --> 00:00:41,828
but not including four, right,
so we don't include four.

17
00:00:41,828 --> 00:00:44,893
So that's probably the
hardest part of this.

18
00:00:44,893 --> 00:00:46,315
Up to, but not including.

19
00:00:46,315 --> 00:00:48,509
Up to, but not including.

20
00:00:48,509 --> 00:00:50,283
This seems counterintuitive, kind of like

21
00:00:50,283 --> 00:00:51,812
starting at zero seems counterintuitive,

22
00:00:51,812 --> 00:00:55,207
but after a while, you'll
kinda get used to it,

23
00:00:55,207 --> 00:00:56,899
and there'll be situations
where you're writing code like,

24
00:00:56,899 --> 00:00:59,042
oh, that's why that works better.

25
00:00:59,042 --> 00:01:00,634
But just for now remember it.

26
00:01:00,634 --> 00:01:02,012
Up to, but not including.

27
00:01:02,012 --> 00:01:05,243
It's just kind of a little thing

28
00:01:05,243 --> 00:01:09,076
we'll come back to when
that is useful for us.

29
00:01:11,031 --> 00:01:14,929
Six through seven, well, that
ends up being starting at six,

30
00:01:14,929 --> 00:01:16,625
up to, but not including seven,

31
00:01:16,625 --> 00:01:19,027
so that's why we only get the P out.

32
00:01:19,027 --> 00:01:21,774
Now, one thing that Python
is pretty nice about

33
00:01:21,774 --> 00:01:24,764
is it's not going to give you a traceback.

34
00:01:24,764 --> 00:01:27,353
We might expect that six through 20, well,

35
00:01:27,353 --> 00:01:29,591
there's no 20 characters,
but it's like, eh,

36
00:01:29,591 --> 00:01:31,800
that's okay, we'll just
let you stop at the end,

37
00:01:31,800 --> 00:01:34,236
and we'll start at six and
go all the way to the end.

38
00:01:34,236 --> 00:01:35,673
Oh, no traceback.

39
00:01:35,673 --> 00:01:38,766
It's almost disappointing
sometimes when Python

40
00:01:38,766 --> 00:01:40,770
doesn't track back, when you think, ah,

41
00:01:40,770 --> 00:01:42,379
you know, if you're so
obsessed about everything,

42
00:01:42,379 --> 00:01:44,285
I would have traced
back in that situation,

43
00:01:44,285 --> 00:01:47,538
but, hey, I guess if you're
allowed, you're allowed,

44
00:01:47,538 --> 00:01:49,628
and so there we go.

45
00:01:49,628 --> 00:01:54,255
Now, you can eliminate or
omit the first or last.

46
00:01:54,255 --> 00:01:55,556
If you eliminate the first,

47
00:01:55,556 --> 00:01:57,279
it assumes the beginning of string.

48
00:01:57,279 --> 00:01:59,715
If you eliminate the second,

49
00:01:59,715 --> 00:02:02,398
it assumes the end of the string, and ...

50
00:02:02,398 --> 00:02:03,687
Why you would do this I don't know,

51
00:02:03,687 --> 00:02:06,812
but that's from beginning to
end, so it's the whole string.

52
00:02:06,812 --> 00:02:11,335
So, whole string, eight
through the end is thon,

53
00:02:11,335 --> 00:02:15,085
and up to but not
including two is mo, right?

54
00:02:16,030 --> 00:02:17,553
So you get that.

55
00:02:17,553 --> 00:02:18,641
So just ...

56
00:02:18,641 --> 00:02:20,183
That's pretty simple.

57
00:02:20,183 --> 00:02:22,593
Once you've got the rest of
slicing and the rest of string

58
00:02:22,593 --> 00:02:25,716
indexing, the notion of
eliminating the first or the last

59
00:02:25,716 --> 00:02:27,812
of the colon expression,

60
00:02:27,812 --> 00:02:29,995
the first or second of
the colon expression,

61
00:02:29,995 --> 00:02:33,969
I think is actually pretty
intuitive, pretty nice.

62
00:02:33,969 --> 00:02:36,419
We've already been
concatenating strings together.

63
00:02:36,419 --> 00:02:40,946
We overload the plus operator,
and there is no space added.

64
00:02:40,946 --> 00:02:44,010
Remember, when you're doing print ...

65
00:02:44,010 --> 00:02:47,550
X, Y, this comma does turn into a space,

66
00:02:47,550 --> 00:02:49,105
but that's not what's happening here.

67
00:02:49,105 --> 00:02:51,513
There is no automatic space being added,

68
00:02:51,513 --> 00:02:53,037
and so we see Hello and There,

69
00:02:53,037 --> 00:02:54,960
and it just is HelloThere with no space,

70
00:02:54,960 --> 00:02:56,447
and so if we want, we just have to

71
00:02:56,447 --> 00:02:58,585
concatenate the space explicitly

72
00:02:58,585 --> 00:03:01,292
if we wanna put spaces into strings.

73
00:03:01,292 --> 00:03:03,465
The problem is if you ...

74
00:03:03,465 --> 00:03:05,441
You might think it's more
convenient to add a space

75
00:03:05,441 --> 00:03:07,421
with concatenation, but
then you have to think,

76
00:03:07,421 --> 00:03:09,499
well, what about if I
wanna concatenate things

77
00:03:09,499 --> 00:03:11,341
and not put the space in.

78
00:03:11,341 --> 00:03:12,830
Then I'd need a different operator.

79
00:03:12,830 --> 00:03:15,997
So that's kinda why it works that way.

80
00:03:17,595 --> 00:03:21,181
We can use in differently
as a logical operator,

81
00:03:21,181 --> 00:03:24,610
so we're using it as an
iteration structure in for loops,

82
00:03:24,610 --> 00:03:25,481
but we can also use it

83
00:03:25,481 --> 00:03:28,745
as a logical operator in if statements,

84
00:03:28,745 --> 00:03:31,614
so it's kinda like the,
you know, double equals,

85
00:03:31,614 --> 00:03:34,646
or not equals, or less than or equals,

86
00:03:34,646 --> 00:03:35,574
or something like that.

87
00:03:35,574 --> 00:03:37,009
It's like those guys.

88
00:03:37,009 --> 00:03:40,092
And so, it returns a true or a false.

89
00:03:41,342 --> 00:03:42,657
Is n in fruit?

90
00:03:42,657 --> 00:03:45,001
So that's a question,
and the answer is True.

91
00:03:45,001 --> 00:03:48,770
Is m in fruit, no, that's
the answer to a question.

92
00:03:48,770 --> 00:03:49,941
Is nan in fruit?

93
00:03:49,941 --> 00:03:51,142
Doesn't have to be a single character,

94
00:03:51,142 --> 00:03:53,746
can be more than one character,
and the answer is true.

95
00:03:53,746 --> 00:03:55,635
And then you say something like, you know,

96
00:03:55,635 --> 00:03:58,539
if a in fruit, and so
this is the logical value

97
00:03:58,539 --> 00:04:00,094
that returns a true or a false,

98
00:04:00,094 --> 00:04:01,894
and yes, we found it.

99
00:04:01,894 --> 00:04:04,140
So that becomes true
in this particular case

100
00:04:04,140 --> 00:04:06,841
so it runs the little indented bit.

101
00:04:06,841 --> 00:04:10,462
So, in is an operator in
this particular situation.

102
00:04:10,462 --> 00:04:12,790
In a for loop, in means
something different,

103
00:04:12,790 --> 00:04:15,368
and we'll use in for
other things as operators,

104
00:04:15,368 --> 00:04:18,701
as logical operators coming up in a bit.

105
00:04:20,322 --> 00:04:23,139
You can compare strings,
and this has to do with

106
00:04:23,139 --> 00:04:25,362
the character set of your computer,

107
00:04:25,362 --> 00:04:29,760
the character set that
Python is, but in general,

108
00:04:29,760 --> 00:04:32,293
you know, it is
lexicographically less than

109
00:04:32,293 --> 00:04:34,429
and lexicographically greater than.

110
00:04:34,429 --> 00:04:37,981
Upper case and lower
case are a little weird.

111
00:04:37,981 --> 00:04:40,735
I think when we used the
max function earlier,

112
00:04:40,735 --> 00:04:43,485
the way my computer was set up,

113
00:04:43,485 --> 00:04:46,985
uppercase was less than lowercase, but ...

114
00:04:50,000 --> 00:04:52,884
In general, uppercase
is less than lowercase.

115
00:04:52,884 --> 00:04:56,207
But in general, it's bad to assume case,

116
00:04:56,207 --> 00:05:00,160
but there is a deterministic
way to sort strings.

117
00:05:00,160 --> 00:05:02,597
You can, you know, have something equal to

118
00:05:02,597 --> 00:05:04,901
or less than or greater than,

119
00:05:04,901 --> 00:05:08,372
and all those operations work naturally.

120
00:05:08,372 --> 00:05:09,283
The less than and greater than

121
00:05:09,283 --> 00:05:10,727
you have to kinda be aware of

122
00:05:10,727 --> 00:05:14,646
uppercase, lowercase things like where ...

123
00:05:14,646 --> 00:05:16,809
You know, punctuation sorts

124
00:05:16,809 --> 00:05:19,202
less than or greater than letters.

125
00:05:19,202 --> 00:05:21,595
That's kind of unpredictable,
and it depends on

126
00:05:21,595 --> 00:05:23,691
the character set of your computer,

127
00:05:23,691 --> 00:05:26,210
and something you just
play with and figure out.

128
00:05:26,210 --> 00:05:29,170
If you're doing sorting stuff
by first name and last name,

129
00:05:29,170 --> 00:05:33,337
as long as the case is kinda
the same, you know, if ...

130
00:05:35,772 --> 00:05:39,939
If you were sorting Chuck
with an uppercase and Glenn,

131
00:05:41,356 --> 00:05:43,491
the fact that these
uppercases, they'd sort right,

132
00:05:43,491 --> 00:05:45,247
and these lowercases would sort right,

133
00:05:45,247 --> 00:05:49,080
but if you were to do
instead, lowercase chuck

134
00:05:50,148 --> 00:05:54,280
and uppercase Glenn, then
that would sort weird.

135
00:05:54,280 --> 00:05:57,011
As a matter of fact, the
G would come before that,

136
00:05:57,011 --> 00:06:00,556
and so case can mess
this up, but in general,

137
00:06:00,556 --> 00:06:02,845
other than case and special characters

138
00:06:02,845 --> 00:06:06,276
and other things, it technically works.

139
00:06:06,276 --> 00:06:08,958
It's just hard to kinda predict it.

140
00:06:08,958 --> 00:06:12,103
A lot of what we do is
use the string library,

141
00:06:12,103 --> 00:06:15,140
and so the strings are objects,

142
00:06:15,140 --> 00:06:17,490
and we'll talk later about
what that really means.

143
00:06:17,490 --> 00:06:21,323
And objects have these
things we call methods.

144
00:06:23,597 --> 00:06:26,991
So a string object has
some built-in capabilities,

145
00:06:26,991 --> 00:06:29,679
and one of the built-in capabilities

146
00:06:29,679 --> 00:06:33,367
that the string object has
is, here is a string object,

147
00:06:33,367 --> 00:06:35,401
and because greet is a string object,

148
00:06:35,401 --> 00:06:37,886
if we said type, we'd
see that it was an str.

149
00:06:37,886 --> 00:06:40,553
Dot lower says hey, dear string,

150
00:06:41,475 --> 00:06:43,841
make a lowercase version of yourself.

151
00:06:43,841 --> 00:06:45,817
It's like calling this function
lower and passing greet

152
00:06:45,817 --> 00:06:49,015
into it, and then giving that back to me.

153
00:06:49,015 --> 00:06:50,688
Now, it doesn't actually change greet.

154
00:06:50,688 --> 00:06:52,584
It gives me a lowercase copy.

155
00:06:52,584 --> 00:06:55,288
So here I have Hello Bob,
with an H and a B uppercase,

156
00:06:55,288 --> 00:06:58,260
and what I get back in zap
is hello bob, all lowercase,

157
00:06:58,260 --> 00:07:01,277
and note that greet is unchanged.

158
00:07:01,277 --> 00:07:02,860
So Hello Bob is still there,

159
00:07:02,860 --> 00:07:05,730
and you can even call
these methods on constants,

160
00:07:05,730 --> 00:07:07,366
so this is a string object,

161
00:07:07,366 --> 00:07:08,665
quote, Hi There, quote,

162
00:07:08,665 --> 00:07:10,992
dot lower, that says ...

163
00:07:10,992 --> 00:07:13,780
Call lower on this bit of string,

164
00:07:13,780 --> 00:07:15,628
and give me back a
lowercase version of it,

165
00:07:15,628 --> 00:07:19,416
and so it prints out as
the residual return value.

166
00:07:19,416 --> 00:07:20,518
This is like a function call.

167
00:07:20,518 --> 00:07:24,109
A method call is a kind of
special form of a function call.

168
00:07:24,109 --> 00:07:25,571
It's a function call where you say

169
00:07:25,571 --> 00:07:27,641
the thing, dot, the function name,

170
00:07:27,641 --> 00:07:31,010
rather than function name
passed in as a parameter.

171
00:07:31,010 --> 00:07:33,975
Like len, for example,
is non object-oriented.

172
00:07:33,975 --> 00:07:37,266
You know, len of X, that's
not object-oriented.

173
00:07:37,266 --> 00:07:41,433
Object-oriented would be X
dot something, parenthesis.

174
00:07:44,213 --> 00:07:47,387
So constants are objects as
well, and taking the lower

175
00:07:47,387 --> 00:07:49,744
gives us back lowercase, hi there.

176
00:07:49,744 --> 00:07:52,127
And so that's just one of
the things that you can do

177
00:07:52,127 --> 00:07:53,356
in the string library.

178
00:07:53,356 --> 00:07:57,279
These are built into string
variables and constants.

179
00:07:57,279 --> 00:07:58,556
They're just always there.

180
00:07:58,556 --> 00:08:01,714
As soon as you make a
string, they're part of it.

181
00:08:01,714 --> 00:08:06,297
And when you do type and
it says it's class str ...

182
00:08:06,297 --> 00:08:07,628
We'll get to object-oriented, don't worry.

183
00:08:07,628 --> 00:08:09,750
We'll get to object-oriented.

184
00:08:09,750 --> 00:08:13,333
And so you can do things
like use the type.

185
00:08:14,500 --> 00:08:16,750
This used to say, type 'str,'

186
00:08:16,750 --> 00:08:18,133
but it's class 'str,'

187
00:08:18,133 --> 00:08:19,833
kind of this is more of an OO ...

188
00:08:19,833 --> 00:08:21,570
The word class is an
object-oriented concept,

189
00:08:21,570 --> 00:08:23,933
but it is a string, and
you can use the dir,

190
00:08:23,933 --> 00:08:25,695
and of course there's extra stuff up here,

191
00:08:25,695 --> 00:08:29,778
and this is showing all
the different methods ...

192
00:08:30,866 --> 00:08:33,559
Or capabilities, things
we can do to strings.

193
00:08:33,559 --> 00:08:37,142
So, you know, X dot
something, parenthesis.

194
00:08:38,304 --> 00:08:39,443
Well, what can we do there?

195
00:08:39,443 --> 00:08:42,846
This is all of those things
that we can do to X's

196
00:08:42,846 --> 00:08:45,457
that are built in and come with X's,

197
00:08:45,457 --> 00:08:49,167
I mean come with strings,
when we build them.

198
00:08:49,167 --> 00:08:52,380
And Python, of course, has
great documentation online

199
00:08:52,380 --> 00:08:54,709
for all of these string
methods and what they do

200
00:08:54,709 --> 00:08:57,969
and how they work, and why
they work the way they do.

201
00:08:57,969 --> 00:09:00,229
And so here's some of
that Python documentation.

202
00:09:00,229 --> 00:09:02,521
We'll look at a few of these.

203
00:09:02,521 --> 00:09:04,260
But, you know, don't hesitate to say,

204
00:09:04,260 --> 00:09:07,008
Python string uppercase, and
I'm like, oh, yeah, yeah,

205
00:09:07,008 --> 00:09:09,424
that is upper, right?

206
00:09:09,424 --> 00:09:13,007
And so, here's a few
things that we can ...

207
00:09:14,766 --> 00:09:17,057
Do and use, some of the ones I use a lot,

208
00:09:17,057 --> 00:09:20,949
and we'll look at each
one of these things.

209
00:09:20,949 --> 00:09:25,484
So, the find() operation
says find me a substring

210
00:09:25,484 --> 00:09:28,205
within a string, right,

211
00:09:28,205 --> 00:09:29,686
find me a substring within a string,

212
00:09:29,686 --> 00:09:33,560
so find me the first na, and
give me back the position.

213
00:09:33,560 --> 00:09:36,062
So that gives me back two,

214
00:09:36,062 --> 00:09:39,177
and then I can say, go find a z in there.

215
00:09:39,177 --> 00:09:42,400
Well, there's no z, and so
it returns me negative one.

216
00:09:42,400 --> 00:09:43,391
So that's what the find does.

217
00:09:43,391 --> 00:09:45,248
So we're gonna do a lot ...

218
00:09:45,248 --> 00:09:47,013
We're gonna use this kind of stuff a lot,

219
00:09:47,013 --> 00:09:49,368
and we do a lot of looking in strings.

220
00:09:49,368 --> 00:09:51,363
Converting things to upper or lowercase,

221
00:09:51,363 --> 00:09:54,502
there is an upper method
and a lower method,

222
00:09:54,502 --> 00:09:58,254
so greet, greet.upper and
that means the uppercase

223
00:09:58,254 --> 00:09:59,671
nnn is HELLO BOB.

224
00:10:00,793 --> 00:10:03,638
Greet.lower, that means
the www is the lowercase

225
00:10:03,638 --> 00:10:06,524
hello world, and greet is unchanged.

226
00:10:06,524 --> 00:10:08,860
Greet is still hello bob
with upper and lower,

227
00:10:08,860 --> 00:10:11,687
because each of these
methods basically say

228
00:10:11,687 --> 00:10:14,877
I'm going to give you
back a uppercase copy

229
00:10:14,877 --> 00:10:16,939
or a lowercase copy of the original thing

230
00:10:16,939 --> 00:10:19,939
without changing the original thing.

231
00:10:22,804 --> 00:10:25,395
Search and replace is super useful,

232
00:10:25,395 --> 00:10:28,483
super duper useful, and it's pretty clean.

233
00:10:28,483 --> 00:10:31,592
Here, we have a string, and
we use the replace method.

234
00:10:31,592 --> 00:10:34,862
In this case, we're passing
in the old and the new.

235
00:10:34,862 --> 00:10:37,294
Bob, replace all Bob's with Jane's,

236
00:10:37,294 --> 00:10:39,341
and so that takes this Hello Bob

237
00:10:39,341 --> 00:10:41,692
and turns it to Hello Jane.

238
00:10:41,692 --> 00:10:43,859
Again, greet is unchanged.

239
00:10:45,662 --> 00:10:47,493
Greet is unchanged.

240
00:10:47,493 --> 00:10:51,314
And it does more than one
thing, so this says, go find ...

241
00:10:51,314 --> 00:10:52,941
No, let's clear that.

242
00:10:52,941 --> 00:10:56,026
This says go find all the
o's, and replace all the o's

243
00:10:56,026 --> 00:10:58,682
with X's, and so it goes
and finds two of 'em,

244
00:10:58,682 --> 00:11:02,577
and then out come two X's,
and so that really is a ...

245
00:11:02,577 --> 00:11:05,355
It replaces, not just
replace the first one,

246
00:11:05,355 --> 00:11:07,355
but replace all of them.

247
00:11:08,674 --> 00:11:12,091
White space, as we'll see, is a big deal.

248
00:11:12,991 --> 00:11:14,441
And white space is not just blanks,

249
00:11:14,441 --> 00:11:15,921
although the most common thing,

250
00:11:15,921 --> 00:11:18,310
but it's also certain
non-printing characters like tabs

251
00:11:18,310 --> 00:11:20,828
and new lines and other
kinds of things, and so

252
00:11:20,828 --> 00:11:24,780
we have a number of different
ways to strip white space.

253
00:11:24,780 --> 00:11:26,865
So here we've got some
spaces at the beginning

254
00:11:26,865 --> 00:11:28,404
and spaces at the end,

255
00:11:28,404 --> 00:11:30,522
and we print out, we do an L strip,

256
00:11:30,522 --> 00:11:32,437
and that throws away the
spaces at the beginning,

257
00:11:32,437 --> 00:11:35,488
that's the left, so it's a left strip ...

258
00:11:35,488 --> 00:11:37,845
If there's nothing there,
it doesn't harm it.

259
00:11:37,845 --> 00:11:41,327
R strip means throw away all
the blanks on the far end,

260
00:11:41,327 --> 00:11:43,359
and then strip says go take ...

261
00:11:43,359 --> 00:11:46,408
Take both sides, both sides for strip,

262
00:11:46,408 --> 00:11:49,307
and so that pulls out all
the spaces on both sides.

263
00:11:49,307 --> 00:11:51,298
This will be useful, 'cause
sometimes when you're tearing

264
00:11:51,298 --> 00:11:54,317
stuff apart, you'll find
yourself getting extra spaces,

265
00:11:54,317 --> 00:11:57,364
sometimes at the beginning,
sometimes at the end,

266
00:11:57,364 --> 00:11:59,864
and it can be tab or new line.

267
00:12:03,424 --> 00:12:07,341
It's sort of white space,
space that is kind of

268
00:12:08,402 --> 00:12:10,386
not visible, clear.

269
00:12:10,386 --> 00:12:11,825
That's what white space is.

270
00:12:11,825 --> 00:12:13,749
It's like if you were on a piece of paper,

271
00:12:13,749 --> 00:12:15,266
it's the white space.

272
00:12:15,266 --> 00:12:16,226
It's like, X.

273
00:12:16,226 --> 00:12:17,075
Well, that's not white space,

274
00:12:17,075 --> 00:12:19,027
but right here, oh, that's white space.

275
00:12:19,027 --> 00:12:23,764
It's any character that doesn't
cause printing to happen,

276
00:12:23,764 --> 00:12:26,101
if that makes any sense.

277
00:12:26,101 --> 00:12:28,220
It's any character where
nothing would be printed,

278
00:12:28,220 --> 00:12:29,495
and there are characters like that.

279
00:12:29,495 --> 00:12:31,500
There's like even bell characters,

280
00:12:31,500 --> 00:12:33,219
but we don't use them very much.

281
00:12:33,219 --> 00:12:35,631
We can ask very conveniently.

282
00:12:35,631 --> 00:12:36,762
We can say, hey,

283
00:12:36,762 --> 00:12:39,849
does this line start
with a particular string?

284
00:12:39,849 --> 00:12:42,734
And so, you know, line ...

285
00:12:42,734 --> 00:12:46,088
This is a question, gonna
return a true or false.

286
00:12:46,088 --> 00:12:47,978
Does this line start with 'Please'?

287
00:12:47,978 --> 00:12:50,132
And the answer is, True, it
does start with 'Please.'

288
00:12:50,132 --> 00:12:52,555
Does this line start with a lowercase p?

289
00:12:52,555 --> 00:12:55,593
No, it does not, and
so again, you use this

290
00:12:55,593 --> 00:12:59,566
in the context of if something,
colon, some block of text.

291
00:12:59,566 --> 00:13:01,734
Some block of code.

292
00:13:01,734 --> 00:13:06,646
So, we can combine these
things to tear stuff out,

293
00:13:06,646 --> 00:13:09,926
and so let's assume that
what we wanna do in this case

294
00:13:09,926 --> 00:13:14,032
is we wanna take a from line,
this is from an email form,

295
00:13:14,032 --> 00:13:16,365
email format from a mailbox.

296
00:13:17,487 --> 00:13:20,129
And this has got the from with a space,

297
00:13:20,129 --> 00:13:22,734
and the person's email, and then at sign

298
00:13:22,734 --> 00:13:25,623
and the school they're
from, and a space, and then

299
00:13:25,623 --> 00:13:27,985
the rest of the stuff, like
when this mail was sent.

300
00:13:27,985 --> 00:13:30,294
And this is a real mail
message from this guy Stephen

301
00:13:30,294 --> 00:13:33,174
from the University of Cape
Town in South Africa, and

302
00:13:33,174 --> 00:13:35,554
it's really Stephen, and
this really is the first line

303
00:13:35,554 --> 00:13:37,472
of a file that you'll
get to know pretty well

304
00:13:37,472 --> 00:13:38,524
by the rest of this course.

305
00:13:38,524 --> 00:13:39,705
Hi, Stephen!

306
00:13:39,705 --> 00:13:40,705
We like you.

307
00:13:41,652 --> 00:13:43,110
You're the example in my class,

308
00:13:43,110 --> 00:13:45,374
and have been for a long time.

309
00:13:45,374 --> 00:13:47,551
People actually who know
Stephen have taken this class,

310
00:13:47,551 --> 00:13:49,772
and they're like, Stephen, I
saw your picture in the class.

311
00:13:49,772 --> 00:13:50,874
So if you're ever in Cape Town

312
00:13:50,874 --> 00:13:53,036
at the University of Cape
Town, say hi to Stephen

313
00:13:53,036 --> 00:13:54,953
and tell him that you saw
him in the class, but okay.

314
00:13:54,953 --> 00:13:56,614
That's neither here nor there.

315
00:13:56,614 --> 00:13:59,480
What I really wanna do is I wanna extract

316
00:13:59,480 --> 00:14:02,147
his school from this email line.

317
00:14:03,498 --> 00:14:04,331
Okay.

318
00:14:04,331 --> 00:14:05,496
So.

319
00:14:05,496 --> 00:14:07,467
Now eventually, we will do things like ...

320
00:14:07,467 --> 00:14:08,485
The data will come from files,

321
00:14:08,485 --> 00:14:09,908
but this is still chapter six.

322
00:14:09,908 --> 00:14:11,736
So this is the data we're
gonna search through,

323
00:14:11,736 --> 00:14:14,478
and so we can say, hey,

324
00:14:14,478 --> 00:14:16,080
let's go find the at sign.

325
00:14:16,080 --> 00:14:19,000
Search up to this position
and find the at sign.

326
00:14:19,000 --> 00:14:22,468
So data dot find at sign, and
give me back where that's at.

327
00:14:22,468 --> 00:14:24,702
That's in position 21.

328
00:14:24,702 --> 00:14:26,219
It's position zero.

329
00:14:26,219 --> 00:14:28,969
Then, what we're gonna do
is we're gonna look for

330
00:14:28,969 --> 00:14:31,546
the next space after the at sign.

331
00:14:31,546 --> 00:14:33,759
So we're gonna start at the at sign,

332
00:14:33,759 --> 00:14:36,153
and tell find to start
here and look forward

333
00:14:36,153 --> 00:14:38,004
until it finds a space.

334
00:14:38,004 --> 00:14:40,290
So data dot find, look for a space,

335
00:14:40,290 --> 00:14:42,459
starting at the position of the at sign,

336
00:14:42,459 --> 00:14:45,383
and then that'll be in position 31,

337
00:14:45,383 --> 00:14:47,967
so 31 is what we get
in the space position.

338
00:14:47,967 --> 00:14:51,558
So now what we have is we
have, in two variables,

339
00:14:51,558 --> 00:14:55,056
we have the position of the at sign

340
00:14:55,056 --> 00:14:57,182
and the position of the
space after the at sign.

341
00:14:57,182 --> 00:14:59,726
Now, what we really want
is this bit right here.

342
00:14:59,726 --> 00:15:01,925
So we have to go one beyond the at sign,

343
00:15:01,925 --> 00:15:05,555
and we don't want the space, so we say,

344
00:15:05,555 --> 00:15:07,142
we're gonna use slicing here,

345
00:15:07,142 --> 00:15:11,358
data sub at position plus
one, up to but not including

346
00:15:11,358 --> 00:15:12,972
the space, ooh!

347
00:15:12,972 --> 00:15:16,143
Smiley face, 'cause we didn't
have to say space minus one,

348
00:15:16,143 --> 00:15:19,476
because that is up to but not including.

349
00:15:22,672 --> 00:15:25,022
And so we get that little bit right there.

350
00:15:25,022 --> 00:15:27,808
So we don't have to say minus one there,

351
00:15:27,808 --> 00:15:29,929
because this is not actually included.

352
00:15:29,929 --> 00:15:31,516
The thing that's at the
position of the space

353
00:15:31,516 --> 00:15:32,382
is not included.

354
00:15:32,382 --> 00:15:35,161
So that's already a little
benefit for the up to

355
00:15:35,161 --> 00:15:37,802
but not including, and so when
we print this variable out,

356
00:15:37,802 --> 00:15:42,800
host, we get exactly just the
school that Stephen works at,

357
00:15:42,800 --> 00:15:45,711
and probably went to, as a matter of fact.

358
00:15:45,711 --> 00:15:47,559
I don't know if he went there or not.

359
00:15:47,559 --> 00:15:50,142
So, this is just kind of a note

360
00:15:51,741 --> 00:15:54,584
for non-Latin character sets.

361
00:15:54,584 --> 00:15:57,692
You know, all programming
languages from the 60s on

362
00:15:57,692 --> 00:16:02,017
tended to work in what we
call the Latin character set,

363
00:16:02,017 --> 00:16:05,601
which is United States,
and England, and Europe,

364
00:16:05,601 --> 00:16:08,721
and lots of places uses
this ABC character set

365
00:16:08,721 --> 00:16:12,487
and the special characters,
but it's really common

366
00:16:12,487 --> 00:16:15,542
to want to use different characters,

367
00:16:15,542 --> 00:16:18,901
and so if you're going
from Python 2 to Python 3,

368
00:16:18,901 --> 00:16:20,321
and we'll talk about this a little later

369
00:16:20,321 --> 00:16:22,696
when it matters more ...

370
00:16:22,696 --> 00:16:26,910
Luckily we're in Python 3,
and so, one of the big things

371
00:16:26,910 --> 00:16:31,005
about Python 3 is that all the
internal strings are Unicode.

372
00:16:31,005 --> 00:16:35,918
In Python 2, there was sort
of some confusion as you

373
00:16:35,918 --> 00:16:38,580
went between strings, and this
is just a little bit of code,

374
00:16:38,580 --> 00:16:41,080
and so I'm putting in here ...

375
00:16:42,601 --> 00:16:44,378
You know, some Asian characters.

376
00:16:44,378 --> 00:16:45,727
This is Korean, actually.

377
00:16:45,727 --> 00:16:48,261
Asian characters into x,

378
00:16:48,261 --> 00:16:50,400
and then I say what
kind of a thing this is,

379
00:16:50,400 --> 00:16:52,952
and that is a string,

380
00:16:52,952 --> 00:16:56,857
and then there's this Unicode,
and this comes from Python 2.

381
00:16:56,857 --> 00:17:00,943
If it's a Unicode operation,
it's still a string,

382
00:17:00,943 --> 00:17:04,687
whereas in Python 2, if you put
any international characters

383
00:17:04,687 --> 00:17:07,239
into x, then it was a
string, and then there was

384
00:17:07,239 --> 00:17:10,554
a separate kind of constant
called a Unicode constant,

385
00:17:10,554 --> 00:17:11,992
and it was a different type.

386
00:17:11,992 --> 00:17:15,430
And there was ways that
you had to mess with these

387
00:17:15,430 --> 00:17:17,991
Unicode variables as you did things like

388
00:17:17,991 --> 00:17:20,699
read them from files and
put them back into files

389
00:17:20,699 --> 00:17:24,866
and did other things, so it
was much more difficult ...

390
00:17:26,705 --> 00:17:29,621
In Python 2, but we're doing in Python 3,

391
00:17:29,621 --> 00:17:34,414
and in Python 3, it natively
understands non-Latin

392
00:17:34,414 --> 00:17:35,898
character sets, international,

393
00:17:35,898 --> 00:17:37,127
Asian characters sets,

394
00:17:37,127 --> 00:17:39,021
Spanish, French character sets,

395
00:17:39,021 --> 00:17:41,674
and so, this is a good thing for Python 3,

396
00:17:41,674 --> 00:17:44,425
and this is one of the real
benefits of using Python 3,

397
00:17:44,425 --> 00:17:47,308
and as we start doing stuff
where we're exchanging data

398
00:17:47,308 --> 00:17:50,435
with the outside world,
this will come into play

399
00:17:50,435 --> 00:17:53,241
and I'll have to show you how to use it.

400
00:17:53,241 --> 00:17:55,009
There was weird things that you had to do.

401
00:17:55,009 --> 00:17:57,288
It just makes a lot
more sense in Python 3.

402
00:17:57,288 --> 00:17:58,213
Okay?

403
00:17:58,213 --> 00:18:01,729
So, we've talked strings,
we learned about the string,

404
00:18:01,729 --> 00:18:03,400
we're converting it,

405
00:18:03,400 --> 00:18:04,813
we've done a whole bunch of stuff,

406
00:18:04,813 --> 00:18:07,235
and this is, again, you know,

407
00:18:07,235 --> 00:18:09,645
we're not yet doing anything super useful.

408
00:18:09,645 --> 00:18:11,728
We're learning sort of how
to like slice and dice,

409
00:18:11,728 --> 00:18:13,832
even though we're sort of
not making the meal yet.

410
00:18:13,832 --> 00:18:16,553
Up next, we're gonna talk about files,

411
00:18:16,553 --> 00:18:17,982
we're gonna read some
data, and we're gonna

412
00:18:17,982 --> 00:18:20,497
slice and dice and use all the things

413
00:18:20,497 --> 00:18:22,424
in the next chapter that we've learned

414
00:18:22,424 --> 00:18:25,591
up to this point, so see you in a bit.

415
00:18:29,985 --> 00:18:33,568
(jazzy instrumental music)

