1
00:00:01,158 --> 00:00:03,906
- So, definite loops
use the four key word.

2
00:00:03,906 --> 00:00:07,126
And the idea of a definite
loop is it's going to loop

3
00:00:07,126 --> 00:00:08,299
through some set of things.

4
00:00:08,299 --> 00:00:10,111
It might be a set of lines in a file.

5
00:00:10,111 --> 00:00:12,981
It might be a set of
characters in a string.

6
00:00:12,981 --> 00:00:15,015
It might be set of strings
in a list of strings.

7
00:00:15,015 --> 00:00:18,860
But whatever it is, it's sort of gonna run

8
00:00:18,860 --> 00:00:21,970
a finite number of times,
depending on the thing

9
00:00:21,970 --> 00:00:23,549
that it's looping through.

10
00:00:23,549 --> 00:00:24,966
And we like this.

11
00:00:25,983 --> 00:00:28,443
And it's an easier way to construct it,

12
00:00:28,443 --> 00:00:32,015
and actually don't have to
deal with iteration variable.

13
00:00:32,015 --> 00:00:33,895
The four loop includes
a mechanism to construct

14
00:00:33,895 --> 00:00:36,172
the iteration variable for us.

15
00:00:36,172 --> 00:00:38,968
So it's definite loops iterate
through the members of a set.

16
00:00:38,968 --> 00:00:43,135
So, here's a very simple four
loop and so you see the four

17
00:00:44,922 --> 00:00:46,366
key word.

18
00:00:46,366 --> 00:00:48,448
And in is also a key word.

19
00:00:48,448 --> 00:00:52,405
And the iteration variable is
something we put right there.

20
00:00:52,405 --> 00:00:53,569
This I is declared.

21
00:00:53,569 --> 00:00:55,709
This "I" is like an assignment statement.

22
00:00:55,709 --> 00:00:58,545
And "I" is going to take
on successive values.

23
00:00:58,545 --> 00:01:01,950
So, "I" is going to be five
the first time though the loop.

24
00:01:01,950 --> 00:01:03,618
Then "I" is going to
be four the second time

25
00:01:03,618 --> 00:01:04,508
through the loop.

26
00:01:04,508 --> 00:01:05,841
Third, two, one.

27
00:01:07,072 --> 00:01:10,033
So, "I" is gonna be assigned
five different times

28
00:01:10,033 --> 00:01:12,425
to five different values.

29
00:01:12,425 --> 00:01:14,679
And then the loop is going to run.

30
00:01:14,679 --> 00:01:16,989
It's gonna run once with
five, once with four,

31
00:01:16,989 --> 00:01:20,149
once with three, once with
two and once with one.

32
00:01:20,149 --> 00:01:22,900
So this block of code, we have contracted,

33
00:01:22,900 --> 00:01:25,798
say executed five times with these values

34
00:01:25,798 --> 00:01:26,980
of "I".

35
00:01:26,980 --> 00:01:28,674
"I" is that iteration variable.

36
00:01:28,674 --> 00:01:30,852
"I" is that thing changing through

37
00:01:30,852 --> 00:01:32,240
each iteration of the loop.

38
00:01:32,240 --> 00:01:36,523
So, that's why this prints out
five, four, three, two, one

39
00:01:36,523 --> 00:01:39,947
and then when it's done it finishes it.

40
00:01:39,947 --> 00:01:43,901
So, this is a much more direct
syntax for looping five times

41
00:01:43,901 --> 00:01:46,136
and setting an iteration variable.

42
00:01:46,136 --> 00:01:50,274
You kind of all combine
it into this one thing.

43
00:01:50,274 --> 00:01:53,593
All into one thing, so it's quite nice.

44
00:01:53,593 --> 00:01:55,840
So, you don't have to be going
through a list of numbers

45
00:01:55,840 --> 00:01:58,463
there's all kinds of things
that we can iterate through

46
00:01:58,463 --> 00:02:00,988
with four and by the way,
while I'm sitting here,

47
00:02:00,988 --> 00:02:03,655
don't name my variable "friends"

48
00:02:04,508 --> 00:02:06,049
because that's a list of strings

49
00:02:06,049 --> 00:02:08,943
and "friend" which is
the iteration variable.

50
00:02:08,943 --> 00:02:12,452
I'm using singular and plural
because it helps you read it.

51
00:02:12,452 --> 00:02:15,824
Python doesn't understand
singular and plural.

52
00:02:15,824 --> 00:02:17,365
Just because you say
"friends", doesn't mean Python

53
00:02:17,365 --> 00:02:19,331
knows it's a list.

54
00:02:19,331 --> 00:02:21,172
Python does know it's a
list, but it doesn't know

55
00:02:21,172 --> 00:02:22,975
by the name of the variable
I've chosen, that's your basic

56
00:02:22,975 --> 00:02:25,397
mnemonic variable warning.

57
00:02:25,397 --> 00:02:27,180
These are cool variable
names, but I don't want you

58
00:02:27,180 --> 00:02:29,869
to get confused by them.

59
00:02:29,869 --> 00:02:31,711
So, you can loop through a variable,

60
00:02:31,711 --> 00:02:33,360
so we're gonna take this
list, the three strings

61
00:02:33,360 --> 00:02:35,365
and stick it in friends
and so "friend" is going to

62
00:02:35,365 --> 00:02:36,281
iterate through that.

63
00:02:36,281 --> 00:02:38,915
So the first time through,
"friend" is going to be Joseph,

64
00:02:38,915 --> 00:02:41,113
2nd time through it's gonna
be Glenn, 3rd time through

65
00:02:41,113 --> 00:02:43,197
it's gonna be Sally.

66
00:02:43,197 --> 00:02:46,715
So, that just says, run
this code, the indented code

67
00:02:46,715 --> 00:02:50,986
three times, each time the
variable friend takes on

68
00:02:50,986 --> 00:02:55,069
a successive version that's
in the friends array.

69
00:02:59,282 --> 00:03:01,870
So, it says Happy Birthday
Joseph, Glenn, Sally

70
00:03:01,870 --> 00:03:06,037
and then we come out of
the loop and we print done.

71
00:03:07,681 --> 00:03:11,848
If we try to draw a picture
of what this is really doing.

72
00:03:14,520 --> 00:03:16,585
The four loop is actually
doing a whole bunch of stuff

73
00:03:16,585 --> 00:03:20,076
that we would have to do with
maybe separate statements

74
00:03:20,076 --> 00:03:22,010
in the wild loop.

75
00:03:22,010 --> 00:03:24,739
First, it decides how many
times to run the loop.

76
00:03:24,739 --> 00:03:27,440
So it's answering the done
question, which way do we go.

77
00:03:27,440 --> 00:03:30,670
And it is also then moving "I" ahead.

78
00:03:30,670 --> 00:03:32,723
It's managing the iteration variable.

79
00:03:32,723 --> 00:03:36,606
If you go back to, it's
initializing it too,

80
00:03:36,606 --> 00:03:39,356
if you go back to the while loop,

81
00:03:40,656 --> 00:03:43,858
we have n=0, whilen
greater than zero, n=n-1.

82
00:03:43,858 --> 00:03:45,383
So we had like three
lines to control the loop,

83
00:03:45,383 --> 00:03:47,324
to manage the iteration variable.

84
00:03:47,324 --> 00:03:50,081
Where with the four loop,
we don't have to do that.

85
00:03:50,081 --> 00:03:53,632
And so, that's all taken care
of, so that basically says

86
00:03:53,632 --> 00:03:58,330
you know, by you using
a four loop are we done?

87
00:03:58,330 --> 00:04:00,064
No, we have five things to work well.

88
00:04:00,064 --> 00:04:01,906
So, out of the first one, run it.

89
00:04:01,906 --> 00:04:03,400
But we're not done,
because we've got one more

90
00:04:03,400 --> 00:04:06,053
set, to the second one, third
one, fourth one, fifth one,

91
00:04:06,053 --> 00:04:09,133
and now we're done and that
is all handled in a single

92
00:04:09,133 --> 00:04:10,946
line of code

93
00:04:10,946 --> 00:04:12,662
and that includes the iteration variable

94
00:04:12,662 --> 00:04:16,829
and the set of things that
we're gonna iterate through.

95
00:04:18,803 --> 00:04:21,136
I really like the word "in".

96
00:04:22,075 --> 00:04:26,242
It is mathematically, it
reminds me of the set theory

97
00:04:28,193 --> 00:04:30,651
where you say this is a member of this set

98
00:04:30,651 --> 00:04:32,068
or the four each.

99
00:04:33,632 --> 00:04:35,885
Math isn't important here,
but if you do know math,

100
00:04:35,885 --> 00:04:38,573
the vertical bar means such that.

101
00:04:38,573 --> 00:04:41,437
As a member of this
set, that kind of stuff.

102
00:04:41,437 --> 00:04:43,240
A member of this set.

103
00:04:43,240 --> 00:04:45,652
I'll erase the math stuff,
so we don't over math.

104
00:04:45,652 --> 00:04:49,189
But it's like, four each
of the values in the set,

105
00:04:49,189 --> 00:04:50,022
5,4,3,2,1.

106
00:04:51,109 --> 00:04:54,587
Run this loop, setting
the iteration variable "I"

107
00:04:54,587 --> 00:04:57,723
to the members of that
set, so in reminds me

108
00:04:57,723 --> 00:05:00,625
for those of us who are
math oriented, a really

109
00:05:00,625 --> 00:05:02,958
nice concept in mathematics.

110
00:05:08,079 --> 00:05:12,643
Now, you could think of
this as sort of this looping

111
00:05:12,643 --> 00:05:14,861
structure where the four
loop and this is pretty much

112
00:05:14,861 --> 00:05:17,261
how it actually runs
inside the computer, right?

113
00:05:17,261 --> 00:05:20,500
Where it initializes it
"I" it runs this, runs this

114
00:05:20,500 --> 00:05:23,239
thing five times and executes.

115
00:05:23,239 --> 00:05:24,603
That's one way to think about it,

116
00:05:24,603 --> 00:05:27,955
but you could also think
about it in a somewhat more

117
00:05:27,955 --> 00:05:32,311
abstract way and think of
it as all we're really doing

118
00:05:32,311 --> 00:05:36,094
is we have a contract
with Python that says,

119
00:05:36,094 --> 00:05:37,839
"We're supposed to run
this code five times

120
00:05:37,839 --> 00:05:41,478
and I's supposed to be five,
four, three, two and one.

121
00:05:41,478 --> 00:05:43,687
So, you can imagine this
might be what's going on.

122
00:05:43,687 --> 00:05:46,212
The four loop sets I
to five, runs our code.

123
00:05:46,212 --> 00:05:48,631
The four loop sets I
to four, runs our code.

124
00:05:48,631 --> 00:05:51,194
The four loop sets I to
three, runs our code.

125
00:05:51,194 --> 00:05:53,508
The four loop sets I
to two, runs our code.

126
00:05:53,508 --> 00:05:55,852
The four loop sets I to
one, and runs our code.

127
00:05:55,852 --> 00:05:59,102
All we know, is our code ran five times

128
00:06:00,130 --> 00:06:04,256
and by contract, each
successive time we'll get

129
00:06:04,256 --> 00:06:06,724
a different value for
I and the value for I

130
00:06:06,724 --> 00:06:09,271
is taken from this set.

131
00:06:09,271 --> 00:06:11,715
And so this is just one
way to think about it,

132
00:06:11,715 --> 00:06:16,432
to say to yourself, "Oh,
yeah, this is one way to think

133
00:06:16,432 --> 00:06:18,965
about it as it's actually
how it really works."

134
00:06:18,965 --> 00:06:21,365
But this is also kind of
logically the contract that Python

135
00:06:21,365 --> 00:06:22,782
is making for us.

136
00:06:23,754 --> 00:06:25,288
So, up next, we're gonna talk about

137
00:06:25,288 --> 00:06:29,155
taking this notion of doing
something to a lot of items

138
00:06:29,155 --> 00:06:31,189
but accomplishing something with that.

139
00:06:31,189 --> 00:06:33,654
And I call these loop idioms.

140
00:06:33,654 --> 00:06:36,487
(slow jazz music)

