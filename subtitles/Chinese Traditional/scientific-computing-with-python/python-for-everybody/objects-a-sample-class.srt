1
00:00:00,735 --> 00:00:03,068
- Okay so now that we've
gotten through the definitions,

2
00:00:03,068 --> 00:00:05,622
let's work into some sample code.

3
00:00:05,622 --> 00:00:07,706
But hey, look at this, we've got ourselves

4
00:00:07,706 --> 00:00:09,964
our cookie cutter and some cookies.

5
00:00:09,964 --> 00:00:13,214
So remember that a class is a template,

6
00:00:14,310 --> 00:00:15,886
it's not the actual thing.

7
00:00:15,886 --> 00:00:18,886
An object is an instance of a class.

8
00:00:20,047 --> 00:00:21,174
So you have to take the class

9
00:00:21,174 --> 00:00:24,251
and do something to make the object.

10
00:00:24,251 --> 00:00:26,706
And actually you can see
here some other classes,

11
00:00:26,706 --> 00:00:28,900
there's clearly sort of a snowflake class

12
00:00:28,900 --> 00:00:30,810
and a gingerbread man class.

13
00:00:30,810 --> 00:00:32,736
That's an object, object, object.

14
00:00:32,736 --> 00:00:35,987
Somewhere out here there
is a snowflake class

15
00:00:35,987 --> 00:00:40,407
and a gingerbread class,
but we got a snowman object

16
00:00:40,407 --> 00:00:42,727
and a snowman object and a snowman class.

17
00:00:42,727 --> 00:00:46,810
So class is the template,
object is the instance.

18
00:00:49,625 --> 00:00:50,890
So here's a better python code.

19
00:00:50,890 --> 00:00:53,664
So let's take a look at what we got here.

20
00:00:53,664 --> 00:00:56,337
Classes is in the reserved
word, kind of like def.

21
00:00:56,337 --> 00:00:57,764
We have the name the class,

22
00:00:57,764 --> 00:01:00,145
that is a name that we choose.

23
00:01:00,145 --> 00:01:01,434
That's the name by which we'll refer

24
00:01:01,434 --> 00:01:03,703
to this class for the
rest of this program.

25
00:01:03,703 --> 00:01:06,014
And it has a colon at the end of it,

26
00:01:06,014 --> 00:01:08,197
in which it starts an indented block.

27
00:01:08,197 --> 00:01:10,395
Which ends when we de-indent.

28
00:01:10,395 --> 00:01:12,469
Inside the class, there
are generally two things.

29
00:01:12,469 --> 00:01:14,182
There is some data and
this just looks like

30
00:01:14,182 --> 00:01:15,952
an assignment statement in the class.

31
00:01:15,952 --> 00:01:17,177
X equals zero.

32
00:01:17,177 --> 00:01:18,507
And then there is a def.

33
00:01:18,507 --> 00:01:20,846
This looks just like a function,

34
00:01:20,846 --> 00:01:23,702
in that it starts with a
def, has a colon, indents.

35
00:01:23,702 --> 00:01:26,028
So that function finishes right there.

36
00:01:26,028 --> 00:01:28,217
The difference is that this is a method,

37
00:01:28,217 --> 00:01:30,393
because it lives inside of a class.

38
00:01:30,393 --> 00:01:32,820
And so there is no function called party.

39
00:01:32,820 --> 00:01:37,193
There's a function called party
within party animal class.

40
00:01:37,193 --> 00:01:39,659
And we'll talk in a second
about this self thing.

41
00:01:39,659 --> 00:01:41,545
It is the way that inside this code

42
00:01:41,545 --> 00:01:44,488
we refer back to that variable.

43
00:01:44,488 --> 00:01:46,699
So this is not actually
executing any code.

44
00:01:46,699 --> 00:01:48,835
It's sort of remembering the template,

45
00:01:48,835 --> 00:01:51,444
defining the class party animal.

46
00:01:51,444 --> 00:01:54,869
This is what we call constructing.

47
00:01:54,869 --> 00:01:57,362
Using the party animal template or class,

48
00:01:57,362 --> 00:01:59,278
we are making a party animal.

49
00:01:59,278 --> 00:02:03,329
And then once we make that, we
stick it in the variable an.

50
00:02:03,329 --> 00:02:07,637
And then we're going to
call this party method

51
00:02:07,637 --> 00:02:09,959
three times, one, two, three.

52
00:02:09,959 --> 00:02:12,426
Now this self thing, and
we'll take a look at the self.

53
00:02:12,426 --> 00:02:16,082
The self ends up being an alias of an.

54
00:02:16,082 --> 00:02:17,631
And so you can look at this syntax,

55
00:02:17,631 --> 00:02:19,871
it's just kind of an
equivalent of this syntax.

56
00:02:19,871 --> 00:02:22,236
It's calling the party method

57
00:02:22,236 --> 00:02:24,164
within the party animal class,

58
00:02:24,164 --> 00:02:27,518
and passing the instance
in as the first parameter.

59
00:02:27,518 --> 00:02:31,477
And so self ends up being an alias of an

60
00:02:31,477 --> 00:02:33,179
each time these are called.

61
00:02:33,179 --> 00:02:34,972
Now if we make a different variable

62
00:02:34,972 --> 00:02:37,747
and a second object,
which we will eventually,

63
00:02:37,747 --> 00:02:40,122
you will see that that works
a little bit differently.

64
00:02:40,122 --> 00:02:45,062
And so, this syntax is a
short version of that syntax.

65
00:02:45,062 --> 00:02:48,729
So if we watch how this
executes, it's oops.

66
00:02:49,955 --> 00:02:52,100
It starts up here.

67
00:02:52,100 --> 00:02:54,005
It just defines it.

68
00:02:54,005 --> 00:02:56,602
And then we construct it.

69
00:02:56,602 --> 00:02:59,637
And that's what basically constructing it,

70
00:02:59,637 --> 00:03:00,908
we know how to construct it

71
00:03:00,908 --> 00:03:02,157
because we look at the class,

72
00:03:02,157 --> 00:03:05,228
and we make a variable x,
we make some code party.

73
00:03:05,228 --> 00:03:06,788
And then we construct that, that's what

74
00:03:06,788 --> 00:03:07,818
the party animal does.

75
00:03:07,818 --> 00:03:10,424
And then we assign that into an.

76
00:03:10,424 --> 00:03:13,813
And so, an is now pointing at that.

77
00:03:13,813 --> 00:03:16,308
Then when we call the party method,

78
00:03:16,308 --> 00:03:20,058
that basically takes
this an and passes it in

79
00:03:21,237 --> 00:03:24,234
as the first parameter,
which is used as self.

80
00:03:24,234 --> 00:03:27,346
And so, self.x, which is what we're doing

81
00:03:27,346 --> 00:03:28,838
in this line right here.

82
00:03:28,838 --> 00:03:30,156
Self.x is a variable.

83
00:03:30,156 --> 00:03:31,906
X starts out as zero.

84
00:03:33,770 --> 00:03:36,228
X starts out as zero because
when it was constructed

85
00:03:36,228 --> 00:03:37,648
it was set to zero.

86
00:03:37,648 --> 00:03:40,628
So we're in here, an is an alias of self

87
00:03:40,628 --> 00:03:43,135
and now it looks up self.x, which is zero,

88
00:03:43,135 --> 00:03:45,620
adds one to it so this becomes one.

89
00:03:45,620 --> 00:03:48,516
And then we print so far, so far one.

90
00:03:48,516 --> 00:03:50,206
And then the code returns and it goes down

91
00:03:50,206 --> 00:03:51,534
and does it again.

92
00:03:51,534 --> 00:03:53,532
And x becomes two.

93
00:03:53,532 --> 00:03:55,947
Prints out so far two, comes back down

94
00:03:55,947 --> 00:03:58,403
and does the last time, calls it again.

95
00:03:58,403 --> 00:04:01,628
Self.x is two, add one to
it and stick it back in.

96
00:04:01,628 --> 00:04:04,608
So this becomes three
and we print out three.

97
00:04:04,608 --> 00:04:06,306
And then the program finishes.

98
00:04:06,306 --> 00:04:08,739
And so you can think
of this as constructing

99
00:04:08,739 --> 00:04:12,906
the object and then associating
it with this an variable.

100
00:04:16,003 --> 00:04:17,942
Now we've created this object,

101
00:04:17,942 --> 00:04:20,264
we can play around with things
we've playing around before

102
00:04:20,264 --> 00:04:21,325
with dir and type.

103
00:04:21,325 --> 00:04:24,646
We use dir and type to inspect variables

104
00:04:24,646 --> 00:04:26,479
and types and objects.

105
00:04:28,112 --> 00:04:31,282
So we've been using objects all along.

106
00:04:31,282 --> 00:04:34,248
This code here says, hey
make me an empty list.

107
00:04:34,248 --> 00:04:36,516
Well it turns out that what we're saying

108
00:04:36,516 --> 00:04:39,030
is that there's already a list class

109
00:04:39,030 --> 00:04:41,603
inside a python and we're constructing

110
00:04:41,603 --> 00:04:44,093
an empty list and when we get back

111
00:04:44,093 --> 00:04:47,966
this empty list, we're
assigning that into x.

112
00:04:47,966 --> 00:04:52,132
So x in a sense, contains
or points to an empty list.

113
00:04:52,132 --> 00:04:54,100
So then we say, hey what is in x?

114
00:04:54,100 --> 00:04:55,239
What kind of thing is x?

115
00:04:55,239 --> 00:04:56,708
Well it's a list.

116
00:04:56,708 --> 00:04:58,524
This is a thing, it's a list type.

117
00:04:58,524 --> 00:05:01,108
Lists have list of things in them.

118
00:05:01,108 --> 00:05:02,681
And use a pen and all the things

119
00:05:02,681 --> 00:05:04,202
we've been doing before,
they're just objects.

120
00:05:04,202 --> 00:05:07,614
And then the dir, if you remember the dir,

121
00:05:07,614 --> 00:05:10,063
the dir is the capabilities.

122
00:05:10,063 --> 00:05:11,708
And there's all these
internal capabilities

123
00:05:11,708 --> 00:05:13,566
that do things like implement

124
00:05:13,566 --> 00:05:14,965
the bracket operator et cetera.

125
00:05:14,965 --> 00:05:16,224
There's double underscore ones.

126
00:05:16,224 --> 00:05:17,246
We can ignore them.

127
00:05:17,246 --> 00:05:18,494
Although you can even look them up

128
00:05:18,494 --> 00:05:20,538
and figure out what they
mean, if you feel like it.

129
00:05:20,538 --> 00:05:24,218
But the methods that we tend
to call are in this class.

130
00:05:24,218 --> 00:05:26,385
And so things like x.sort.

131
00:05:28,296 --> 00:05:30,702
I've always told you,
that is the sort method

132
00:05:30,702 --> 00:05:32,229
within the x thing.

133
00:05:32,229 --> 00:05:34,264
And the dot operator is the operator

134
00:05:34,264 --> 00:05:37,156
that we use to look something
up within an object.

135
00:05:37,156 --> 00:05:40,031
So you've been using
this syntax all along.

136
00:05:40,031 --> 00:05:43,311
X.sort, dictionary.items, all of those

137
00:05:43,311 --> 00:05:46,894
are methods within the
corresponding class.

138
00:05:48,114 --> 00:05:49,754
If we take a look at this line of code

139
00:05:49,754 --> 00:05:52,477
that we've been doing for a
very long time, which says,

140
00:05:52,477 --> 00:05:54,566
oh stick hello there into y.

141
00:05:54,566 --> 00:05:58,598
If I reword that, is more
OO or object orientated,

142
00:05:58,598 --> 00:06:00,339
what this single quote does,

143
00:06:00,339 --> 00:06:02,756
says make me a string object,

144
00:06:03,787 --> 00:06:06,515
and put some text in it and then when

145
00:06:06,515 --> 00:06:10,626
that is done being
constructed, stick that into y.

146
00:06:10,626 --> 00:06:14,596
And so y now points to a string object

147
00:06:14,596 --> 00:06:17,270
that's been pre initialized
to the string, hello there.

148
00:06:17,270 --> 00:06:20,221
Now that's a long way of saying
hello there ends up in y.

149
00:06:20,221 --> 00:06:23,170
But in OO terms, we can talk about that.

150
00:06:23,170 --> 00:06:25,260
If we do a dir of that,
we see a whole bunch

151
00:06:25,260 --> 00:06:29,411
of internal methods, which
have double underscores

152
00:06:29,411 --> 00:06:31,593
and then we see all kinds of
methods that we've been using.

153
00:06:31,593 --> 00:06:34,020
We've been using methods like upper.

154
00:06:34,020 --> 00:06:36,346
We've been using methods like find.

155
00:06:36,346 --> 00:06:40,013
We've been using methods
like rstrip, right?

156
00:06:41,547 --> 00:06:43,040
We've been using these methods.

157
00:06:43,040 --> 00:06:46,790
So we gonna like y.rstrip().

158
00:06:48,207 --> 00:06:51,468
Again that's a method, that's an object,

159
00:06:51,468 --> 00:06:52,903
not a class, it's an object.

160
00:06:52,903 --> 00:06:56,236
And that is the object look up operator.

161
00:06:57,222 --> 00:07:00,769
Now if we do the same thing
to code that we've built

162
00:07:00,769 --> 00:07:02,081
or a class that we've built.

163
00:07:02,081 --> 00:07:04,797
So now we have a party animal class.

164
00:07:04,797 --> 00:07:07,421
Remember this up to
here is just definition.

165
00:07:07,421 --> 00:07:10,388
Now we construct it and we store it in an.

166
00:07:10,388 --> 00:07:12,167
So an is a variable that contains

167
00:07:12,167 --> 00:07:14,712
an object of type party animal.

168
00:07:14,712 --> 00:07:18,135
We asked it what type it
is and it prints out here.

169
00:07:18,135 --> 00:07:20,329
It says, this is a class.

170
00:07:20,329 --> 00:07:23,234
And it's main_partyanimal
in this whole thing here

171
00:07:23,234 --> 00:07:25,901
is the _main, it's scoped _main.

172
00:07:27,065 --> 00:07:29,968
But you can see that you
have made a new type.

173
00:07:29,968 --> 00:07:32,881
You built a type by
using this class keyword.

174
00:07:32,881 --> 00:07:33,932
And then we use the dir,

175
00:07:33,932 --> 00:07:36,218
remember dir looks for capabilities.

176
00:07:36,218 --> 00:07:40,385
And again, you'll see a whole
bunch of underscore things.

177
00:07:41,740 --> 00:07:43,523
They have meaning, you can look them up.

178
00:07:43,523 --> 00:07:44,881
But eventually you'll see the two things

179
00:07:44,881 --> 00:07:46,092
that you've put in it.

180
00:07:46,092 --> 00:07:47,853
One is the method party and the other

181
00:07:47,853 --> 00:07:50,773
is the attribute or field x.

182
00:07:50,773 --> 00:07:51,985
And again, these are the things

183
00:07:51,985 --> 00:07:54,818
that you can say an.x or an.party.

184
00:07:57,913 --> 00:08:01,562
Because this dot is the object operator,

185
00:08:01,562 --> 00:08:03,991
the object lookup
operator that says look up

186
00:08:03,991 --> 00:08:06,441
in the object an the thing x.

187
00:08:06,441 --> 00:08:09,169
Or look up in the object
an the thing party.

188
00:08:09,169 --> 00:08:10,002
Okay?

189
00:08:12,525 --> 00:08:14,237
So up next we'll talk a little bit about

190
00:08:14,237 --> 00:08:16,478
how objects are created and destroyed.

191
00:08:16,478 --> 00:08:18,784
We also call that, object life cycle.

