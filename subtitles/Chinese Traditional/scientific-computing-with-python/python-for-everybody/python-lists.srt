1
00:00:00,319 --> 00:00:02,582
- Hello and welcome to Chapter 8.

2
00:00:02,582 --> 00:00:04,930
We're gonna talk about
lists in this chapter.

3
00:00:04,930 --> 00:00:07,842
Up to now, we've been
talking about algorithms.

4
00:00:07,842 --> 00:00:10,618
Algorithms are the concept
in computer science

5
00:00:10,618 --> 00:00:12,734
of using the programming language

6
00:00:12,734 --> 00:00:14,948
to express the steps that
you want the computer

7
00:00:14,948 --> 00:00:17,059
to go through to solve the problem.

8
00:00:17,059 --> 00:00:20,081
Read some data, convert it
to a floating point number,

9
00:00:20,081 --> 00:00:21,572
check to see if it's greater than 40,

10
00:00:21,572 --> 00:00:23,197
do one thing if it's great than 40,

11
00:00:23,197 --> 00:00:26,007
do another thing if it's not,
then print out the result.

12
00:00:26,007 --> 00:00:29,099
Or, open a file, read everything,

13
00:00:29,099 --> 00:00:31,529
and if the first line starts
with something, do something,

14
00:00:31,529 --> 00:00:34,431
if not skip it, and then
add all the things up.

15
00:00:34,431 --> 00:00:37,078
Those are steps, those
are a series of steps,

16
00:00:37,078 --> 00:00:39,143
and hopefully by now
you're getting to the point

17
00:00:39,143 --> 00:00:41,297
where you have a good
understanding of steps.

18
00:00:41,297 --> 00:00:44,129
But there's a whole other
side of computer programming

19
00:00:44,129 --> 00:00:45,446
called data structures.

20
00:00:45,446 --> 00:00:48,247
And data structures is
not the steps but instead

21
00:00:48,247 --> 00:00:51,598
clever ways that you lay out the data

22
00:00:51,598 --> 00:00:53,348
and clever ways that you make sure

23
00:00:53,348 --> 00:00:56,171
that the data does what you want it to do.

24
00:00:56,171 --> 00:00:58,415
And so that's what we're going
to start talking about now.

25
00:00:58,415 --> 00:01:01,301
Lists are the first and
simplest data structure.

26
00:01:01,301 --> 00:01:03,480
Strings are kinda like data structures

27
00:01:03,480 --> 00:01:07,128
but lists are probably our
first real data structure

28
00:01:07,128 --> 00:01:09,010
that we're gonna think about and design

29
00:01:09,010 --> 00:01:10,521
and make use of effectively.

30
00:01:10,521 --> 00:01:13,127
But before we talk about
what is a collection,

31
00:01:13,127 --> 00:01:15,192
we should talk about
what is not a collection.

32
00:01:15,192 --> 00:01:17,019
So we're familiar with what a variable is.

33
00:01:17,019 --> 00:01:19,018
We know that a variable is
a little piece of memory

34
00:01:19,018 --> 00:01:20,569
that's got a label on it.

35
00:01:20,569 --> 00:01:22,689
And then an assignment statement, ya know,

36
00:01:22,689 --> 00:01:27,031
sticks a 2 into x and then 2
is in this little cupboard.

37
00:01:27,031 --> 00:01:30,494
And then it goes to the next
line and then 4 goes into x

38
00:01:30,494 --> 00:01:32,997
and so the 2 goes away and the 4 is there.

39
00:01:32,997 --> 00:01:36,060
A key thing is you can't
have more than one variable

40
00:01:36,060 --> 00:01:38,238
at any given moment, right.

41
00:01:38,238 --> 00:01:40,638
And more than one value in a variable.

42
00:01:40,638 --> 00:01:42,554
So when we move to collections,

43
00:01:42,554 --> 00:01:44,727
collections are more like suitcases.

44
00:01:44,727 --> 00:01:46,497
We can put lots of things in them.

45
00:01:46,497 --> 00:01:48,222
We have ways of organizing them,

46
00:01:48,222 --> 00:01:50,683
and as we go through lists
and dictionaries and tuples,

47
00:01:50,683 --> 00:01:53,173
we'll see how there are
different ways to organize them.

48
00:01:53,173 --> 00:01:54,550
And, as a matter of fact,

49
00:01:54,550 --> 00:01:56,789
we've been talking about lists for awhile.

50
00:01:56,789 --> 00:01:59,448
Every time we use one of
these square bracket syntaxes,

51
00:01:59,448 --> 00:02:02,171
in earlier programs, we've
been working with lists.

52
00:02:02,171 --> 00:02:04,720
And so this is technically
a three item list

53
00:02:04,720 --> 00:02:06,879
with three strings, got commas here.

54
00:02:06,879 --> 00:02:09,459
Joseph is one string, Glenn
and Sally are another string.

55
00:02:09,459 --> 00:02:11,981
And here's another one
that is another thing,

56
00:02:11,981 --> 00:02:14,946
and the list is basically,
it's a list constant

57
00:02:14,946 --> 00:02:16,872
and it's being assigned into a variable.

58
00:02:16,872 --> 00:02:19,357
So this friends variable
has three things in it,

59
00:02:19,357 --> 00:02:20,829
so that's different than

60
00:02:20,829 --> 00:02:23,700
what we've been talking about before.

61
00:02:23,700 --> 00:02:26,032
So these brackets, bracket structures,

62
00:02:26,032 --> 00:02:28,571
with square brackets are those lists.

63
00:02:28,571 --> 00:02:30,358
And so the print is just the print

64
00:02:30,358 --> 00:02:32,643
with parentheses to get the print to work,

65
00:02:32,643 --> 00:02:36,424
but 1, 24, 76 is the
three item integer list.

66
00:02:36,424 --> 00:02:39,972
Red, yellow, and blue is
a three item string list.

67
00:02:39,972 --> 00:02:42,414
But it doesn't all have
to be integers or strings.

68
00:02:42,414 --> 00:02:44,856
Python can handle different things

69
00:02:44,856 --> 00:02:46,291
and different kinds of data

70
00:02:46,291 --> 00:02:47,884
in different positions in the list.

71
00:02:47,884 --> 00:02:51,714
So, red, 24, 98.6. a three
item list with a string,

72
00:02:51,714 --> 00:02:54,539
an integer, and a floating point number.

73
00:02:54,539 --> 00:02:57,598
And, while we're not gonna
use this too much for now,

74
00:02:57,598 --> 00:03:00,193
this outer list is a three item list,

75
00:03:00,193 --> 00:03:03,070
and the second item is another list.

76
00:03:03,070 --> 00:03:05,039
So this is kind of alluding toward

77
00:03:05,039 --> 00:03:07,850
what we'll do when we start
talking about data structures.

78
00:03:07,850 --> 00:03:09,447
And that is, we have a structure

79
00:03:09,447 --> 00:03:11,076
and then we have another
structure inside of it

80
00:03:11,076 --> 00:03:13,189
and sometimes this can get quite complex.

81
00:03:13,189 --> 00:03:14,764
And, we're doing this for a reason.

82
00:03:14,764 --> 00:03:16,268
This here has no reason,

83
00:03:16,268 --> 00:03:18,232
just to show you that it's possible,

84
00:03:18,232 --> 00:03:20,960
that lists can be made
up of lots of things,

85
00:03:20,960 --> 00:03:22,334
including other lists.

86
00:03:22,334 --> 00:03:26,296
And of course there is also
the notion of the empty list.

87
00:03:26,296 --> 00:03:27,319
And like I've said,

88
00:03:27,319 --> 00:03:30,755
I have had to be able to tell
you about lists all along.

89
00:03:30,755 --> 00:03:32,418
We use them in for loops.

90
00:03:32,418 --> 00:03:35,356
We can put lots of things here,
we can put file handle here.

91
00:03:35,356 --> 00:03:37,830
We can go through the file.
we can put a string there,

92
00:03:37,830 --> 00:03:39,830
we can go through the
characters in the string

93
00:03:39,830 --> 00:03:41,450
and in a list, and the iteration variable

94
00:03:41,450 --> 00:03:44,068
then goes through the
successive elements of the list.

95
00:03:44,068 --> 00:03:46,444
And that's why this
prints off 5, 4, 3, 2, 1,

96
00:03:46,444 --> 00:03:49,181
and then the loop is done
and it prints out blastoff!

97
00:03:49,181 --> 00:03:51,675
So we've been using them and
we've been actually iterating

98
00:03:51,675 --> 00:03:55,719
through lists with for
statements all along.

99
00:03:55,719 --> 00:04:00,461
So the for each, I mean
the for statement, ya know,

100
00:04:00,461 --> 00:04:02,478
has been something we use with lists.

101
00:04:02,478 --> 00:04:04,621
And when you just need to
go iterate through the list

102
00:04:04,621 --> 00:04:06,571
and go through every item in order,

103
00:04:06,571 --> 00:04:08,740
the for is a great way to do that.

104
00:04:08,740 --> 00:04:10,746
So friend is our iteration variable.

105
00:04:10,746 --> 00:04:12,668
Friends is our list variable,

106
00:04:12,668 --> 00:04:15,082
and so that says friend
is gonna successfully

107
00:04:15,082 --> 00:04:17,645
take on the value Joseph, Glenn, and Sally

108
00:04:17,645 --> 00:04:21,072
and print out Happy New Year,
Joseph, Glenn, and Sally.

109
00:04:21,072 --> 00:04:23,575
It runs three times, once
for each of the values,

110
00:04:23,575 --> 00:04:26,038
and the iteration variable advances.

111
00:04:26,038 --> 00:04:29,581
Now, I do want to make
it really clear that

112
00:04:29,581 --> 00:04:33,748
the choice of friends-uh and
friend-uh, singular and plural,

113
00:04:35,098 --> 00:04:37,047
is arbitrary and capricious.

114
00:04:37,047 --> 00:04:40,222
It happens to be convenient and intuitive

115
00:04:40,222 --> 00:04:42,477
that the iteration variable is one

116
00:04:42,477 --> 00:04:44,844
and the list variable is more than one,

117
00:04:44,844 --> 00:04:47,743
but Python has no idea
about singulars and plurals.

118
00:04:47,743 --> 00:04:49,649
Matter of fact, Python wouldn't care,

119
00:04:49,649 --> 00:04:51,581
it would be totally equivalent for Python

120
00:04:51,581 --> 00:04:54,257
to do the same thing, to
have the list variable be z

121
00:04:54,257 --> 00:04:56,134
and the iteration variable be x.

122
00:04:56,134 --> 00:04:59,135
X will take on the success
values of these three things.

123
00:04:59,135 --> 00:05:02,336
Now, am I being nice to you
by calling this list friends

124
00:05:02,336 --> 00:05:04,305
and this iteration variable friend?

125
00:05:04,305 --> 00:05:06,549
I am, but I also don't
want it to confuse you

126
00:05:06,549 --> 00:05:09,788
if you're just a beginning developer.

127
00:05:09,788 --> 00:05:12,830
So, just like strings, we can
sort of look within lists.

128
00:05:12,830 --> 00:05:15,408
Part of the thing is when
you put more than one thing

129
00:05:15,408 --> 00:05:18,293
in a data structure, you
need to get them out.

130
00:05:18,293 --> 00:05:22,234
And so lists have positions,
they maintain order.

131
00:05:22,234 --> 00:05:24,276
And so the first thing in the list is

132
00:05:24,276 --> 00:05:26,684
the sub zero position, sub one, sub two.

133
00:05:26,684 --> 00:05:28,724
Just like strings, they're zero based.

134
00:05:28,724 --> 00:05:31,541
Just like European elevators,
they're zero based.

135
00:05:31,541 --> 00:05:34,438
So if we take a look and
we say oh, friends sub 1,

136
00:05:34,438 --> 00:05:36,951
that's how I read that the
little square brackets,

137
00:05:36,951 --> 00:05:39,510
when you take a variable here,
and you say friends sub 1.

138
00:05:39,510 --> 00:05:41,808
Remember, singular plural don't matter.

139
00:05:41,808 --> 00:05:44,811
Friends sub 1 means Glenn
cause this is the zero

140
00:05:44,811 --> 00:05:47,477
and that's the one and
then Sally's the sub 2,

141
00:05:47,477 --> 00:05:51,932
so that's what prints Glenn
out in this particular thing.

142
00:05:51,932 --> 00:05:53,915
Now, lists are mutable.

143
00:05:53,915 --> 00:05:57,230
Mutable is another word for
changeable, they can be changed.

144
00:05:57,230 --> 00:05:58,714
Meaning a list has three things,

145
00:05:58,714 --> 00:06:01,389
you can change this thing right
in the middle if you want.

146
00:06:01,389 --> 00:06:03,171
To take a look at what's not mutable,

147
00:06:03,171 --> 00:06:04,542
strings are not mutable.

148
00:06:04,542 --> 00:06:07,467
So, if I take a look at
assigning banana into fruit.

149
00:06:07,467 --> 00:06:09,861
Well fruit sub zero is a capital letter B.

150
00:06:09,861 --> 00:06:12,676
Could we imagine for a
moment that we could change

151
00:06:12,676 --> 00:06:15,318
fruit sub zero to lowercase b?

152
00:06:15,318 --> 00:06:16,837
Well this syntax would be

153
00:06:16,837 --> 00:06:18,642
how you would do it if you could do it,

154
00:06:18,642 --> 00:06:21,824
but it turns out that
strings are not mutable,

155
00:06:21,824 --> 00:06:24,547
meaning they're not changeable
once you create them.

156
00:06:24,547 --> 00:06:26,171
And that's why when we do things

157
00:06:26,171 --> 00:06:27,866
like lowercase or uppercase,

158
00:06:27,866 --> 00:06:30,248
we take a look at the fruit and we say

159
00:06:30,248 --> 00:06:32,062
give me a lowercase copy of that,

160
00:06:32,062 --> 00:06:33,951
and then we take the
return value from this

161
00:06:33,951 --> 00:06:35,332
and we store that in x.

162
00:06:35,332 --> 00:06:37,970
And that's how x becomes lowercase banana.

163
00:06:37,970 --> 00:06:40,241
But fruit is still the original one,

164
00:06:40,241 --> 00:06:42,300
so fruit has not changed.

165
00:06:42,300 --> 00:06:46,799
Compare and contrast
that with a list, though.

166
00:06:46,799 --> 00:06:49,750
Here we have a five item
list, 2, 14, 26, 41.

167
00:06:49,750 --> 00:06:53,740
And we're gonna do the sub 2 position,

168
00:06:53,740 --> 00:06:57,334
and the sub 2 is 0, 1, 2 so
it's that one right there,

169
00:06:57,334 --> 00:07:00,106
and we're going to assign a 28 into it.

170
00:07:00,106 --> 00:07:01,750
So that 28 is going in here.

171
00:07:01,750 --> 00:07:04,159
I'm gonna wipe that out and put 28 in.

172
00:07:04,159 --> 00:07:07,294
So we can do item assignment
in lists by putting

173
00:07:07,294 --> 00:07:10,415
a bracket syntax on the
left hand side to say

174
00:07:10,415 --> 00:07:12,252
don't just put it in the variable,

175
00:07:12,252 --> 00:07:14,381
put it within this position
within the variable,

176
00:07:14,381 --> 00:07:15,916
so that's what that's doing.

177
00:07:15,916 --> 00:07:17,546
And when you print that out, the 28,

178
00:07:17,546 --> 00:07:19,134
everything else is unchanged,

179
00:07:19,134 --> 00:07:20,645
meaning the whole list is there.

180
00:07:20,645 --> 00:07:22,399
There could be a thousand
items in the list,

181
00:07:22,399 --> 00:07:26,401
and then you're changing the second one.

182
00:07:26,401 --> 00:07:28,030
We have a function called len,

183
00:07:28,030 --> 00:07:30,783
we've been using this
len function all along

184
00:07:30,783 --> 00:07:32,714
to take a look at how strings are.

185
00:07:32,714 --> 00:07:34,511
It counts the number of
characters in the string,

186
00:07:34,511 --> 00:07:36,265
so that's a 9 character string.

187
00:07:36,265 --> 00:07:38,036
If we have items in a list,

188
00:07:38,036 --> 00:07:40,033
len tell us how many items there are.

189
00:07:40,033 --> 00:07:41,845
It's not like how many
characters there are,

190
00:07:41,845 --> 00:07:43,480
it's the number of things.

191
00:07:43,480 --> 00:07:45,674
And each thing, doesn't
have to be a number,

192
00:07:45,674 --> 00:07:48,060
it could be a number, a
string, or even another list,

193
00:07:48,060 --> 00:07:52,227
and len is the way to say, hey
how many things are in there?

194
00:07:53,564 --> 00:07:56,623
There's a function that
returns a list of numbers,

195
00:07:56,623 --> 00:07:58,803
and we use it, as we'll see in a second,

196
00:07:58,803 --> 00:08:01,261
to construct specialized
loops to go through lists.

197
00:08:01,261 --> 00:08:03,057
So let's take a look
at this range function

198
00:08:03,057 --> 00:08:04,185
just for a minute.

199
00:08:04,185 --> 00:08:06,007
So, range takes as its parameter

200
00:08:06,007 --> 00:08:08,661
the number of numbers
that you want returned.

201
00:08:08,661 --> 00:08:12,995
So I would like a four item
list with the numbers 0

202
00:08:12,995 --> 00:08:14,970
up to but not including 4.

203
00:08:14,970 --> 00:08:17,984
And so it just turns out
that that is really useful

204
00:08:17,984 --> 00:08:21,681
for constructing for loops
that are counted for loops,

205
00:08:21,681 --> 00:08:24,056
that go to zero to the one to the two,

206
00:08:24,056 --> 00:08:28,223
as compared to the definite
loops that go through each one.

207
00:08:29,765 --> 00:08:32,079
And so it's a common thing to say okay,

208
00:08:32,079 --> 00:08:34,212
we know how many things are in this list.

209
00:08:34,212 --> 00:08:35,771
There are three friends.

210
00:08:35,771 --> 00:08:38,296
And if I put, combine range and len,

211
00:08:38,296 --> 00:08:40,520
so I take len friends which is 3

212
00:08:40,520 --> 00:08:44,081
and then I take range
sub 3, I get 0, 1, and 2.

213
00:08:44,081 --> 00:08:45,809
And so the interesting thing is

214
00:08:45,809 --> 00:08:47,756
this zero corresponds to the first one,

215
00:08:47,756 --> 00:08:49,565
1 corresponds to the second one,

216
00:08:49,565 --> 00:08:52,429
and 2 corresponds to the third one, okay?

217
00:08:52,429 --> 00:08:56,261
And so, we'll use this to construct loops.

218
00:08:56,261 --> 00:08:58,808
Especially when we need to go through,

219
00:08:58,808 --> 00:09:02,010
we need to go through an array

220
00:09:02,010 --> 00:09:04,361
and remember what position we're at.

221
00:09:04,361 --> 00:09:07,969
And so here's just an example
of two different loops.

222
00:09:07,969 --> 00:09:10,368
This is a for loop that's just gonna go

223
00:09:10,368 --> 00:09:12,269
through whatever's in this list.

224
00:09:12,269 --> 00:09:15,046
So friend is just gonna take
on the successive values.

225
00:09:15,046 --> 00:09:17,328
And so it's gonna print
out these three things,

226
00:09:17,328 --> 00:09:18,805
just as you would expect.

227
00:09:18,805 --> 00:09:20,344
And if you don't need to,

228
00:09:20,344 --> 00:09:22,448
while you're going through
the loop, know the position,

229
00:09:22,448 --> 00:09:24,685
your relative position
from the top in the loop,

230
00:09:24,685 --> 00:09:25,709
that's okay.

231
00:09:25,709 --> 00:09:28,830
But sometimes you want a
little more sophisticated loop.

232
00:09:28,830 --> 00:09:31,747
And instead, you want to be able to

233
00:09:32,873 --> 00:09:35,622
loop through where you know the position.

234
00:09:35,622 --> 00:09:37,183
And so what we do instead is,

235
00:09:37,183 --> 00:09:39,378
instead of looping
through that list itself,

236
00:09:39,378 --> 00:09:43,872
we do range len friends,
which gives us 0, 1, 2.

237
00:09:43,872 --> 00:09:48,479
And then i takes on the
successive value 0, 1, and then 2.

238
00:09:48,479 --> 00:09:50,607
So this loop is gonna run four times

239
00:09:50,607 --> 00:09:52,199
and i is 0 the first time.

240
00:09:52,199 --> 00:09:54,643
And we might even just look up the value

241
00:09:54,643 --> 00:09:56,875
inside that sub zero value.

242
00:09:56,875 --> 00:09:58,800
So we get Joseph the first time,

243
00:09:58,800 --> 00:10:00,870
so prints out Happy New Year, Joseph.

244
00:10:00,870 --> 00:10:02,975
Goes and i becomes 1 now,

245
00:10:02,975 --> 00:10:06,044
so gives us Glenn and that
prints out, away you go.

246
00:10:06,044 --> 00:10:08,920
So if you look at these two loops,

247
00:10:08,920 --> 00:10:10,576
if you look at these two loops,

248
00:10:10,576 --> 00:10:12,436
they really do the exact same thing.

249
00:10:12,436 --> 00:10:14,721
The only difference is
this we allowed the for

250
00:10:14,721 --> 00:10:17,307
to find it's way with the
iteration variable through,

251
00:10:17,307 --> 00:10:19,937
and here we created our
own i variable that went

252
00:10:19,937 --> 00:10:21,671
through the positions,

253
00:10:21,671 --> 00:10:24,006
and they're dense,
there's no gaps in here.

254
00:10:24,006 --> 00:10:27,422
So it's zero through two
that it goes through.

255
00:10:27,422 --> 00:10:29,488
So these two are equivalent.

256
00:10:29,488 --> 00:10:32,257
There'll be times when you'll
want to use one and the other.

257
00:10:32,257 --> 00:10:35,369
I tend to prefer the first
one because it's prettier

258
00:10:35,369 --> 00:10:37,619
as long as it works for me.

259
00:10:39,658 --> 00:10:41,470
So that gets us started with loops,

260
00:10:41,470 --> 00:10:44,049
we'll be back in just a bit.

261
00:10:44,049 --> 00:10:47,049
(light piano music)

