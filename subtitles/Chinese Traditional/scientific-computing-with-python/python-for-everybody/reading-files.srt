1
00:00:00,119 --> 00:00:02,288
- Hello, and welcome to chapter seven.

2
00:00:02,288 --> 00:00:04,937
This is the chapter where it
all really starts to pay off.

3
00:00:04,937 --> 00:00:07,924
We have been learning bits and pieces

4
00:00:07,924 --> 00:00:11,416
and doing little two lines, three lines,

5
00:00:11,416 --> 00:00:13,298
four lines of code to learn

6
00:00:13,298 --> 00:00:15,335
the basic building blocks of Python

7
00:00:15,335 --> 00:00:18,414
and learn some of the syntax
and find lots of terms.

8
00:00:18,414 --> 00:00:21,988
But now we're actually going
to start doing something.

9
00:00:21,988 --> 00:00:25,905
So if you look at what
we've been doing so far,

10
00:00:27,096 --> 00:00:30,256
we're inside this little computer,

11
00:00:30,256 --> 00:00:32,834
Python says what next and
you give it it's command,

12
00:00:32,834 --> 00:00:34,715
and it does something and
you do something else,

13
00:00:34,715 --> 00:00:37,263
and does something, and you
do this three or four times,

14
00:00:37,263 --> 00:00:40,495
unless you write a loop and
then it goes 10-20 times,

15
00:00:40,495 --> 00:00:41,624
and that's it.

16
00:00:41,624 --> 00:00:44,335
And maybe we write a
thing that reads something

17
00:00:44,335 --> 00:00:46,605
from our keyboard,
gives us something back,

18
00:00:46,605 --> 00:00:48,340
and then we write something
that prints something out,

19
00:00:48,340 --> 00:00:50,315
print a few foot things out.

20
00:00:50,315 --> 00:00:53,273
And so we've been pretty
much using the keyboard,

21
00:00:53,273 --> 00:00:56,445
the screen, the CPU, and the memory.

22
00:00:56,445 --> 00:00:58,925
That's kinda where we've been living.

23
00:00:58,925 --> 00:01:01,468
While it's important to talk
to the keyboard and the screen,

24
00:01:01,468 --> 00:01:06,010
the real world is things like
databases that live out here,

25
00:01:06,010 --> 00:01:07,594
files that live on our systems,

26
00:01:07,594 --> 00:01:09,862
and connecting to the network,

27
00:01:09,862 --> 00:01:12,485
and reading data from the network.

28
00:01:12,485 --> 00:01:14,409
And so that's what we're
starting to do right now,

29
00:01:14,409 --> 00:01:18,984
is we're starting to be able
to work outside our code,

30
00:01:18,984 --> 00:01:21,708
and create things that are permanent.

31
00:01:21,708 --> 00:01:23,738
And so we're gonna be talking initially,

32
00:01:23,738 --> 00:01:25,276
we're gonna work on files.

33
00:01:25,276 --> 00:01:27,379
We'll later talk to
databases and the network

34
00:01:27,379 --> 00:01:30,982
and other stuff, but for now,
we are talking about files.

35
00:01:30,982 --> 00:01:33,897
And so really kinda, we're
stepping out a little bit,

36
00:01:33,897 --> 00:01:36,083
and reading things that are permanent,

37
00:01:36,083 --> 00:01:39,049
and creating things that are permanent.

38
00:01:39,049 --> 00:01:41,387
The kinds of files that we're
going to talk about mostly

39
00:01:41,387 --> 00:01:44,516
are text files, and you can think of these

40
00:01:44,516 --> 00:01:47,283
as a sequence of lines in a file

41
00:01:47,283 --> 00:01:49,536
that are easily read by Python.

42
00:01:49,536 --> 00:01:52,121
You've been making text files all along.

43
00:01:52,121 --> 00:01:53,288
Your HELLO.PY,

44
00:01:55,946 --> 00:01:57,194
that file's a text file too.

45
00:01:57,194 --> 00:01:59,470
You're using a text editor
to create that file,

46
00:01:59,470 --> 00:02:01,250
you put your Python commands in the file,

47
00:02:01,250 --> 00:02:03,330
you run those files,
and that's what it is.

48
00:02:03,330 --> 00:02:06,858
And so a file can be thought
of as a bunch of lines,

49
00:02:06,858 --> 00:02:08,999
you know, one, two, three,
four, five, six, seven,

50
00:02:08,999 --> 00:02:10,180
a blank line here.

51
00:02:10,180 --> 00:02:11,680
Now it's possible,

52
00:02:12,819 --> 00:02:16,385
but the reality is is that
these are actually just lines

53
00:02:16,385 --> 00:02:18,516
and we have a special
character called the newline

54
00:02:18,516 --> 00:02:21,698
that we'll talk about in a second.

55
00:02:21,698 --> 00:02:25,103
So to read a file, you have
to call the open function.

56
00:02:25,103 --> 00:02:28,005
And open returns what
we call a file handle.

57
00:02:28,005 --> 00:02:30,065
Open doesn't actually read the file.

58
00:02:30,065 --> 00:02:34,232
Open makes it possible so
that you can read the file.

59
00:02:35,958 --> 00:02:38,404
So the parameters to open are,

60
00:02:38,404 --> 00:02:40,258
it takes one parameter that's required

61
00:02:40,258 --> 00:02:41,759
which is the name of the file.

62
00:02:41,759 --> 00:02:43,538
Another parameter that's
optional whether or not

63
00:02:43,538 --> 00:02:44,620
to read it or write it.

64
00:02:44,620 --> 00:02:47,011
If we're reading the
file, it doesn't harm it.

65
00:02:47,011 --> 00:02:48,116
You can read it over and over.

66
00:02:48,116 --> 00:02:50,503
If you write it, if there's
already data in the file,

67
00:02:50,503 --> 00:02:52,157
it truncates it and writes something.

68
00:02:52,157 --> 00:02:53,650
And we're not gonna really write files.

69
00:02:53,650 --> 00:02:54,966
We're mostly gonna read them.

70
00:02:54,966 --> 00:02:57,589
And so open sort of,
you pass it in a file,

71
00:02:57,589 --> 00:02:59,229
it gives you back this file handle

72
00:02:59,229 --> 00:03:01,919
and then you have a
variable in what you stored.

73
00:03:01,919 --> 00:03:05,868
I often call it fhand to be pneumonic.

74
00:03:05,868 --> 00:03:08,228
You'll see my code, I
use fhand all the time

75
00:03:08,228 --> 00:03:11,076
to indicate that that is a file handle.

76
00:03:11,076 --> 00:03:15,771
And so if we were to run
this in interactive mode,

77
00:03:15,771 --> 00:03:19,767
we'll open mbox.txt,
and that is a function

78
00:03:19,767 --> 00:03:22,421
built into Python, and then
it gives us back a handle.

79
00:03:22,421 --> 00:03:23,731
Does not give the data.

80
00:03:23,731 --> 00:03:26,981
And you can kinda see this when
we print out the file handle

81
00:03:26,981 --> 00:03:28,293
using the print statement.

82
00:03:28,293 --> 00:03:31,015
It doesn't print the lines
that are in the file.

83
00:03:31,015 --> 00:03:32,877
The lines that are in the
file are sort of out there.

84
00:03:32,877 --> 00:03:36,391
There could be 10 million
lines for all we know.

85
00:03:36,391 --> 00:03:38,412
Lines in the file.

86
00:03:38,412 --> 00:03:41,575
The handles like a little
opening outside your program,

87
00:03:41,575 --> 00:03:43,770
and you can talk to the file by opening it

88
00:03:43,770 --> 00:03:46,469
and you can read stuff, if
you're writing to the file,

89
00:03:46,469 --> 00:03:47,534
you could write stuff,

90
00:03:47,534 --> 00:03:49,728
and then you close the file
to shut the handle down.

91
00:03:49,728 --> 00:03:53,430
But handle is a thing that
allows you to get to the file.

92
00:03:53,430 --> 00:03:56,200
It is not the file itself and
it's not the data in the file.

93
00:03:56,200 --> 00:03:59,479
It is just a wrapper
that kinda allows you.

94
00:03:59,479 --> 00:04:01,837
So if you print it out, it's
like that's the file we opened,

95
00:04:01,837 --> 00:04:04,093
we're reading it, and
encoding has to do with the

96
00:04:04,093 --> 00:04:06,444
different kinds of character
sets, which we talked about

97
00:04:06,444 --> 00:04:07,518
at the end of the last lecture,

98
00:04:07,518 --> 00:04:09,687
that Unicode character set, etc.

99
00:04:09,687 --> 00:04:12,333
UTF-8 is a great character set.

100
00:04:12,333 --> 00:04:15,558
It's probably the most
typical character set

101
00:04:15,558 --> 00:04:18,404
that you will run into,
although you can have

102
00:04:18,404 --> 00:04:19,641
different character sets of files,

103
00:04:19,641 --> 00:04:21,891
but most of them are UTF-8.

104
00:04:22,808 --> 00:04:26,171
So, of course, this is
Python, if you make a mistake,

105
00:04:26,171 --> 00:04:27,672
and there's a file that doesn't exist,

106
00:04:27,672 --> 00:04:30,589
we get a traceback and it blows up.

107
00:04:34,490 --> 00:04:36,668
I'll show you how in a
second, how to deal with that.

108
00:04:36,668 --> 00:04:38,429
Now, the newline character is

109
00:04:38,429 --> 00:04:41,262
an important part of file reading.

110
00:04:43,099 --> 00:04:45,537
In strings, we can put
the newline character in

111
00:04:45,537 --> 00:04:47,655
by this \n character.

112
00:04:47,655 --> 00:04:50,358
And the \n is the character that indicates

113
00:04:50,358 --> 00:04:53,169
that we're supposed to go to another line.

114
00:04:53,169 --> 00:04:54,480
Go to a new line.

115
00:04:54,480 --> 00:04:55,801
Go to a new line.

116
00:04:55,801 --> 00:04:57,155
And so what is this?

117
00:04:57,155 --> 00:05:01,785
Well that's a \n, that's a \n.

118
00:05:01,785 --> 00:05:04,109
And so, if we print it
out, we print it this way,

119
00:05:04,109 --> 00:05:05,877
we see that the \n is in there.

120
00:05:05,877 --> 00:05:07,031
This is how we type it.

121
00:05:07,031 --> 00:05:10,866
We actually type \n to Python to indicate

122
00:05:10,866 --> 00:05:14,021
that we're supposed to put that there.

123
00:05:14,021 --> 00:05:15,659
But if we do a print statement,

124
00:05:15,659 --> 00:05:17,613
it actually interprets the \n,

125
00:05:17,613 --> 00:05:20,489
and so the \n causes kinda
this movement to the beginning.

126
00:05:20,489 --> 00:05:24,309
Now the print actually, at the
end of this, adds another \n.

127
00:05:24,309 --> 00:05:28,010
So the \n that we put in by
putting it into this string,

128
00:05:28,010 --> 00:05:32,936
is that one, and then print
always puts a \n at the end.

129
00:05:32,936 --> 00:05:35,878
There's actually a way to
override that \n behavior

130
00:05:35,878 --> 00:05:37,905
by putting something
on the print statement,

131
00:05:37,905 --> 00:05:39,587
which we'll talk about later.

132
00:05:39,587 --> 00:05:44,520
Now, it's important to note
that the \n is one character,

133
00:05:44,520 --> 00:05:48,775
and so even though this X\nY prints this,

134
00:05:48,775 --> 00:05:51,456
and then print adds another
newline to go down to here,

135
00:05:51,456 --> 00:05:54,446
if you ask how many characters,
what is the length of this,

136
00:05:54,446 --> 00:05:55,892
well it's only three.

137
00:05:55,892 --> 00:05:58,749
That's because that's a
character, \n's a character,

138
00:05:58,749 --> 00:06:00,248
and the Y is a character.

139
00:06:00,248 --> 00:06:01,813
So it's a three character string.

140
00:06:01,813 --> 00:06:04,236
So the \n is a character like all the rest

141
00:06:04,236 --> 00:06:08,403
of the characters, but we
encode it by typing \n.

142
00:06:10,127 --> 00:06:12,706
It's called an escape, where
the backslash is the escape,

143
00:06:12,706 --> 00:06:16,513
\n is a way to say newline,
cause we can't see it,

144
00:06:16,513 --> 00:06:18,893
it's a way for us to encode in a string

145
00:06:18,893 --> 00:06:22,611
this non-printable character,
this invisible character.

146
00:06:22,611 --> 00:06:25,868
The white space, it's part of white space.

147
00:06:25,868 --> 00:06:27,528
So as we're reading through the file,

148
00:06:27,528 --> 00:06:29,212
we can think of it as a sequence of lines,

149
00:06:29,212 --> 00:06:31,022
and we can read these a line at a time.

150
00:06:31,022 --> 00:06:34,231
We can also read them a
character at a time if we want.

151
00:06:34,231 --> 00:06:36,153
But it's more common
to say read this line,

152
00:06:36,153 --> 00:06:39,784
read the next line, read the
line after that, etc, etc, etc.

153
00:06:39,784 --> 00:06:41,912
But the way to best thing about this,

154
00:06:41,912 --> 00:06:45,433
it doesn't really matter, you
can think about it as lines,

155
00:06:45,433 --> 00:06:47,955
and we will in most of the
programs that we write,

156
00:06:47,955 --> 00:06:52,199
but realize that the way when we see this

157
00:06:52,199 --> 00:06:55,885
we see it like this, it
comes back to the beginning,

158
00:06:55,885 --> 00:06:56,866
it comes back to the beginning,

159
00:06:56,866 --> 00:06:59,959
there's a character in the
file at each of these points

160
00:06:59,959 --> 00:07:01,212
to say go back to the beginning.

161
00:07:01,212 --> 00:07:04,243
It's like hitting the
enter key on your computer.

162
00:07:04,243 --> 00:07:05,525
And that is a newline.

163
00:07:05,525 --> 00:07:07,692
So you have to think that in the file,

164
00:07:07,692 --> 00:07:10,891
in order for your text editor and Python

165
00:07:10,891 --> 00:07:12,732
and everybody to know where the lines end,

166
00:07:12,732 --> 00:07:16,417
you put newline's in the file
and that's another character.

167
00:07:16,417 --> 00:07:19,493
So, this looks like an empty line,

168
00:07:19,493 --> 00:07:21,448
this line here looks like an empty line,

169
00:07:21,448 --> 00:07:22,813
but really it has a single character,

170
00:07:22,813 --> 00:07:24,362
and the character is a newline.

171
00:07:24,362 --> 00:07:25,926
And it turns out that in a bit,

172
00:07:25,926 --> 00:07:27,624
we're gonna need to keep track of the fact

173
00:07:27,624 --> 00:07:31,379
that every line is ended by a newline.

174
00:07:31,379 --> 00:07:33,087
So up next, I'm gonna talk a little bit

175
00:07:33,087 --> 00:07:35,913
about how to read files in Python.

176
00:07:35,913 --> 00:07:38,746
(classical music)

