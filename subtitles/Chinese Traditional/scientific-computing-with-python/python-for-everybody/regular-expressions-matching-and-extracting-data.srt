1
00:00:00,441 --> 00:00:02,394
- So now we're going to
move from merely matching

2
00:00:02,394 --> 00:00:05,082
to matching and extracting
so we're going to say hey,

3
00:00:05,082 --> 00:00:07,335
I would like to not only
have you take this template,

4
00:00:07,335 --> 00:00:09,016
this little pattern, this string pattern,

5
00:00:09,016 --> 00:00:12,000
regular expression pattern,
run it across the line.

6
00:00:12,000 --> 00:00:14,473
I want you to give me
all the ones that match,

7
00:00:14,473 --> 00:00:15,831
and I want a list of those,

8
00:00:15,831 --> 00:00:17,979
and that's what we're
going to use the find all,

9
00:00:17,979 --> 00:00:19,890
so search gives a true/false,

10
00:00:19,890 --> 00:00:22,874
find all gives a list of
all the strings that match.

11
00:00:22,874 --> 00:00:23,904
So if there's four of them,

12
00:00:23,904 --> 00:00:25,258
you'll get four things in the list.

13
00:00:25,258 --> 00:00:27,768
If there's nothing that matches,
you'll get an empty list.

14
00:00:27,768 --> 00:00:30,976
So, let's take a look at
what we got going here.

15
00:00:30,976 --> 00:00:34,177
So, instead of calling
search, we'd call find all,

16
00:00:34,177 --> 00:00:36,601
we still pass in the string
that we're looking through,

17
00:00:36,601 --> 00:00:39,649
and then we have our
little template pattern,

18
00:00:39,649 --> 00:00:43,164
and this is a new bit
of regular expression.

19
00:00:43,164 --> 00:00:46,354
Any little bracket
operation, square bracket

20
00:00:46,354 --> 00:00:49,145
is one character, that's just a character,

21
00:00:49,145 --> 00:00:53,666
but then in between here is
a set of allowed characters.

22
00:00:53,666 --> 00:00:56,930
So zero dash nine means a single digit,

23
00:00:56,930 --> 00:00:58,194
zero, one, two, three, four, five,

24
00:00:58,194 --> 00:01:00,424
six, seven, eight or nine.

25
00:01:00,424 --> 00:01:02,408
But that's really one character.

26
00:01:02,408 --> 00:01:05,851
And then we have, so that's one character.

27
00:01:05,851 --> 00:01:07,448
And then when the plus applies to that,

28
00:01:07,448 --> 00:01:10,603
which means if we look
at this whole thing,

29
00:01:10,603 --> 00:01:13,403
this whole thing says one or more digits,

30
00:01:13,403 --> 00:01:16,043
that's the code we write
in a regular expression,

31
00:01:16,043 --> 00:01:17,539
that says one or more digits.

32
00:01:17,539 --> 00:01:18,411
And we're just gonna use that

33
00:01:18,411 --> 00:01:20,387
in our regular expression by itself,

34
00:01:20,387 --> 00:01:23,066
so we're going to look for any string

35
00:01:23,066 --> 00:01:25,738
that's one or more
digits, and pull it out,

36
00:01:25,738 --> 00:01:26,649
and give it back to me.

37
00:01:26,649 --> 00:01:28,626
So it's gonna look, so
that's my little template,

38
00:01:28,626 --> 00:01:30,900
stamp, stamp, stamp, stamp, opp, got it.

39
00:01:30,900 --> 00:01:32,091
Stamp, stamp, stamp, stamp, stamp, stamp,

40
00:01:32,091 --> 00:01:34,234
stamp, stamp, stamp, stamp, oop got it.

41
00:01:34,234 --> 00:01:36,057
Stamp, stamp, stamp, stamp, got it.

42
00:01:36,057 --> 00:01:38,732
So what we get back after we ask find all

43
00:01:38,732 --> 00:01:41,762
to find all of the one
or more digit strings,

44
00:01:41,762 --> 00:01:45,586
is two, nine, and 42, so
it actually parsed it,

45
00:01:45,586 --> 00:01:47,523
it split it, it found
all these things and said

46
00:01:47,523 --> 00:01:50,068
I found them all for
you, and here they are.

47
00:01:50,068 --> 00:01:54,554
Two, 19, and 42, so it's
a list of three strings,

48
00:01:54,554 --> 00:01:55,530
'cause that's how many you found.

49
00:01:55,530 --> 00:01:56,859
Now it might've found none,

50
00:01:56,859 --> 00:01:59,490
and we've got an empty list at that point.

51
00:01:59,490 --> 00:02:01,636
But it found some.

52
00:02:01,636 --> 00:02:05,363
Okay, so just as an example,
you know we did this thing,

53
00:02:05,363 --> 00:02:08,588
we get two, 19, and
42, but if I said this,

54
00:02:08,588 --> 00:02:12,755
that basically is a upper-case
vowel a, e, i, o, or u,

55
00:02:13,996 --> 00:02:18,259
so that's one letter,
and that's one or more.

56
00:02:18,259 --> 00:02:20,386
So it's saying you know, something like a,

57
00:02:20,386 --> 00:02:24,553
a would match, e, i would
match, o, o would match.

58
00:02:25,859 --> 00:02:27,387
But if you look now,
it's saying okay that's,

59
00:02:27,387 --> 00:02:30,580
I'm looking for one or
more, minimum one or more

60
00:02:30,580 --> 00:02:34,116
upper-case a, e, i, o, u
is a set of characters,

61
00:02:34,116 --> 00:02:36,506
one or more upper-case letters,

62
00:02:36,506 --> 00:02:38,314
and so it says like look, you find,

63
00:02:38,314 --> 00:02:39,698
oop there's an upper case, but it's an M,

64
00:02:39,698 --> 00:02:42,027
no, no, no, no, upper-case,
no upper-case, no upper-case,

65
00:02:42,027 --> 00:02:46,267
no upper-case, found nothing,
did not find anything,

66
00:02:46,267 --> 00:02:48,898
and so it gives us back an empty list,

67
00:02:48,898 --> 00:02:51,731
and so it's like find all
the things that match this,

68
00:02:51,731 --> 00:02:53,275
and the answer is, none match,

69
00:02:53,275 --> 00:02:55,769
here's your list of nothing okay?

70
00:02:55,769 --> 00:02:57,162
And so that's, and so you have to check,

71
00:02:57,162 --> 00:02:59,036
that's how you have to check,
even if you've got something,

72
00:02:59,036 --> 00:03:00,850
'cause it's not gonna return you false,

73
00:03:00,850 --> 00:03:04,169
it returns you a list with no items in it.

74
00:03:04,169 --> 00:03:07,833
Now, the way it works,
like I said it sort of

75
00:03:07,833 --> 00:03:11,817
is taking this template and
stamping it across the line,

76
00:03:11,817 --> 00:03:13,185
scamping across the characters.

77
00:03:13,185 --> 00:03:15,151
Now, there might, there's a behavior

78
00:03:15,151 --> 00:03:17,349
that might not be intuitive you,

79
00:03:17,349 --> 00:03:19,129
intuitive to you at the very beginning,

80
00:03:19,129 --> 00:03:21,937
but the notion of what
we call greedy matching,

81
00:03:21,937 --> 00:03:24,026
and that is, when it can match

82
00:03:24,026 --> 00:03:26,439
more than one possible string,

83
00:03:26,439 --> 00:03:29,055
overlapping string, it chooses the largest

84
00:03:29,055 --> 00:03:30,441
of the overlapping strings,

85
00:03:30,441 --> 00:03:33,112
and so the easiest way to
show this with an example,

86
00:03:33,112 --> 00:03:35,673
and we're saying I want
something that starts with an F,

87
00:03:35,673 --> 00:03:39,194
with one or more characters,
and ends with a colon.

88
00:03:39,194 --> 00:03:41,418
So that's there, that's my little stamp,

89
00:03:41,418 --> 00:03:42,663
that's my template.

90
00:03:42,663 --> 00:03:45,465
So it starts with an F, good, that's good.

91
00:03:45,465 --> 00:03:47,104
One or more characters,
duh, duh, duh, duh, duh,

92
00:03:47,104 --> 00:03:50,606
have a colon, that's, so
that could be from colon.

93
00:03:50,606 --> 00:03:51,817
That would match.

94
00:03:51,817 --> 00:03:53,202
But look, I've got another colon here,

95
00:03:53,202 --> 00:03:54,530
and this is just continuing on

96
00:03:54,530 --> 00:03:56,834
with one or more characters and this,

97
00:03:56,834 --> 00:03:59,098
so the question is do we get this,

98
00:03:59,098 --> 00:04:01,193
or do we get this part right?

99
00:04:01,193 --> 00:04:03,559
And the answer is with greedy matching,

100
00:04:03,559 --> 00:04:06,664
is we get the larger of the two, okay?

101
00:04:06,664 --> 00:04:09,961
And so what you get back is
somewhat counter-intuitive.

102
00:04:09,961 --> 00:04:12,327
You get the whole thing
is the match from colon

103
00:04:12,327 --> 00:04:15,369
using the, we could've got from colon,

104
00:04:15,369 --> 00:04:17,584
but the reason it picks
this, is this one's longer,

105
00:04:17,584 --> 00:04:19,415
so any time it has a choice,

106
00:04:19,415 --> 00:04:22,126
it picks the longer one, and
that's what greedy is meaning,

107
00:04:22,126 --> 00:04:24,534
it'd probably be better
described as larger

108
00:04:24,534 --> 00:04:28,701
or tending toward the longest
string or something like that.

109
00:04:30,000 --> 00:04:32,664
So you can of course, suppress
this behavior like everything

110
00:04:32,664 --> 00:04:34,616
in programming regular expressions.

111
00:04:34,616 --> 00:04:37,425
You simply add another character,

112
00:04:37,425 --> 00:04:41,233
and so now it's going to
say I would like to start

113
00:04:41,233 --> 00:04:43,825
with the letter F, that's any character

114
00:04:43,825 --> 00:04:45,951
one or more times and
then this question mark.

115
00:04:45,951 --> 00:04:47,396
This is still one, you know,

116
00:04:47,396 --> 00:04:50,146
one little thing non-greedy okay?

117
00:04:52,259 --> 00:04:54,982
And so that just says do it not greedy,

118
00:04:54,982 --> 00:04:58,545
which just means that it prefers
the shorter of the strings,

119
00:04:58,545 --> 00:05:02,271
and so now it could still match
this string or this string,

120
00:05:02,271 --> 00:05:04,361
but because its been
told to not be greedy,

121
00:05:04,361 --> 00:05:05,937
it chooses this string instead,

122
00:05:05,937 --> 00:05:07,185
and that's the string that we get,

123
00:05:07,185 --> 00:05:08,754
and so that's the not greedy,

124
00:05:08,754 --> 00:05:11,263
and you just add the question
mark after the asterisk,

125
00:05:11,263 --> 00:05:13,484
so it's usually an asterisk question mark,

126
00:05:13,484 --> 00:05:15,600
or a plus question mark.

127
00:05:15,600 --> 00:05:17,934
That's a two-thing, that's
zero or more characters,

128
00:05:17,934 --> 00:05:21,264
non-greedy, and that's one or
more characters non-greedy.

129
00:05:21,264 --> 00:05:24,091
Actually most of the time the,

130
00:05:24,091 --> 00:05:26,348
it seems to me that
the non-greedy would be

131
00:05:26,348 --> 00:05:28,754
the more reasonable default,
but that's not how it is.

132
00:05:28,754 --> 00:05:31,591
Greedy is the default, and
non-greedy is optional.

133
00:05:31,591 --> 00:05:35,761
Now, we can play some
more with this stuff okay?

134
00:05:35,761 --> 00:05:39,381
And so, let's take a look
at this little example,

135
00:05:39,381 --> 00:05:44,153
where we have a non-blank
character as back-slash capital S,

136
00:05:44,153 --> 00:05:46,633
one or more of those non-blank characters,

137
00:05:46,633 --> 00:05:49,110
followed by an at sign,
and then again one or more

138
00:05:49,110 --> 00:05:50,272
non-blank characters.

139
00:05:50,272 --> 00:05:52,315
So this is looking for
strings that have an at sign

140
00:05:52,315 --> 00:05:54,553
with non-blank characters on both sides.

141
00:05:54,553 --> 00:05:57,802
This is an example of where
it sort of comes to this at,

142
00:05:57,802 --> 00:06:00,289
and it goes this way, and it
does it in a greedy manner.

143
00:06:00,289 --> 00:06:03,680
If you told it to not be
greedy, it would give you this,

144
00:06:03,680 --> 00:06:06,058
these three characters, but
we're telling it to go greedy,

145
00:06:06,058 --> 00:06:09,449
so it goes all the way to
here and stops at this blank,

146
00:06:09,449 --> 00:06:11,114
and then stops at this blank.

147
00:06:11,114 --> 00:06:12,516
And so that's a nice little thing,

148
00:06:12,516 --> 00:06:17,170
find the at signs, go to
the first blank, blank,

149
00:06:17,170 --> 00:06:18,579
and pull that stuff out, and so that,

150
00:06:18,579 --> 00:06:21,394
with one little match,
you've pulled this thing out.

151
00:06:21,394 --> 00:06:25,699
Now of course we've done that
before with other techniques.

152
00:06:25,699 --> 00:06:29,449
So that's just another
way to pull stuff out.

153
00:06:30,586 --> 00:06:33,503
Now if we, we get this whole thing,

154
00:06:34,961 --> 00:06:37,523
but what if that's not
exactly what we wanted,

155
00:06:37,523 --> 00:06:39,523
and we can tell, we can,

156
00:06:41,838 --> 00:06:44,555
we can give it a matching
string that's different

157
00:06:44,555 --> 00:06:46,986
than the extracting string
by adding parentheses,

158
00:06:46,986 --> 00:06:51,427
and so here's another example
where we basically say

159
00:06:51,427 --> 00:06:55,467
this is our string we wanna
match from at the beginning,

160
00:06:55,467 --> 00:06:58,948
followed by a space, followed by,

161
00:06:58,948 --> 00:07:01,014
ignore the parentheses for the minute,

162
00:07:01,014 --> 00:07:03,067
one or more non-blank characters,
followed by an at sign,

163
00:07:03,067 --> 00:07:05,395
followed by one or more
non-blank characters.

164
00:07:05,395 --> 00:07:07,876
So this is also going
to, if there's no from,

165
00:07:07,876 --> 00:07:09,813
it's not gonna be looking for that right?

166
00:07:09,813 --> 00:07:12,587
So it demands the from is
here, so it matches that,

167
00:07:12,587 --> 00:07:14,851
and the spaces demand it as well.

168
00:07:14,851 --> 00:07:17,395
And then it says oh,
non-blank characters great,

169
00:07:17,395 --> 00:07:19,642
I got an at sign, great,
now blank characters,

170
00:07:19,642 --> 00:07:23,393
oops stop there, and so
this is what's gonna match.

171
00:07:23,393 --> 00:07:25,235
Now the key is that we
don't actually want that

172
00:07:25,235 --> 00:07:26,908
back in our extraction.

173
00:07:26,908 --> 00:07:29,026
What we really want back in our extraction

174
00:07:29,026 --> 00:07:30,835
is this part right here.

175
00:07:30,835 --> 00:07:33,292
So what we do is we put parentheses in.

176
00:07:33,292 --> 00:07:36,982
Parentheses don't, our code, their code,

177
00:07:36,982 --> 00:07:38,589
in the regular expression world,

178
00:07:38,589 --> 00:07:40,375
parentheses say start your extraction

179
00:07:40,375 --> 00:07:41,789
and end your extraction.

180
00:07:41,789 --> 00:07:44,638
And so when you do this
with a parenthesis,

181
00:07:44,638 --> 00:07:47,686
when you do it you know,
without a parenthesis,

182
00:07:47,686 --> 00:07:50,245
you get, you get the whole from right?

183
00:07:50,245 --> 00:07:52,078
Without a parenthesis,

184
00:07:53,222 --> 00:07:57,392
oh wait no, okay that
doesn't have a from in it so,

185
00:07:57,392 --> 00:08:00,183
but if you do that with a parenthesis,

186
00:08:00,183 --> 00:08:04,480
you match the from, but
you only get this bit

187
00:08:04,480 --> 00:08:05,713
to come out as well,

188
00:08:05,713 --> 00:08:09,737
so you can add this to make
the matching part more precise,

189
00:08:09,737 --> 00:08:12,047
but without changing
what you get returned,

190
00:08:12,047 --> 00:08:14,143
and you specify what
you wanna get returned

191
00:08:14,143 --> 00:08:15,893
with the parentheses.

192
00:08:16,823 --> 00:08:20,358
So next I wanna show you just
a couple of different ways

193
00:08:20,358 --> 00:08:22,858
to use these new-found skills.

194
00:08:25,545 --> 00:08:27,962
(rock music)

