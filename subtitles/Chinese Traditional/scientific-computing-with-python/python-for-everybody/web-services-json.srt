1
00:00:00,369 --> 00:00:01,991
- So now we're going
to talk about the other

2
00:00:01,991 --> 00:00:05,065
serialization format,
JavaScript Object Notation.

3
00:00:05,065 --> 00:00:07,004
Chances are good as you go out there,

4
00:00:07,004 --> 00:00:08,513
you will very likely encounter

5
00:00:08,513 --> 00:00:10,371
more JSON than you will XML.

6
00:00:10,371 --> 00:00:14,306
Not that XML is bad,
XML is better for rich

7
00:00:14,306 --> 00:00:16,117
and hierarchical documents.

8
00:00:16,117 --> 00:00:19,205
Where as JSON is best
for just pulling data

9
00:00:19,205 --> 00:00:21,457
out of a system and moving
it between two systems

10
00:00:21,457 --> 00:00:23,374
with a minimum of fuss.

11
00:00:24,580 --> 00:00:26,496
This is Douglas Crockford.

12
00:00:26,496 --> 00:00:27,840
I have a great interview from him

13
00:00:27,840 --> 00:00:30,928
and he's a funny guy, very very smart.

14
00:00:30,928 --> 00:00:33,766
He claims he didn't invent
JSON, he discovered it,

15
00:00:33,766 --> 00:00:36,064
because it really is based on

16
00:00:36,064 --> 00:00:38,410
the literal notation for JavaScript.

17
00:00:38,410 --> 00:00:40,372
And it actually looks
a lot like the Python

18
00:00:40,372 --> 00:00:44,389
literal notation for
objects and for lists.

19
00:00:44,389 --> 00:00:47,470
Now Douglas Crockford is
a quite a sense of humor.

20
00:00:47,470 --> 00:00:49,638
He wrote this book called
JavaScript the Good Parts.

21
00:00:49,638 --> 00:00:51,403
That's the little one right there.

22
00:00:51,403 --> 00:00:53,156
And then JavaScript
the Comprehensive Guide

23
00:00:53,156 --> 00:00:55,248
and the sense of humor
is all the stuff that's

24
00:00:55,248 --> 00:00:57,303
in JavaScript that's not too useful.

25
00:00:57,303 --> 00:00:59,602
And while this is sort
of a tongue in cheek

26
00:00:59,602 --> 00:01:01,564
it also is trying to say that JavaScript,

27
00:01:01,564 --> 00:01:03,085
what Crockford is really saying here is

28
00:01:03,085 --> 00:01:05,801
JavaScript is a great
language as long as you

29
00:01:05,801 --> 00:01:08,051
avoid the tricky bits and sort of keep it

30
00:01:08,051 --> 00:01:09,388
very very simple.

31
00:01:09,388 --> 00:01:12,093
And JavaScript is indeed a great language

32
00:01:12,093 --> 00:01:14,862
but JSON comes from JavaScript.

33
00:01:14,862 --> 00:01:17,567
You can read about JSON at json.org

34
00:01:17,567 --> 00:01:21,734
JSON is not a international
standard, it's not like an RFC.

35
00:01:22,742 --> 00:01:25,415
It really is, Douglas
Crockford decided to register

36
00:01:25,415 --> 00:01:28,956
json.org and typed in some
pages and people started

37
00:01:28,956 --> 00:01:30,686
reading it and people started using it.

38
00:01:30,686 --> 00:01:33,762
And partly that was because
it was truly derived from

39
00:01:33,762 --> 00:01:36,262
the JavaScript literal syntax.

40
00:01:39,428 --> 00:01:41,030
So we're all ready to code.

41
00:01:41,030 --> 00:01:45,372
Here is some Python that's
gonna process some JSON.

42
00:01:45,372 --> 00:01:47,996
Keep it straight, Python process JSON.

43
00:01:47,996 --> 00:01:50,991
So again I'm using the
triple quoted string here.

44
00:01:50,991 --> 00:01:52,985
Now you'll notice the
syntax that we are using is

45
00:01:52,985 --> 00:01:56,451
not angle brackets, but
instead curly braces.

46
00:01:56,451 --> 00:01:59,121
And so the curly brace, and
then within the curly brace

47
00:01:59,121 --> 00:02:01,743
you have key value pairs, "name" : "Chuck"

48
00:02:01,743 --> 00:02:05,516
in the key colon value and
both sides have quotes.

49
00:02:05,516 --> 00:02:08,187
You can also have objects within objects.

50
00:02:08,187 --> 00:02:11,460
Curly brace, key value
pairs, key value, key value.

51
00:02:11,460 --> 00:02:13,503
Looks a lot like Python.

52
00:02:13,503 --> 00:02:14,777
And then you can do this.

53
00:02:14,777 --> 00:02:17,700
So this is a structure
that has one key value pair

54
00:02:17,700 --> 00:02:18,533
that's a string.

55
00:02:18,533 --> 00:02:19,955
Another key value pair that's an object.

56
00:02:19,955 --> 00:02:21,928
Another key value pair that's an object.

57
00:02:21,928 --> 00:02:23,246
And then these are key values within

58
00:02:23,246 --> 00:02:25,086
those contained objects.

59
00:02:25,086 --> 00:02:26,753
So this is a string.

60
00:02:28,545 --> 00:02:30,798
That again probably was
retrieved across the network

61
00:02:30,798 --> 00:02:32,655
from some other place.

62
00:02:32,655 --> 00:02:35,732
And we're gonna pass that string into

63
00:02:35,732 --> 00:02:39,424
the JSON library loads, loads
stands for load from string.

64
00:02:39,424 --> 00:02:42,076
So it reads this, parses it,
looks at all the white space.

65
00:02:42,076 --> 00:02:44,607
White space again doesn't
matter too much here

66
00:02:44,607 --> 00:02:46,535
unless it's between double quotes.

67
00:02:46,535 --> 00:02:48,006
The white space doesn't matter.

68
00:02:48,006 --> 00:02:52,173
And so it parses it and then
returns us a dictionary.

69
00:02:53,138 --> 00:02:55,941
So the thing that's different about JSON

70
00:02:55,941 --> 00:02:58,826
is that it's structure in our presentation

71
00:02:58,826 --> 00:03:00,416
are simpler than XML.

72
00:03:00,416 --> 00:03:03,621
So in Python everything
either comes back as a

73
00:03:03,621 --> 00:03:06,372
dictionary or list, or a
dictionary within a dictionary,

74
00:03:06,372 --> 00:03:08,091
or a list within a dictionary.

75
00:03:08,091 --> 00:03:10,923
But it's all dictionaries,
it's not a separate structure

76
00:03:10,923 --> 00:03:14,708
that you have to do gets and
finds and find alls and lookups

77
00:03:14,708 --> 00:03:15,553
so it's right there.

78
00:03:15,553 --> 00:03:17,480
So when we get this back

79
00:03:17,480 --> 00:03:21,647
because this is a curly
brace, info is a dictionary.

80
00:03:24,841 --> 00:03:29,008
And so we can just use the
standard syntax of Python,

81
00:03:30,007 --> 00:03:31,065
info sub-name.

82
00:03:31,065 --> 00:03:32,978
Well that will bring,

83
00:03:32,978 --> 00:03:34,395
let's clear this.

84
00:03:37,819 --> 00:03:41,342
So info sub-name will go find Chuck.

85
00:03:41,342 --> 00:03:42,814
So if you can pair that with the XML

86
00:03:42,814 --> 00:03:44,544
that's just a lot easier.

87
00:03:44,544 --> 00:03:47,202
Now when we have info sub-email

88
00:03:47,202 --> 00:03:50,523
that's this thing, so info
sub-email is that thing,

89
00:03:50,523 --> 00:03:52,690
and then sub-hide is this.

90
00:03:54,122 --> 00:03:55,898
So that's what comes out here.

91
00:03:55,898 --> 00:03:59,337
'Kay so it's really a nested
dictionaries and lists,

92
00:03:59,337 --> 00:04:00,440
we haven't seen a list yet,

93
00:04:00,440 --> 00:04:04,756
but this is a set of nested
dictionaries that it parses.

94
00:04:04,756 --> 00:04:08,697
And it's equally simple in
other programming languages.

95
00:04:08,697 --> 00:04:10,624
This is a little more complex version

96
00:04:10,624 --> 00:04:12,958
where the outer element is

97
00:04:12,958 --> 00:04:17,526
a square bracket, which means
it's going to be a list.

98
00:04:17,526 --> 00:04:20,936
And so we have a list of
one comma, two things.

99
00:04:20,936 --> 00:04:24,103
So this is a list of two dictionaries.

100
00:04:25,035 --> 00:04:28,529
So there's two dictionaries
inside that list.

101
00:04:28,529 --> 00:04:32,837
So again we take this
string and we load it into,

102
00:04:32,837 --> 00:04:36,401
use the JSON parser to read
the string and give us back.

103
00:04:36,401 --> 00:04:40,357
In this case, info is a
list, it's got two items.

104
00:04:40,357 --> 00:04:43,375
If we printout info it'll give us two,

105
00:04:43,375 --> 00:04:45,756
and we're going to iterate through.

106
00:04:45,756 --> 00:04:48,948
And so if we're going to iterate through

107
00:04:48,948 --> 00:04:51,448
item is going to first be this

108
00:04:52,979 --> 00:04:55,359
and then it's going to iterate to this.

109
00:04:55,359 --> 00:04:56,842
And it's going to printout item some name,

110
00:04:56,842 --> 00:04:58,526
which is going to printout Chuck.

111
00:04:58,526 --> 00:05:02,415
Item sub-id which is
going to printout 001.

112
00:05:02,415 --> 00:05:05,736
Now you'll notice that
there is no attributes

113
00:05:05,736 --> 00:05:08,287
and that's 'cause JSON is simpler.

114
00:05:08,287 --> 00:05:11,572
But we can have the X
just as another item.

115
00:05:11,572 --> 00:05:15,357
So we say item sub-x and that's
going to print the two out.

116
00:05:15,357 --> 00:05:17,401
And then it will iterate to the next one

117
00:05:17,401 --> 00:05:20,024
and it'll printout the
same thing for those guys.

118
00:05:20,024 --> 00:05:22,607
And so, JSON is simpler because

119
00:05:24,015 --> 00:05:27,127
you can't represent as
complex a data structure

120
00:05:27,127 --> 00:05:29,100
or you have to compromise and map it

121
00:05:29,100 --> 00:05:30,830
into simpler data structure

122
00:05:30,830 --> 00:05:33,826
but then it is lists and dictionaries.

123
00:05:33,826 --> 00:05:35,997
And so once you've got it parsed

124
00:05:35,997 --> 00:05:39,830
it is easier to understand
and to make use of.

125
00:05:40,931 --> 00:05:41,871
So that was quick.

126
00:05:41,871 --> 00:05:45,122
So that's part of why
everyone likes JSON better,

127
00:05:45,122 --> 00:05:47,348
is once you have come up
with a format that you're

128
00:05:47,348 --> 00:05:48,460
going to send it back and forth,

129
00:05:48,460 --> 00:05:51,548
it's easy to make it and
it's easy to read it.

130
00:05:51,548 --> 00:05:52,880
Now what we're gonna talk about is

131
00:05:52,880 --> 00:05:54,525
sort of moving up a level.

132
00:05:54,525 --> 00:05:58,156
If you've got all these data
formats and URLs that you

133
00:05:58,156 --> 00:06:00,568
can hit to pull all
those data formats down,

134
00:06:00,568 --> 00:06:04,009
what approach do you do as you start to

135
00:06:04,009 --> 00:06:06,668
construct applications
that increasingly go from

136
00:06:06,668 --> 00:06:11,297
a single application to
a network application.

137
00:06:11,297 --> 00:06:15,464
("Soul and Mind" by E's Jammy Jams)

