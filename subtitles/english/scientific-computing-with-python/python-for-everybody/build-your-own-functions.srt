1
00:00:00,706 --> 00:00:01,965
- So welcome back we're going to continue

2
00:00:01,965 --> 00:00:06,049
and start talking about
building our own functions.

3
00:00:06,049 --> 00:00:07,611
So, again,

4
00:00:07,611 --> 00:00:10,397
we use the def keyword
to define a function,

5
00:00:10,397 --> 00:00:13,221
and then later we're going to invoke this.

6
00:00:13,221 --> 00:00:14,460
And there's a bit to it.

7
00:00:14,460 --> 00:00:16,338
We are defining the name of the function.

8
00:00:16,338 --> 00:00:17,874
In effect we're extending Python

9
00:00:17,874 --> 00:00:19,987
and creating new predefined things

10
00:00:19,987 --> 00:00:22,242
that we can use except it's our code.

11
00:00:22,242 --> 00:00:23,895
Starts with a def keyword,

12
00:00:23,895 --> 00:00:26,407
has some optional arguments
which we'll see in a bit,

13
00:00:26,407 --> 00:00:27,748
that's what the parentheses is,

14
00:00:27,748 --> 00:00:28,581
and then the name.

15
00:00:28,581 --> 00:00:30,613
And the function names
follow the same rules

16
00:00:30,613 --> 00:00:32,461
as the variable names.

17
00:00:32,461 --> 00:00:34,421
And then you have an indented block,

18
00:00:34,421 --> 00:00:35,557
whatever code you wanna do,

19
00:00:35,557 --> 00:00:37,083
and then you have a de-indented block

20
00:00:37,083 --> 00:00:39,837
and that sort of defines the essence.

21
00:00:39,837 --> 00:00:43,169
The key thing here is this is not

22
00:00:43,169 --> 00:00:44,002
calling,

23
00:00:45,473 --> 00:00:47,577
it's not invoking, it's not executing,

24
00:00:47,577 --> 00:00:51,344
it's remembering, it's storing,
it's figuring things out.

25
00:00:51,344 --> 00:00:53,397
So here is the output of a program

26
00:00:53,397 --> 00:00:55,949
that defines a function
but then doesn't use it.

27
00:00:55,949 --> 00:00:58,396
So this is a sort of broken function.

28
00:00:58,396 --> 00:01:00,641
So here we go, we start
x equals five, print.

29
00:01:00,641 --> 00:01:01,474
You don't have to def,

30
00:01:01,474 --> 00:01:03,283
you have all the defs at the beginning,

31
00:01:03,283 --> 00:01:04,703
the def runs whenever,

32
00:01:04,703 --> 00:01:07,091
so you know, out comes hello,

33
00:01:07,091 --> 00:01:09,399
and then we define a
function and this says,

34
00:01:09,399 --> 00:01:11,776
oh, you wanna make a new thing here,

35
00:01:11,776 --> 00:01:12,679
so I'll make a new thing,

36
00:01:12,679 --> 00:01:14,464
it's kinda like a variable in a sense,

37
00:01:14,464 --> 00:01:17,099
and then it copies this
stuff, copies it up there,

38
00:01:17,099 --> 00:01:19,465
and says later you probably
are gonna wanna use this

39
00:01:19,465 --> 00:01:22,658
so I'm gonna remember it, so
it doesn't do anything there.

40
00:01:22,658 --> 00:01:24,525
It, no output comes out.

41
00:01:24,525 --> 00:01:28,042
Then it says print Yo, and out comes Yo,

42
00:01:28,042 --> 00:01:30,642
and then it adds two to
x, so x is now seven,

43
00:01:30,642 --> 00:01:31,595
and then it prints x,

44
00:01:31,595 --> 00:01:33,060
and there's no seven, there's seven.

45
00:01:33,060 --> 00:01:36,035
These print statements never ran.

46
00:01:36,035 --> 00:01:37,272
They never ran.

47
00:01:37,272 --> 00:01:38,105
Why?

48
00:01:38,105 --> 00:01:39,956
Because we did not invoke them down here.

49
00:01:39,956 --> 00:01:43,117
We defined them but didn't invoke them.

50
00:01:43,117 --> 00:01:46,589
So let's take a look at how
you invoke a function, right,

51
00:01:46,589 --> 00:01:48,327
you define it and then you use it.

52
00:01:48,327 --> 00:01:50,135
Sometimes you define it
once and use it once,

53
00:01:50,135 --> 00:01:52,463
but more commonly you define it once

54
00:01:52,463 --> 00:01:54,036
and use more than one time.

55
00:01:54,036 --> 00:01:55,601
Again, the store and reuse pattern.

56
00:01:55,601 --> 00:02:00,326
The def is the store and
the invoking is the reuse.

57
00:02:00,326 --> 00:02:01,931
So here's just a slightly
different version

58
00:02:01,931 --> 00:02:03,423
of that last program,

59
00:02:03,423 --> 00:02:07,232
and so now it's gonna actually invoke it.

60
00:02:07,232 --> 00:02:08,989
So x equals five, print hello,

61
00:02:08,989 --> 00:02:12,464
def, so out comes hello, this produces,

62
00:02:12,464 --> 00:02:15,126
the def produces no output, right,

63
00:02:15,126 --> 00:02:17,359
but because there's a de-indent here,

64
00:02:17,359 --> 00:02:20,522
that is the entire blob of the code

65
00:02:20,522 --> 00:02:22,400
that is part of print lyrics,

66
00:02:22,400 --> 00:02:24,544
so it prints out Yo,

67
00:02:24,544 --> 00:02:25,871
and now we're going to invoke.

68
00:02:25,871 --> 00:02:27,328
This is the call.

69
00:02:27,328 --> 00:02:28,749
We're gonna call the function.

70
00:02:28,749 --> 00:02:31,127
Now the function goes up,

71
00:02:31,127 --> 00:02:32,544
let's clear this,

72
00:02:33,644 --> 00:02:35,554
so we're down to here,

73
00:02:35,554 --> 00:02:38,796
now the, this, like,
suspends at this place,

74
00:02:38,796 --> 00:02:41,742
like, remember to come back
to here when we're done.

75
00:02:41,742 --> 00:02:45,582
Go up, run this code, and then come back,

76
00:02:45,582 --> 00:02:46,801
and then continue on.

77
00:02:46,801 --> 00:02:48,946
So it like, leaves like a bread crumb

78
00:02:48,946 --> 00:02:50,742
of where it's supposed to come back to.

79
00:02:50,742 --> 00:02:52,749
And then it runs, and
then the print lyrics

80
00:02:52,749 --> 00:02:54,700
of course produces

81
00:02:54,700 --> 00:02:57,962
the two lines of output, and yeah,

82
00:02:57,962 --> 00:02:59,648
that should probably, not've,

83
00:02:59,648 --> 00:03:01,526
they should be up there.

84
00:03:01,526 --> 00:03:03,163
And then x equal x plus
two, which makes it seven,

85
00:03:03,163 --> 00:03:05,285
and then prints out seven.

86
00:03:05,285 --> 00:03:07,618
Kay so this is the invoking.

87
00:03:08,861 --> 00:03:11,337
Invoke, or call, the function.

88
00:03:11,337 --> 00:03:16,040
Kay? You defined it, and
then later you called it.

89
00:03:16,040 --> 00:03:20,532
Now, in addition to just
call and return and invoking,

90
00:03:20,532 --> 00:03:22,501
we can pass parameters in.

91
00:03:22,501 --> 00:03:24,758
And an example of a parameter is

92
00:03:24,758 --> 00:03:26,436
in the max function we have to say,

93
00:03:26,436 --> 00:03:28,395
this is the thing I want
you to find the maximum of,

94
00:03:28,395 --> 00:03:30,273
the largest thing,

95
00:03:30,273 --> 00:03:31,737
and part of it is,

96
00:03:31,737 --> 00:03:34,116
in the whole store and reuse pattern,

97
00:03:34,116 --> 00:03:35,221
we have a few lines of code

98
00:03:35,221 --> 00:03:38,736
that sometimes we wanna do ever
so slightly different things

99
00:03:38,736 --> 00:03:40,008
in a different invocation

100
00:03:40,008 --> 00:03:43,827
so we use the arguments to subtly adjust

101
00:03:43,827 --> 00:03:47,960
like, finding the maximum
is a general thing,

102
00:03:47,960 --> 00:03:50,033
but what thing defined the maximum of,

103
00:03:50,033 --> 00:03:53,365
that makes a function
that's much more useful

104
00:03:53,365 --> 00:03:56,047
and reusable in a lot more situations.

105
00:03:56,047 --> 00:03:58,668
So arguments are the thing we passed in,

106
00:03:58,668 --> 00:04:00,142
and we defined for our functions

107
00:04:00,142 --> 00:04:01,788
that we're going to build,

108
00:04:01,788 --> 00:04:03,871
we, on the def statement,

109
00:04:04,732 --> 00:04:07,335
so we say def, greet, name of function,

110
00:04:07,335 --> 00:04:08,940
and then this is the arguments,

111
00:04:08,940 --> 00:04:11,642
the things that are coming in.

112
00:04:11,642 --> 00:04:13,705
Now this lang variable in a sense

113
00:04:13,705 --> 00:04:17,078
only exists during the
life of the function

114
00:04:17,078 --> 00:04:19,078
and it represents sort of a placeholder,

115
00:04:19,078 --> 00:04:21,934
it's not a real variable
in the same sense,

116
00:04:21,934 --> 00:04:23,606
it's a placeholder that refers

117
00:04:23,606 --> 00:04:26,688
to how you touch that first parameter

118
00:04:26,688 --> 00:04:28,923
that's sitting in there, okay.

119
00:04:28,923 --> 00:04:29,923
And so lang,

120
00:04:30,964 --> 00:04:33,788
so lang is our first
parameter, whatever it is,

121
00:04:33,788 --> 00:04:37,172
we don't need to see this
part down here right now,

122
00:04:37,172 --> 00:04:39,009
all we know is we're
going to make a function,

123
00:04:39,009 --> 00:04:41,650
and we're going to take a parameter,

124
00:04:41,650 --> 00:04:43,938
and this lang is the
placeholder that tells us

125
00:04:43,938 --> 00:04:46,120
what that parameter is.

126
00:04:46,120 --> 00:04:46,994
Kay,

127
00:04:46,994 --> 00:04:49,168
so within the function
we're going to check to see

128
00:04:49,168 --> 00:04:52,432
if the language is Spanish,
if we are print Hello,

129
00:04:52,432 --> 00:04:55,735
also if the language is
French, print Bonjour,

130
00:04:55,735 --> 00:04:56,905
otherwise print Hello.

131
00:04:56,905 --> 00:04:59,831
We have a very highly simplified

132
00:04:59,831 --> 00:05:02,379
language translation system, here.

133
00:05:02,379 --> 00:05:05,438
So, the def of course, does nothing

134
00:05:05,438 --> 00:05:09,605
except remembers that and
defines the concept greet.

135
00:05:12,465 --> 00:05:13,665
So that comes down,

136
00:05:13,665 --> 00:05:14,866
and now we're going to call it.

137
00:05:14,866 --> 00:05:16,053
And it says go look up the thing

138
00:05:16,053 --> 00:05:17,446
that I defined called greet.

139
00:05:17,446 --> 00:05:19,127
If you don't put this in,
greet is going to give you

140
00:05:19,127 --> 00:05:22,489
a traceback, but because you
extended and named it greet.

141
00:05:22,489 --> 00:05:24,468
So it runs in, it starts,

142
00:05:24,468 --> 00:05:26,166
suspends the code here,

143
00:05:26,166 --> 00:05:27,385
starts up here,

144
00:05:27,385 --> 00:05:28,819
but then

145
00:05:28,819 --> 00:05:31,069
lang is now an alias to en.

146
00:05:32,697 --> 00:05:36,310
So now we can run, if that is a yes,

147
00:05:36,310 --> 00:05:39,893
else if, oop, I'm
gettin' it all wrong now.

148
00:05:43,332 --> 00:05:45,315
Right so, en comes in as lang,

149
00:05:45,315 --> 00:05:47,590
we're coming in the code,

150
00:05:47,590 --> 00:05:51,979
if it's not es, it's not fr,
else then it prints hello,

151
00:05:51,979 --> 00:05:54,974
and then it comes back to the next line.

152
00:05:54,974 --> 00:05:56,550
And then we call it again,

153
00:05:56,550 --> 00:06:00,318
and this time es is lang,
and so it runs this code,

154
00:06:00,318 --> 00:06:02,370
and prints Hola.

155
00:06:02,370 --> 00:06:04,735
And then next time it calls with this,

156
00:06:04,735 --> 00:06:05,818
and it prints

157
00:06:07,658 --> 00:06:08,520
Bonjour.

158
00:06:08,520 --> 00:06:09,353
You get the idea.

159
00:06:09,353 --> 00:06:14,179
So this is a placeholder so
that on the successive calls

160
00:06:14,179 --> 00:06:18,121
or invokes, invocating,
invocation of the function

161
00:06:18,121 --> 00:06:20,985
we can get at whatever
the programmer put in

162
00:06:20,985 --> 00:06:22,448
as that first parameter.

163
00:06:22,448 --> 00:06:25,121
And so we are saying in this definition

164
00:06:25,121 --> 00:06:27,385
we are ready to receive a first parameter,

165
00:06:27,385 --> 00:06:29,876
please call us with a parameter

166
00:06:29,876 --> 00:06:31,034
and then we will be able to do

167
00:06:31,034 --> 00:06:33,481
something slightly different
for the different values.

168
00:06:33,481 --> 00:06:35,756
So this is a reusable bit of function

169
00:06:35,756 --> 00:06:38,287
that prints hello in
three different languages

170
00:06:38,287 --> 00:06:39,506
and then we tell it what language

171
00:06:39,506 --> 00:06:43,339
at the moment that we're
actually invoking in.

172
00:06:44,928 --> 00:06:47,053
So that's putting stuff into the function,

173
00:06:47,053 --> 00:06:48,668
now getting stuff back out

174
00:06:48,668 --> 00:06:51,541
is the concept of returning.

175
00:06:51,541 --> 00:06:54,194
And the return statement,

176
00:06:54,194 --> 00:06:55,944
the return statement,

177
00:06:57,404 --> 00:07:00,675
is an executable statement
that does two basic things.

178
00:07:00,675 --> 00:07:03,114
The first thing that it does,

179
00:07:03,114 --> 00:07:04,231
is it finishes.

180
00:07:04,231 --> 00:07:07,267
Now this is a one-line function
so that's kind of redundant

181
00:07:07,267 --> 00:07:11,451
but it, when Python goes
into the return statement

182
00:07:11,451 --> 00:07:13,870
it doesn't continue on to the next line.

183
00:07:13,870 --> 00:07:15,120
It just returns.

184
00:07:15,120 --> 00:07:16,979
That is the end of the invocation

185
00:07:16,979 --> 00:07:18,758
of that particular function.

186
00:07:18,758 --> 00:07:21,459
But even more importantly,
it takes as its parameter

187
00:07:21,459 --> 00:07:24,150
you can say return without a parameter,

188
00:07:24,150 --> 00:07:26,264
and it will stop the
execution of a function

189
00:07:26,264 --> 00:07:28,883
kinda like a, break does for a loop.

190
00:07:28,883 --> 00:07:30,101
It's kind of a break for a
loop, get out, we're done,

191
00:07:30,101 --> 00:07:33,204
don't run that next line, get out.

192
00:07:33,204 --> 00:07:37,044
But it also allows the
specification of what you want

193
00:07:37,044 --> 00:07:39,206
as the residual value in an expression.

194
00:07:39,206 --> 00:07:40,628
So we're doing a print,

195
00:07:40,628 --> 00:07:42,245
and then we're saying greet,

196
00:07:42,245 --> 00:07:44,358
and what's gonna show up here

197
00:07:44,358 --> 00:07:48,459
is whatever this function
does in its return statement.

198
00:07:48,459 --> 00:07:50,735
So that prints hello.

199
00:07:50,735 --> 00:07:53,476
We call it again it prints hello again.

200
00:07:53,476 --> 00:07:54,727
Okay.

201
00:07:54,727 --> 00:07:55,560
And so,

202
00:07:58,027 --> 00:08:01,217
and so basically the return statement

203
00:08:01,217 --> 00:08:03,043
is the, I call this the residual value,

204
00:08:03,043 --> 00:08:06,540
it's like what shows up here
when the function is all done,

205
00:08:06,540 --> 00:08:08,707
and it's the string hello.

206
00:08:09,911 --> 00:08:12,403
We call the functions that
return values fruitful

207
00:08:12,403 --> 00:08:14,130
because they produce something

208
00:08:14,130 --> 00:08:16,961
and uh, but you don't have
to, you can just say return,

209
00:08:16,961 --> 00:08:18,568
or, you don't even have to
have a return statement,

210
00:08:18,568 --> 00:08:19,888
it goes to the last line of the function

211
00:08:19,888 --> 00:08:21,484
and it does a return automatically

212
00:08:21,484 --> 00:08:22,945
at the last line of the function.

213
00:08:22,945 --> 00:08:24,634
So here's a little bit of
a rewrite of our little

214
00:08:24,634 --> 00:08:26,051
language program,

215
00:08:27,458 --> 00:08:29,133
we are going to create a greeting program,

216
00:08:29,133 --> 00:08:31,873
we're gonna take the language
as the first parameter,

217
00:08:31,873 --> 00:08:33,559
and instead of just
doing a print statement

218
00:08:33,559 --> 00:08:35,330
which is what we did before,

219
00:08:35,330 --> 00:08:37,126
this is now more, more like a function,

220
00:08:37,126 --> 00:08:40,673
cuz it takes some input
and produces some output it

221
00:08:40,673 --> 00:08:42,590
as a return rather than just printing,

222
00:08:42,590 --> 00:08:45,834
it's a little tacky for
a function to print.

223
00:08:45,834 --> 00:08:49,389
And so, here we return
hola, bonjour, and hello,

224
00:08:49,389 --> 00:08:51,349
based on the right thing.

225
00:08:51,349 --> 00:08:53,694
So now we say print greet en,

226
00:08:53,694 --> 00:08:56,216
so it runs the code once, lang is en,

227
00:08:56,216 --> 00:08:58,277
and then it runs this code,

228
00:08:58,277 --> 00:09:00,219
and the residual value is hello,

229
00:09:00,219 --> 00:09:02,349
so it says Hello Glenn.

230
00:09:02,349 --> 00:09:03,516
And similarly,

231
00:09:04,776 --> 00:09:08,060
when it runs this code,
it passes es in as lang,

232
00:09:08,060 --> 00:09:10,386
it runs through, and
it runs this statement,

233
00:09:10,386 --> 00:09:12,347
it does, if there was
more statements it still,

234
00:09:12,347 --> 00:09:14,389
it wouldn't run 'em as
soon as this return runs

235
00:09:14,389 --> 00:09:17,306
that says that this bit right here,

236
00:09:19,622 --> 00:09:21,308
is now hola.

237
00:09:21,308 --> 00:09:22,600
So Hola Sally.

238
00:09:22,600 --> 00:09:25,166
And the same with French,
goes in, runs again,

239
00:09:25,166 --> 00:09:28,817
out comes the return statement,
and then Bonjour Michael.

240
00:09:28,817 --> 00:09:31,040
So you see how we can control

241
00:09:31,040 --> 00:09:33,194
as we're writing the application,

242
00:09:33,194 --> 00:09:35,704
we can control as we're
writing the function

243
00:09:35,704 --> 00:09:38,820
what the residual value
that we want to see

244
00:09:38,820 --> 00:09:40,975
in whatever expression is calling us.

245
00:09:40,975 --> 00:09:42,032
Sometimes we have returns

246
00:09:42,032 --> 00:09:44,786
and sometimes we don't have returns.

247
00:09:44,786 --> 00:09:45,619
So,

248
00:09:48,728 --> 00:09:51,439
so if you think of the max code
that we talked about before,

249
00:09:51,439 --> 00:09:53,897
we can kind of see that
somewhere inside that max code

250
00:09:53,897 --> 00:09:54,925
there's a return,

251
00:09:54,925 --> 00:09:57,789
and that's how it
communicates the w back to us.

252
00:09:57,789 --> 00:09:59,931
So we pass in this argument Hello World,

253
00:09:59,931 --> 00:10:01,638
it comes in as a parameter

254
00:10:01,638 --> 00:10:04,920
and it's gonna loop
through this imp somewhere,

255
00:10:04,920 --> 00:10:06,892
it's gonna loop over and over into imp,

256
00:10:06,892 --> 00:10:08,912
and then at some point it's
gonna figure something out,

257
00:10:08,912 --> 00:10:11,687
and tell us what it
wants to send back to us,

258
00:10:11,687 --> 00:10:14,545
is a return statement,
and so the w comes back

259
00:10:14,545 --> 00:10:16,795
and gets assigned into big.

260
00:10:19,108 --> 00:10:21,078
You can have more than one parameter,

261
00:10:21,078 --> 00:10:22,519
and they're just in order,

262
00:10:22,519 --> 00:10:24,044
the first one and the second one,

263
00:10:24,044 --> 00:10:24,877
three and five,

264
00:10:24,877 --> 00:10:27,539
so three becomes a and five becomes b,

265
00:10:27,539 --> 00:10:28,811
and away we go.

266
00:10:28,811 --> 00:10:30,811
So we just use this to add two numbers

267
00:10:30,811 --> 00:10:33,478
and so three plus five is eight.

268
00:10:35,664 --> 00:10:37,332
So you can add as many as you like,

269
00:10:37,332 --> 00:10:38,388
and the order matters,

270
00:10:38,388 --> 00:10:40,035
and if you do things like,

271
00:10:40,035 --> 00:10:41,660
you tell it you want parameters

272
00:10:41,660 --> 00:10:42,778
and you don't give it to them,

273
00:10:42,778 --> 00:10:44,597
then that'll become a traceback.

274
00:10:44,597 --> 00:10:45,816
And it'll blow up.

275
00:10:45,816 --> 00:10:47,584
You could also talk about
optional parameters,

276
00:10:47,584 --> 00:10:49,076
if, later.

277
00:10:49,076 --> 00:10:51,177
So, you don't have to have return values,

278
00:10:51,177 --> 00:10:53,009
and that means that you simply

279
00:10:53,009 --> 00:10:55,093
don't call a return with a value,

280
00:10:55,093 --> 00:10:56,843
and return is always,

281
00:10:57,722 --> 00:11:02,578
implicitly happening as the
last line of the function.

282
00:11:02,578 --> 00:11:06,903
So, that's kind of the
basics of how functions

283
00:11:06,903 --> 00:11:08,194
operate,

284
00:11:08,194 --> 00:11:10,542
but, I don't want you to get too excited

285
00:11:10,542 --> 00:11:11,892
about writing functions,

286
00:11:11,892 --> 00:11:14,432
some programming classes are like,

287
00:11:14,432 --> 00:11:16,362
gotta write a function,
gotta write a function.

288
00:11:16,362 --> 00:11:20,405
Functions, to be clear, are
a very powerful mechanism

289
00:11:20,405 --> 00:11:24,690
and as we write programs
150, 200 thousand,

290
00:11:24,690 --> 00:11:26,622
200 lines of code, a
thousand lines of code,

291
00:11:26,622 --> 00:11:28,124
10 thousand lines of code,

292
00:11:28,124 --> 00:11:30,901
the concept of a function
is really important.

293
00:11:30,901 --> 00:11:33,022
We would go crazy if we
didn't have functions.

294
00:11:33,022 --> 00:11:35,885
But if you're only
writing 20 lines of code,

295
00:11:35,885 --> 00:11:39,393
forcing yourself to write a
function is kinda pointless.

296
00:11:39,393 --> 00:11:41,881
So, don't worry about the,

297
00:11:41,881 --> 00:11:45,285
maybe the lack of urge to use this,

298
00:11:45,285 --> 00:11:47,317
we are calling lots of
predefined functions,

299
00:11:47,317 --> 00:11:49,815
and we will for the
next couple of lectures.

300
00:11:49,815 --> 00:11:51,421
There will be a time when you go,

301
00:11:51,421 --> 00:11:53,290
oh I'm sick and tired of repeating myself,

302
00:11:53,290 --> 00:11:55,991
oh yeah, time to write a function.

303
00:11:55,991 --> 00:11:59,058
So that's why we don't
push functions prematurely.

304
00:11:59,058 --> 00:12:01,954
We just want you to know what they are,

305
00:12:01,954 --> 00:12:03,803
use them, and at some
moment you'll be like,

306
00:12:03,803 --> 00:12:05,063
oh I wanna define one.

307
00:12:05,063 --> 00:12:06,851
But don't worry about,
it might take a while

308
00:12:06,851 --> 00:12:09,504
before you really wanna define a function.

309
00:12:09,504 --> 00:12:13,527
So, that kinda summarizes
our lecture on functions,

310
00:12:13,527 --> 00:12:17,360
and, uh, up next we're
going to do iterations.

