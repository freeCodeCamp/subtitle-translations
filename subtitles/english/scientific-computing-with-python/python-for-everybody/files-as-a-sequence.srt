1
00:00:00,283 --> 00:00:01,883
- So we're gonna find that
there's a number of different

2
00:00:01,883 --> 00:00:04,199
ways that we can read through
the file, but the most common

3
00:00:04,199 --> 00:00:06,239
way that we're gonna read
through the file is to treat it

4
00:00:06,239 --> 00:00:08,881
as a sequence of lines,
and we're gonna use the

5
00:00:08,881 --> 00:00:12,394
determinant loop, the for loop to do this.

6
00:00:12,394 --> 00:00:15,536
And, so what happens here
is we get back this handle

7
00:00:15,536 --> 00:00:17,327
that opens the file and
gives us back the handle.

8
00:00:17,327 --> 00:00:20,973
That handle xfile is the
variable I named called

9
00:00:20,973 --> 00:00:22,874
I just named it xfile.

10
00:00:22,874 --> 00:00:25,774
That's not the data, but it is a

11
00:00:25,774 --> 00:00:29,957
sequence, it is that file
handle represents to Python

12
00:00:29,957 --> 00:00:32,812
a sequence that we can
potentially walk through and then

13
00:00:32,812 --> 00:00:33,985
get all the lines.

14
00:00:33,985 --> 00:00:37,410
And it's the simplest, most
beautiful, elegant way to read

15
00:00:37,410 --> 00:00:39,021
all the lines in the file.

16
00:00:39,021 --> 00:00:41,549
We use the for loop and we
have an iteration variable,

17
00:00:41,549 --> 00:00:44,379
this is going to take, when
we talk about the file,

18
00:00:44,379 --> 00:00:46,246
cheese is gonna be the first
line, then the second line,

19
00:00:46,246 --> 00:00:47,655
then the third line, then the fourth line.

20
00:00:47,655 --> 00:00:49,693
So it's like going through a
string but you're going through

21
00:00:49,693 --> 00:00:51,684
a file now and you're
getting it line by line,

22
00:00:51,684 --> 00:00:53,158
so that's each line.

23
00:00:53,158 --> 00:00:54,740
I just picked a variable named cheese

24
00:00:54,740 --> 00:00:55,760
so you didn't get confused.

25
00:00:55,760 --> 00:00:58,338
Later I'll call this line, but

26
00:00:58,338 --> 00:01:00,604
Python doesn't know
anything special by naming

27
00:01:00,604 --> 00:01:02,111
that variable line.

28
00:01:02,111 --> 00:01:02,944
Okay?

29
00:01:02,944 --> 00:01:05,843
And so this is, it's the
for and the n, and so

30
00:01:05,843 --> 00:01:08,317
I read this as for each line,

31
00:01:08,317 --> 00:01:11,234
in the file, the file handle xfile.

32
00:01:12,147 --> 00:01:15,518
So run this loop one time
for every line, and then

33
00:01:15,518 --> 00:01:16,400
print it out.

34
00:01:16,400 --> 00:01:19,983
So it's actually really
quite simple, 'kay?

35
00:01:20,883 --> 00:01:25,162
Other languages like C or
C++ or other languages,

36
00:01:25,162 --> 00:01:27,695
they have to write while loops
with end of file conditions,

37
00:01:27,695 --> 00:01:30,652
and all kinds of things that
make this very difficult,

38
00:01:30,652 --> 00:01:34,176
but this is one of the prettiest
things that Python has.

39
00:01:34,176 --> 00:01:36,759
It's a very, very pretty thing.

40
00:01:39,146 --> 00:01:41,905
Okay, so let's talk
about what we might do.

41
00:01:41,905 --> 00:01:44,001
And we're going kinda
back to iterations now.

42
00:01:44,001 --> 00:01:46,074
What if we wanted to count
the number of lines in a file?

43
00:01:46,074 --> 00:01:49,416
Well this is a basic
loop counting pattern.

44
00:01:49,416 --> 00:01:52,349
So we open the file and then,
like in all these loops,

45
00:01:52,349 --> 00:01:55,165
we do something to sort of prime
the loop to get it started.

46
00:01:55,165 --> 00:01:57,914
Set a variable count to zero,
and I'm gonna use the variable

47
00:01:57,914 --> 00:02:01,113
line that's gonna go through
each of the lines in the file,

48
00:02:01,113 --> 00:02:03,243
for line in fhand,

49
00:02:03,243 --> 00:02:04,273
down the file.

50
00:02:04,273 --> 00:02:06,928
And it's gonna run this loop
once for each line in the file

51
00:02:06,928 --> 00:02:09,104
and the variable line is gonna change.

52
00:02:09,104 --> 00:02:11,472
But all I'm gonna do is add
count equals count plus one,

53
00:02:11,472 --> 00:02:14,369
so that's just, like from
counters, that's just how you

54
00:02:14,369 --> 00:02:17,025
detect, so every time we see
a line, we're just gonna add

55
00:02:17,025 --> 00:02:17,858
one to the counter.

56
00:02:17,858 --> 00:02:19,145
We're not printing the line,
we're not even lookin' at its

57
00:02:19,145 --> 00:02:20,583
data at this point.

58
00:02:20,583 --> 00:02:22,360
And then when the line is
done, however many times it has

59
00:02:22,360 --> 00:02:24,952
to go, out it comes, and
we print out line count

60
00:02:24,952 --> 00:02:26,161
equals count.

61
00:02:26,161 --> 00:02:30,083
And so if we open mbox.txt,
this is gonna do all this work,

62
00:02:30,083 --> 00:02:32,438
and then print this line
out, and say line count is

63
00:02:32,438 --> 00:02:34,771
132,045, so this is a little

64
00:02:36,199 --> 00:02:40,031
five-line program that shows
you how to count the lines

65
00:02:40,031 --> 00:02:42,523
in a text file using Python.

66
00:02:42,523 --> 00:02:46,565
Again, simple and elegant and
not too much syntax for you

67
00:02:46,565 --> 00:02:48,708
to have to learn.

68
00:02:48,708 --> 00:02:51,442
Now it's also possible to
read the file as a series of

69
00:02:51,442 --> 00:02:53,955
characters all in one go.

70
00:02:53,955 --> 00:02:55,875
Read the whole file, and
now you gotta be careful,

71
00:02:55,875 --> 00:02:59,530
depending on the size of the
file, this is gonna lead to a

72
00:02:59,530 --> 00:03:01,660
string variable with a lot of data in it.

73
00:03:01,660 --> 00:03:04,512
Now if it's, you know, 100,000
characters, that's actually

74
00:03:04,512 --> 00:03:08,095
kind of a small thing, but if
it was, you know, 10 million

75
00:03:08,095 --> 00:03:09,984
lines, that would probably not be good.

76
00:03:09,984 --> 00:03:11,948
You'd wanna read it one line at a time

77
00:03:11,948 --> 00:03:14,507
and process each line,
and then do something.

78
00:03:14,507 --> 00:03:18,065
But, mbox-short.txt is
a small little file.

79
00:03:18,065 --> 00:03:22,120
So we open it, and we
get back a file object,

80
00:03:22,120 --> 00:03:24,932
file handle object, and
we call the read method,

81
00:03:24,932 --> 00:03:27,299
and that says nope, go
through and read all the text

82
00:03:27,299 --> 00:03:31,037
and give it back in one
big block, one big string,

83
00:03:31,037 --> 00:03:32,455
and I'll put it in inp.

84
00:03:32,455 --> 00:03:35,007
And so that's where you
have a line, a new line,

85
00:03:35,007 --> 00:03:37,612
a line, a new line, a line,
a new line, so it really

86
00:03:37,612 --> 00:03:40,084
lines, it's just a sequence of characters,

87
00:03:40,084 --> 00:03:42,447
with new lines in there to punctuate them.

88
00:03:42,447 --> 00:03:44,673
And now you can split that
later, we'll see how to split

89
00:03:44,673 --> 00:03:48,176
that into separate lines if you want.

90
00:03:48,176 --> 00:03:51,827
Now I picked a file that was short and so

91
00:03:51,827 --> 00:03:54,592
this inp variable now has a string in it,

92
00:03:54,592 --> 00:03:57,401
and I can use the len function,
pass a string into the len

93
00:03:57,401 --> 00:04:00,758
function, says oh, 94,626 characters.

94
00:04:00,758 --> 00:04:03,069
That's kind of a small

95
00:04:03,069 --> 00:04:04,747
a small little file.

96
00:04:04,747 --> 00:04:08,239
And perfectly okay to
read it all in one go.

97
00:04:08,239 --> 00:04:10,767
And so now I say just print
the first 20 characters.

98
00:04:10,767 --> 00:04:13,149
That's, you know, beginning
to up to but not including 20,

99
00:04:13,149 --> 00:04:17,476
and so it shows the first 20
characters of that little file

100
00:04:17,476 --> 00:04:21,309
is a from line, 'cause
this is a mailbox file.

101
00:04:22,873 --> 00:04:25,434
Now, let's say we're
going to do a searching,

102
00:04:25,434 --> 00:04:28,196
and we did this loop where
you're looking for something.

103
00:04:28,196 --> 00:04:31,204
And so we're gonna search
for lines that have a prefix

104
00:04:31,204 --> 00:04:32,707
of from.

105
00:04:32,707 --> 00:04:33,540
Okay?

106
00:04:33,540 --> 00:04:34,748
That's what we're gonna do,
and we're gonna print those

107
00:04:34,748 --> 00:04:38,371
lines out, so there's lots
of lines in this file,

108
00:04:38,371 --> 00:04:41,044
you know, line, line, line, line from.

109
00:04:41,044 --> 00:04:43,063
Line, line, line, line from, alright?

110
00:04:43,063 --> 00:04:44,122
On and on and on.

111
00:04:44,122 --> 00:04:45,635
And we only wanna show these lines,

112
00:04:45,635 --> 00:04:46,603
the ones that match, right?

113
00:04:46,603 --> 00:04:48,010
That's what we wanna do.

114
00:04:48,010 --> 00:04:51,523
And so (clears throat)
we are going to write an

115
00:04:51,523 --> 00:04:54,563
open statement, and then
we're gonna loop through,

116
00:04:54,563 --> 00:04:55,878
and we're gonna ask the question.

117
00:04:55,878 --> 00:04:58,869
If the line starts with from, print it.

118
00:04:58,869 --> 00:05:01,109
So sometimes it's gonna
skip, skip, skip, skip

119
00:05:01,109 --> 00:05:02,086
and that's gonna run it.

120
00:05:02,086 --> 00:05:04,051
And skip, skip, skip, skip, skip.

121
00:05:04,051 --> 00:05:04,885
That's gonna run it.

122
00:05:04,885 --> 00:05:07,825
Skip, skip, skip, and then
it's gonna run it, okay?

123
00:05:07,825 --> 00:05:10,369
So, that's the basic idea.

124
00:05:10,369 --> 00:05:12,668
And that'll finish when it's
all said and done, and so

125
00:05:12,668 --> 00:05:15,974
this is like a criteria,
this is like a search.

126
00:05:15,974 --> 00:05:18,931
We're looking for lines
that match the string

127
00:05:18,931 --> 00:05:23,137
that have the string from as their prefix.

128
00:05:23,137 --> 00:05:25,395
Now, when we look at
the output of this, it's

129
00:05:25,395 --> 00:05:26,314
kinda weird.

130
00:05:26,314 --> 00:05:29,918
We see kind of these little
blank lines that show up.

131
00:05:29,918 --> 00:05:33,248
Blank, blank, blank,
blank, blank, blank, blank.

132
00:05:33,248 --> 00:05:34,864
What's going on here?

133
00:05:34,864 --> 00:05:35,962
(mumbled hum)

134
00:05:35,962 --> 00:05:36,795
What's going on?

135
00:05:36,795 --> 00:05:39,132
So let's take a quick look.

136
00:05:39,132 --> 00:05:41,167
The problem is is new lines.

137
00:05:41,167 --> 00:05:43,584
Well I mentioned that the file has

138
00:05:43,584 --> 00:05:45,285
new lines in them.

139
00:05:45,285 --> 00:05:48,127
And so when you do the for
loop, it doesn't throw the

140
00:05:48,127 --> 00:05:51,381
new lines away, as you might
expect, it would be kind of

141
00:05:51,381 --> 00:05:52,698
nice if it did, but it doesn't.

142
00:05:52,698 --> 00:05:56,301
It actually shows you, when
you read, it reads that first

143
00:05:56,301 --> 00:05:58,344
line up to and including the new line

144
00:05:58,344 --> 00:06:00,779
and gives you that back as
the variable, so that is the

145
00:06:00,779 --> 00:06:03,477
first new line, so that
means it's gonna go down.

146
00:06:03,477 --> 00:06:06,577
And then the print statement
actually adds another new line.

147
00:06:06,577 --> 00:06:09,282
So that's the second line of
the file has a new line at

148
00:06:09,282 --> 00:06:11,350
the end of it, and the
print statement adds another

149
00:06:11,350 --> 00:06:12,183
new line.

150
00:06:12,183 --> 00:06:14,617
So if we take a look at the code,

151
00:06:14,617 --> 00:06:15,450
there is

152
00:06:16,450 --> 00:06:18,783
a new line, oops, come back.

153
00:06:20,804 --> 00:06:23,767
If we take a look at the code,
this variable line has a new

154
00:06:23,767 --> 00:06:25,051
line in it.

155
00:06:25,051 --> 00:06:26,119
Oops, where am I at?

156
00:06:26,119 --> 00:06:29,119
I'm on the wrong slide, there we go.

157
00:06:30,314 --> 00:06:31,455
Yeah.

158
00:06:31,455 --> 00:06:32,921
This is what I wanna do.

159
00:06:32,921 --> 00:06:35,326
If we look at the code,
there's a new line in here

160
00:06:35,326 --> 00:06:37,097
and then the print adds another new line.

161
00:06:37,097 --> 00:06:39,510
So the print adds a separate new line.

162
00:06:39,510 --> 00:06:41,610
And that's how we get two new lines.

163
00:06:41,610 --> 00:06:43,421
The print statement's new
line, and the little line

164
00:06:43,421 --> 00:06:44,588
from the file.

165
00:06:45,716 --> 00:06:47,530
Here's how we fix it, and
you're gonna write this code

166
00:06:47,530 --> 00:06:50,187
a lot because when you're
reading text files, you end up

167
00:06:50,187 --> 00:06:52,424
with a new line, and often
you don't want the new line.

168
00:06:52,424 --> 00:06:55,128
But thankfully, (clears throat)
as we saw in the previous

169
00:06:55,128 --> 00:06:59,213
chapter, there is a nice
little function in Python

170
00:06:59,213 --> 00:07:01,857
for strings called strip,
that allows you to throw

171
00:07:01,857 --> 00:07:03,274
away white space.

172
00:07:04,988 --> 00:07:07,905
And to review, remember white space

173
00:07:09,369 --> 00:07:11,016
is anything that doesn't print.

174
00:07:11,016 --> 00:07:13,792
And this new line is not
a non-printing character,

175
00:07:13,792 --> 00:07:16,090
so rstrip gets rid of it,
so it's a way to get rid of

176
00:07:16,090 --> 00:07:19,573
white space, and rstrip
does it from the right end,

177
00:07:19,573 --> 00:07:22,573
so it's the right end of the string.

178
00:07:23,774 --> 00:07:27,151
And so, if we just are gonna
loop through all the lines in

179
00:07:27,151 --> 00:07:30,144
the file, we say line equals
line rstrip and then this

180
00:07:30,144 --> 00:07:33,030
variable no longer has the
new line at the end of it.

181
00:07:33,030 --> 00:07:35,244
We have our little if
statement and if we print it,

182
00:07:35,244 --> 00:07:38,800
then this line, the data has
no thing, and then the print

183
00:07:38,800 --> 00:07:40,652
the data has no new line in
it so the print only goes

184
00:07:40,652 --> 00:07:44,077
down one, so now we have
single-spaced output.

185
00:07:44,077 --> 00:07:45,392
And so you're gonna be doing that a lot.

186
00:07:45,392 --> 00:07:48,188
It's really common to read
through a file and then just

187
00:07:48,188 --> 00:07:52,697
strip the new line or any
trailing space off the end

188
00:07:52,697 --> 00:07:53,530
of that.

189
00:07:54,430 --> 00:07:57,375
Now there's a couple of
ways to do a loop like this.

190
00:07:57,375 --> 00:07:59,958
And let's just think of this as

191
00:08:01,033 --> 00:08:04,496
we're looking for a line, a
file with lots of different

192
00:08:04,496 --> 00:08:07,198
lines in it, and we wanna
ignore all the lines except

193
00:08:07,198 --> 00:08:09,615
some say good lines, and we
wanna do something with those

194
00:08:09,615 --> 00:08:11,564
"good lines", or the
lines we're looking for.

195
00:08:11,564 --> 00:08:13,802
Needle in a haystack, this is
like searching for a needle

196
00:08:13,802 --> 00:08:15,872
in the haystack.

197
00:08:15,872 --> 00:08:17,975
So if you look at this code at
high level, we're gonna loop

198
00:08:17,975 --> 00:08:20,963
through everything and then
we're sort of picking which

199
00:08:20,963 --> 00:08:24,278
lines are, and these are
the good lines down here.

200
00:08:24,278 --> 00:08:26,585
Now often, we have a bunch
more code that we wanna do,

201
00:08:26,585 --> 00:08:27,826
and we're not just printing them,

202
00:08:27,826 --> 00:08:28,969
but we're gonna do a lot of code.

203
00:08:28,969 --> 00:08:31,390
So sometimes you actually
structure the loop a little

204
00:08:31,390 --> 00:08:33,084
bit differently.

205
00:08:33,084 --> 00:08:35,329
And so the way to do it, and
this is gonna do the exact

206
00:08:35,329 --> 00:08:37,937
same thing, it's just
a little different way

207
00:08:37,937 --> 00:08:38,903
of thinking about

208
00:08:38,903 --> 00:08:41,190
this loop, so the top part is the same.

209
00:08:41,190 --> 00:08:42,316
We're stripping it.

210
00:08:42,316 --> 00:08:44,718
And what we're doing here is
everything's the same here,

211
00:08:44,718 --> 00:08:45,951
except we add this not.

212
00:08:45,951 --> 00:08:48,157
If the line does not
start with from, that's

213
00:08:48,157 --> 00:08:51,908
the translation that, if the
line does not start with from,

214
00:08:51,908 --> 00:08:53,185
continue.

215
00:08:53,185 --> 00:08:56,393
So basically, we have a skipping pattern.

216
00:08:56,393 --> 00:08:59,766
So the lines we're not
interested in, we skip,

217
00:08:59,766 --> 00:09:02,657
so we come down, we, you
know, skip a lot of lines.

218
00:09:02,657 --> 00:09:04,328
(swooshing noises)

219
00:09:04,328 --> 00:09:06,186
And then we find a line
that's good and then

220
00:09:06,186 --> 00:09:07,342
we fall through.

221
00:09:07,342 --> 00:09:09,960
So this is the good code, and
then we have all the other

222
00:09:09,960 --> 00:09:11,918
good code that we wanna do to that line.

223
00:09:11,918 --> 00:09:15,163
We have that showing up down here.

224
00:09:15,163 --> 00:09:17,907
So this is just two patterns
that, two ways to do the

225
00:09:17,907 --> 00:09:19,815
exact same thing.

226
00:09:19,815 --> 00:09:22,151
So another way to select the
lines that we're interested

227
00:09:22,151 --> 00:09:25,251
in, just use the in operator,
so we talked before about

228
00:09:25,251 --> 00:09:27,575
the in operator and how that works.

229
00:09:27,575 --> 00:09:29,023
So we're basically, gonna wanna use

230
00:09:29,023 --> 00:09:31,151
the continue skipping method,

231
00:09:31,151 --> 00:09:33,355
so we're gonna read all the
lines, these first few lines,

232
00:09:33,355 --> 00:09:36,022
if uct.ac.za is not in the line,

233
00:09:37,460 --> 00:09:38,865
skip it.

234
00:09:38,865 --> 00:09:41,181
And so this is gonna
print out all the lines

235
00:09:41,181 --> 00:09:44,431
that have the string uct.ac.za in them.

236
00:09:45,931 --> 00:09:47,917
And so you see this is
the output of the program,

237
00:09:47,917 --> 00:09:49,917
dot, dot, dot, dot, dot.

238
00:09:51,838 --> 00:09:54,939
Sometimes you'll have
programs that want to

239
00:09:54,939 --> 00:09:56,269
read different files.

240
00:09:56,269 --> 00:09:58,596
Often I give assignments
where I say, "Show me how this

241
00:09:58,596 --> 00:10:00,854
"program runs on the short
file and then show me again

242
00:10:00,854 --> 00:10:03,166
"how it runs on the long
file, just like this."

243
00:10:03,166 --> 00:10:05,453
And so the way we do that,
to input the file name,

244
00:10:05,453 --> 00:10:07,615
instead of making the file
name be a constant to the open

245
00:10:07,615 --> 00:10:10,698
call, we make the file name BA input.

246
00:10:11,611 --> 00:10:15,213
So we just run an input statement,
which gives us a prompt,

247
00:10:15,213 --> 00:10:18,240
and then we type mbox.txt and
then that shows up in this

248
00:10:18,240 --> 00:10:20,816
variable f name, it's a
corsa string all the time,

249
00:10:20,816 --> 00:10:23,001
and we pass that into
open and then we open it,

250
00:10:23,001 --> 00:10:25,748
and then we do, you know,
the count operation.

251
00:10:25,748 --> 00:10:28,998
So if we enter inbox.txt it counts 1797

252
00:10:32,438 --> 00:10:35,070
subject lines in inbox, and
if we give it mbox short,

253
00:10:35,070 --> 00:10:37,426
it says there are 27
subject lines in mbox.

254
00:10:37,426 --> 00:10:39,893
And again, this is another
one of those ifs and it's just

255
00:10:39,893 --> 00:10:44,209
counting, but only counting
lines that match a particular

256
00:10:44,209 --> 00:10:45,209
a particular

257
00:10:46,754 --> 00:10:48,239
pattern.

258
00:10:48,239 --> 00:10:50,922
Okay, so now the user can
also type bad file names,

259
00:10:50,922 --> 00:10:53,081
and we need to be able to
deal with that as well.

260
00:10:53,081 --> 00:10:55,914
And so we're taking a small change

261
00:10:57,237 --> 00:10:58,503
to the code.

262
00:10:58,503 --> 00:11:01,026
The dangerous code is
this line right here,

263
00:11:01,026 --> 00:11:03,774
this line right here is
gonna trace back if that file

264
00:11:03,774 --> 00:11:04,748
doesn't exist.

265
00:11:04,748 --> 00:11:05,971
So what do we do?

266
00:11:05,971 --> 00:11:08,487
Well, we're gonna just expand
that, the rest of this program

267
00:11:08,487 --> 00:11:10,410
is exactly the same, the
only thing's different is

268
00:11:10,410 --> 00:11:14,616
we've got this line, we've
took out insurance on it,

269
00:11:14,616 --> 00:11:16,850
and we know that it
might blow up and so we,

270
00:11:16,850 --> 00:11:19,933
we have it in a try and except block.

271
00:11:21,970 --> 00:11:24,303
So here's how the code runs.

272
00:11:25,945 --> 00:11:29,349
So, you know, the input runs,
we type in a good file name,

273
00:11:29,349 --> 00:11:30,779
it comes in here.

274
00:11:30,779 --> 00:11:33,502
This works and so it skips
the except and so it runs the

275
00:11:33,502 --> 00:11:35,148
code and prints out the count.

276
00:11:35,148 --> 00:11:36,839
So that's the good pattern.

277
00:11:36,839 --> 00:11:38,919
The bad pattern is

278
00:11:38,919 --> 00:11:40,112
here.

279
00:11:40,112 --> 00:11:43,173
We type in a bad file name,
it comes in the try except,

280
00:11:43,173 --> 00:11:46,942
this file name is na na boo
boo and it's gonna blow up so

281
00:11:46,942 --> 00:11:47,775
(imitates explosion)

282
00:11:47,775 --> 00:11:50,845
this line blows up, so it
jumps down at the except code,

283
00:11:50,845 --> 00:11:52,995
prints out file cannot be opened.

284
00:11:52,995 --> 00:11:56,081
So it print this out, now
this quit is really important.

285
00:11:56,081 --> 00:11:57,872
Because if we don't put this
quit in here, it's gonna

286
00:11:57,872 --> 00:12:00,278
continue down here and it's
gonna blow up here because

287
00:12:00,278 --> 00:12:03,675
the file handle is not defined
properly at this point.

288
00:12:03,675 --> 00:12:07,270
And so what we have is
we have this quit op.

289
00:12:07,270 --> 00:12:09,969
Quit is a special
function where it comes in

290
00:12:09,969 --> 00:12:11,337
and never returns.

291
00:12:11,337 --> 00:12:14,804
So this is a way to terminate
the entire Python program

292
00:12:14,804 --> 00:12:17,297
silently with no trace back, alright?

293
00:12:17,297 --> 00:12:19,403
So we put in our own error message,

294
00:12:19,403 --> 00:12:21,926
so we look like we're
professionals, say could not open

295
00:12:21,926 --> 00:12:24,398
this file, and then we stop.

296
00:12:24,398 --> 00:12:26,179
If you don't, it's gonna
come down here and it's gonna

297
00:12:26,179 --> 00:12:29,195
trace back, trace back right there,

298
00:12:29,195 --> 00:12:32,320
it's gonna blow up, so the quit is useful

299
00:12:32,320 --> 00:12:34,899
when you want to stop executing

300
00:12:34,899 --> 00:12:39,021
because you've detected
some kind of an error.

301
00:12:39,021 --> 00:12:42,137
So that's a quick zoom through
opening and reading files

302
00:12:42,137 --> 00:12:44,137
and doing some patterns.

303
00:12:45,610 --> 00:12:48,235
Most of the rest of the programs
in this course are going to

304
00:12:48,235 --> 00:12:49,068
say open,

305
00:12:50,309 --> 00:12:51,605
for,

306
00:12:51,605 --> 00:12:52,791
rstrip,

307
00:12:52,791 --> 00:12:55,828
deuce look for, and then
do something interesting.

308
00:12:55,828 --> 00:12:57,499
That's going to be our
loop that we're gonna do

309
00:12:57,499 --> 00:13:00,283
over and over and over again.

310
00:13:00,283 --> 00:13:04,600
And now we see how this
looping and if and iteration

311
00:13:04,600 --> 00:13:06,017
and variables are

312
00:13:07,082 --> 00:13:09,312
are starting to come together
and you can actually sort of

313
00:13:09,312 --> 00:13:12,228
do a program that does something useful.

314
00:13:12,228 --> 00:13:15,742
But before we get to too
many more programs, we gotta

315
00:13:15,742 --> 00:13:18,251
switch a little bit, switch
gears and talk up next

316
00:13:18,251 --> 00:13:22,203
about data structures and
that is the shape of data.

317
00:13:22,203 --> 00:13:25,974
And how we can use more
intricate and complex variables

318
00:13:25,974 --> 00:13:27,766
to help solve our problems.

319
00:13:27,766 --> 00:13:30,766
(jazzy piano music)

