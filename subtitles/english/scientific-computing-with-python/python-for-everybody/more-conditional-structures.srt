1
00:00:00,497 --> 00:00:01,521
- So, welcome back.

2
00:00:01,521 --> 00:00:02,474
Let's talk a little bit more

3
00:00:02,474 --> 00:00:04,722
about some more complex
conditional statements

4
00:00:04,722 --> 00:00:08,672
that build on this concept
of if and if then else.

5
00:00:08,672 --> 00:00:09,930
The first thing we're gonna look at

6
00:00:09,930 --> 00:00:11,930
is the multi-way branch.

7
00:00:13,722 --> 00:00:15,913
And so, the idea is it's
kind of like the if then else

8
00:00:15,913 --> 00:00:17,411
where you're gonna pick one of two,

9
00:00:17,411 --> 00:00:19,570
but now we can pick one
of three, or one of four

10
00:00:19,570 --> 00:00:21,454
or one of five.

11
00:00:21,454 --> 00:00:24,457
And it introduces a new
concept called the elif.

12
00:00:24,457 --> 00:00:27,949
The elif is another
reserve word inside Python.

13
00:00:27,949 --> 00:00:29,510
And the way it works is;

14
00:00:29,510 --> 00:00:30,913
it's probably best to look at this here

15
00:00:30,913 --> 00:00:32,909
where it checks the first one

16
00:00:32,909 --> 00:00:34,778
and if it's a true then it runs that

17
00:00:34,778 --> 00:00:36,126
and then it's done.

18
00:00:36,126 --> 00:00:37,167
It doesn't check them all.

19
00:00:37,167 --> 00:00:39,214
It's not like it sees that there are

20
00:00:39,214 --> 00:00:40,918
two logical conditions.

21
00:00:40,918 --> 00:00:42,901
It actually checks them the first one.

22
00:00:42,901 --> 00:00:44,529
And how you order these matters

23
00:00:44,529 --> 00:00:47,033
as we'll see in a bit.

24
00:00:47,033 --> 00:00:49,376
And so if the first one is true, it runs.

25
00:00:49,376 --> 00:00:50,209
If the...

26
00:00:52,070 --> 00:00:54,016
If the first one is false,
and the second one is true,

27
00:00:54,016 --> 00:00:55,945
it runs this one and it's done.

28
00:00:55,945 --> 00:00:56,778
And if the

29
00:00:58,443 --> 00:00:59,965
neither of them are true it falls through

30
00:00:59,965 --> 00:01:02,378
and there's an else
clause that is otherwise

31
00:01:02,378 --> 00:01:03,941
and it runs that.

32
00:01:03,941 --> 00:01:06,262
So basically, it's either gonna run one

33
00:01:06,262 --> 00:01:08,108
and then skip the other two.

34
00:01:08,108 --> 00:01:09,525
Or it is going to

35
00:01:10,401 --> 00:01:12,579
skip one, skip two

36
00:01:12,579 --> 00:01:13,753
and then run this one.

37
00:01:13,753 --> 00:01:16,103
But it only runs, in this case one of them

38
00:01:16,103 --> 00:01:16,936
but the important thing

39
00:01:16,936 --> 00:01:19,362
is it checks these questions in order.

40
00:01:19,362 --> 00:01:21,123
And it doesn't check the second question

41
00:01:21,123 --> 00:01:23,212
until it finds it, the first;

42
00:01:23,212 --> 00:01:25,718
it doesn't check the second question

43
00:01:25,718 --> 00:01:28,502
until it knows the
first question is false.

44
00:01:28,502 --> 00:01:29,884
So if the first question is true

45
00:01:29,884 --> 00:01:30,775
you're done.

46
00:01:30,775 --> 00:01:32,167
You're done and you're done with this.

47
00:01:32,167 --> 00:01:34,855
You're done with the
whole block at that point.

48
00:01:34,855 --> 00:01:36,325
So only one of these three

49
00:01:36,325 --> 00:01:39,158
is going to execute in that block.

50
00:01:42,903 --> 00:01:45,562
So, here's some examples of this.

51
00:01:45,562 --> 00:01:48,500
If we, for example, have x equals zero;

52
00:01:48,500 --> 00:01:49,780
it's gonna come down here.

53
00:01:49,780 --> 00:01:50,821
X is less than two.

54
00:01:50,821 --> 00:01:51,845
That's true.

55
00:01:51,845 --> 00:01:52,937
So it runs this code,

56
00:01:52,937 --> 00:01:54,229
and then it skips; skips; skips

57
00:01:54,229 --> 00:01:55,197
down to that.

58
00:01:55,197 --> 00:01:56,413
And so it's like this;

59
00:01:56,413 --> 00:01:59,058
runs that code, and then skips to the end.

60
00:01:59,058 --> 00:02:00,047
Okay?

61
00:02:00,047 --> 00:02:01,489
On the other hand,

62
00:02:01,489 --> 00:02:02,489
if it's five

63
00:02:04,048 --> 00:02:05,721
then this is false

64
00:02:05,721 --> 00:02:06,737
and it skips that,

65
00:02:06,737 --> 00:02:07,709
and it checks this.

66
00:02:07,709 --> 00:02:08,939
This is true.

67
00:02:08,939 --> 00:02:10,528
It runs this code, and then it's done;

68
00:02:10,528 --> 00:02:11,905
skips to the end.

69
00:02:11,905 --> 00:02:13,271
Goes like false;

70
00:02:13,271 --> 00:02:14,520
true;

71
00:02:14,520 --> 00:02:15,621
run;

72
00:02:15,621 --> 00:02:16,454
end.

73
00:02:17,297 --> 00:02:20,319
And then if x is 20, for example;

74
00:02:20,319 --> 00:02:21,498
it runs;

75
00:02:21,498 --> 00:02:23,364
it runs, false;

76
00:02:23,364 --> 00:02:24,366
false;

77
00:02:24,366 --> 00:02:26,133
run else clause and you're done.

78
00:02:26,133 --> 00:02:27,441
So skip;

79
00:02:27,441 --> 00:02:28,605
skip;

80
00:02:28,605 --> 00:02:29,636
else.

81
00:02:29,636 --> 00:02:31,077
Run that code and you're done.

82
00:02:31,077 --> 00:02:32,256
So in this case, we ran that,

83
00:02:32,256 --> 00:02:34,312
and we didn't run that;
and we didn't run that.

84
00:02:34,312 --> 00:02:36,679
Again, one of them is gonna run.

85
00:02:36,679 --> 00:02:37,766
They're checked in order.

86
00:02:37,766 --> 00:02:41,499
These questions are checked
in order; not out of order.

87
00:02:41,499 --> 00:02:42,930
It doesn't look ahead.

88
00:02:42,930 --> 00:02:45,355
It just checks in the
order that you wrote it.

89
00:02:45,355 --> 00:02:47,456
You're the one that wrote that order.

90
00:02:47,456 --> 00:02:51,623
And so, there's a couple of
variations on this multi-way.

91
00:02:52,943 --> 00:02:54,693
You can have no else.

92
00:02:56,327 --> 00:02:58,572
You can have no else, as in this case.

93
00:02:58,572 --> 00:03:02,080
And this just means that it
might not run any of them.

94
00:03:02,080 --> 00:03:03,963
In this case x is five,

95
00:03:03,963 --> 00:03:05,452
so it's not less than two,

96
00:03:05,452 --> 00:03:06,930
but then it runs this one.

97
00:03:06,930 --> 00:03:09,597
But if x was 50, for example.

98
00:03:10,459 --> 00:03:12,217
If x was 50;

99
00:03:12,217 --> 00:03:14,094
then this would be false

100
00:03:14,094 --> 00:03:14,927
and it would skip,

101
00:03:14,927 --> 00:03:15,760
and this would still be false

102
00:03:15,760 --> 00:03:16,593
and it would skip.

103
00:03:16,593 --> 00:03:18,225
And neither of these two would run.

104
00:03:18,225 --> 00:03:19,129
So if you don't have an else

105
00:03:19,129 --> 00:03:20,871
you're not guaranteed that
one of them is gonna run

106
00:03:20,871 --> 00:03:22,513
because else is like the catch-all;

107
00:03:22,513 --> 00:03:24,271
if the other ones are all false

108
00:03:24,271 --> 00:03:27,108
then the else is the one that runs.

109
00:03:27,108 --> 00:03:27,941
Similarly,

110
00:03:28,972 --> 00:03:30,824
you can have many elifs.

111
00:03:30,824 --> 00:03:32,979
But this is where it's really important

112
00:03:32,979 --> 00:03:34,113
for you to make sure you know

113
00:03:34,113 --> 00:03:35,794
what order they're being taken in.

114
00:03:35,794 --> 00:03:36,794
So I've got;

115
00:03:39,441 --> 00:03:40,632
if this is true, it runs.

116
00:03:40,632 --> 00:03:42,653
It goes all the way to the bottom.

117
00:03:42,653 --> 00:03:43,820
If this was...

118
00:03:46,297 --> 00:03:48,325
If it's false, false, false, true;

119
00:03:48,325 --> 00:03:50,575
it runs this one and it's done.

120
00:03:50,575 --> 00:03:54,124
If on the other hand it looks at it as

121
00:03:54,124 --> 00:03:55,026
false;

122
00:03:55,026 --> 00:03:56,963
oops, go back.

123
00:03:56,963 --> 00:03:59,847
If it runs false, false, false, false;

124
00:03:59,847 --> 00:04:02,086
they're all false, then it runs the else.

125
00:04:02,086 --> 00:04:02,919
Right?

126
00:04:02,919 --> 00:04:03,752
This one has an else.

127
00:04:03,752 --> 00:04:04,847
This one didn't have an else.

128
00:04:04,847 --> 00:04:05,846
They don't have to have them.

129
00:04:05,846 --> 00:04:08,486
The key is you can have more
than one of these elifs.

130
00:04:08,486 --> 00:04:09,319
Okay?

131
00:04:09,319 --> 00:04:10,499
So I got a couple little things.

132
00:04:10,499 --> 00:04:13,263
I'll let you pause right now,

133
00:04:13,263 --> 00:04:14,489
and look at;

134
00:04:14,489 --> 00:04:15,889
the question is;

135
00:04:15,889 --> 00:04:19,171
are there, looking at the three lines

136
00:04:19,171 --> 00:04:21,398
or four lines of code;

137
00:04:21,398 --> 00:04:23,688
x equals something.

138
00:04:23,688 --> 00:04:26,532
Are there lines of code
that will never execute

139
00:04:26,532 --> 00:04:28,373
regardless of the value for x?

140
00:04:28,373 --> 00:04:30,760
And I'll let you pause and think about it.

141
00:04:30,760 --> 00:04:33,427
And then I'll explain it to you.

142
00:04:35,538 --> 00:04:36,371
Okay.

143
00:04:36,371 --> 00:04:37,542
Hopefully you paused and thought about it

144
00:04:37,542 --> 00:04:38,651
as long as you like.

145
00:04:38,651 --> 00:04:41,339
But so, let me now explain it to you.

146
00:04:41,339 --> 00:04:43,449
So, we come in here

147
00:04:43,449 --> 00:04:45,576
and if x is less than or equal to two

148
00:04:45,576 --> 00:04:46,733
it's gonna run this first thing.

149
00:04:46,733 --> 00:04:48,312
And if x is greater than or equal to two

150
00:04:48,312 --> 00:04:49,338
it's gonna run this.

151
00:04:49,338 --> 00:04:50,757
And if neither of those are true

152
00:04:50,757 --> 00:04:51,845
then it's gonna run this.

153
00:04:51,845 --> 00:04:54,065
Well, the weird thing is

154
00:04:54,065 --> 00:04:56,028
all numbers are either less than two

155
00:04:56,028 --> 00:04:57,453
or greater than or equal to two.

156
00:04:57,453 --> 00:04:59,123
I carefully constructed this

157
00:04:59,123 --> 00:05:02,308
to the point where it would
never run this line of code.

158
00:05:02,308 --> 00:05:05,066
It is either gonna run
this one, or run that one

159
00:05:05,066 --> 00:05:07,010
but it's not ever gonna run this one.

160
00:05:07,010 --> 00:05:08,192
So that one's like

161
00:05:08,192 --> 00:05:10,419
a weird dysfunctional
one that I constructed.

162
00:05:10,419 --> 00:05:13,172
This other one is a little different.

163
00:05:13,172 --> 00:05:14,716
If x is less than two; we do this.

164
00:05:14,716 --> 00:05:16,899
If x is less than 20; we do that.

165
00:05:16,899 --> 00:05:18,727
If x is less than 10; we do that.

166
00:05:18,727 --> 00:05:20,276
And if none of those are true; we do that.

167
00:05:20,276 --> 00:05:21,421
Well, the problem here

168
00:05:21,421 --> 00:05:23,155
is between these two lines.

169
00:05:23,155 --> 00:05:24,881
The problem is if
something's less than 10,

170
00:05:24,881 --> 00:05:26,291
like six, for example;

171
00:05:26,291 --> 00:05:27,994
it's also less than 20.

172
00:05:27,994 --> 00:05:29,797
So, even though there might be values

173
00:05:29,797 --> 00:05:31,456
for which this is true;

174
00:05:31,456 --> 00:05:33,363
those also are gonna have this true.

175
00:05:33,363 --> 00:05:34,858
So, for something like six;

176
00:05:34,858 --> 00:05:36,291
it's gonna run here.

177
00:05:36,291 --> 00:05:38,704
And it's not even gonna look at this.

178
00:05:38,704 --> 00:05:39,537
That's the point.

179
00:05:39,537 --> 00:05:40,756
It doesn't even look at this.

180
00:05:40,756 --> 00:05:42,176
And so that's;

181
00:05:42,176 --> 00:05:43,598
I could've made this more sensible

182
00:05:43,598 --> 00:05:45,534
if I would've moved this
little block of code

183
00:05:45,534 --> 00:05:46,367
up to there.

184
00:05:46,367 --> 00:05:47,913
And so this is where the order

185
00:05:47,913 --> 00:05:50,619
in which you choose your questions;

186
00:05:50,619 --> 00:05:53,227
the way you put these
elifs together; matters.

187
00:05:53,227 --> 00:05:55,244
Because, it doesn't look at all of them.

188
00:05:55,244 --> 00:05:57,258
It only looks as long as it can;

189
00:05:57,258 --> 00:05:59,216
as long as it sees falses,

190
00:05:59,216 --> 00:06:00,737
then it keeps on going to the next one.

191
00:06:00,737 --> 00:06:02,674
But as soon as it doesn't see a false,

192
00:06:02,674 --> 00:06:04,764
it doesn't continue.

193
00:06:04,764 --> 00:06:07,621
So the last conditional
structure we'll talk about

194
00:06:07,621 --> 00:06:09,323
is the try and except structure.

195
00:06:09,323 --> 00:06:12,529
If you know any other languages
like C plus plus, or Java,

196
00:06:12,529 --> 00:06:13,838
or Javascript;

197
00:06:13,838 --> 00:06:16,602
you're like; whoa, that's
an advanced concept.

198
00:06:16,602 --> 00:06:18,612
But it turns out in Python,

199
00:06:18,612 --> 00:06:20,604
because of Python's propensity

200
00:06:20,604 --> 00:06:22,187
to throw tracebacks

201
00:06:24,279 --> 00:06:25,391
in situations

202
00:06:25,391 --> 00:06:27,734
where you would like to recover;

203
00:06:27,734 --> 00:06:30,366
it turns out you have
to use it a little more

204
00:06:30,366 --> 00:06:33,312
and a little earlier in
your programming skill.

205
00:06:33,312 --> 00:06:34,458
So the problem is

206
00:06:34,458 --> 00:06:36,431
what if there is a line of code

207
00:06:36,431 --> 00:06:38,664
and you absolutely know
it's gonna make a traceback.

208
00:06:38,664 --> 00:06:39,497
It's gonna blow up.

209
00:06:39,497 --> 00:06:40,816
(mimics explosion)

210
00:06:40,816 --> 00:06:42,706
But, you don't want to blow up.

211
00:06:42,706 --> 00:06:44,498
I don't wanna have code blow up.

212
00:06:44,498 --> 00:06:46,069
If you're using my autograder

213
00:06:46,069 --> 00:06:47,434
and you see a traceback in my autograder;

214
00:06:47,434 --> 00:06:49,675
that's like I consider that a failure.

215
00:06:49,675 --> 00:06:50,812
I can put an error like;

216
00:06:50,812 --> 00:06:52,373
hey, you entered blank data;

217
00:06:52,373 --> 00:06:54,002
or you didn't enter a number.

218
00:06:54,002 --> 00:06:55,373
But a traceback?

219
00:06:55,373 --> 00:06:57,502
That just seems like I'm
too lazy as a programmer.

220
00:06:57,502 --> 00:07:00,400
So, we as programmers are
supposed to anticipate

221
00:07:00,400 --> 00:07:03,175
parts of our code that are
gonna blow, potentially

222
00:07:03,175 --> 00:07:05,148
based on, perhaps, the user's input;

223
00:07:05,148 --> 00:07:06,500
and then do something about it.

224
00:07:06,500 --> 00:07:09,813
And that's what the
try and except are for.

225
00:07:09,813 --> 00:07:11,789
If you take this little
dangerous piece of code

226
00:07:11,789 --> 00:07:13,973
that might break and might blow up,

227
00:07:13,973 --> 00:07:16,283
and you surround it with a try

228
00:07:16,283 --> 00:07:17,687
and says this might blow up;

229
00:07:17,687 --> 00:07:20,298
and if it fails, run this code down here.

230
00:07:20,298 --> 00:07:21,131
Okay?

231
00:07:21,131 --> 00:07:22,015
So that's the try,

232
00:07:22,015 --> 00:07:23,608
and if you get an exception;

233
00:07:23,608 --> 00:07:26,204
the except is like if
you get an exception.

234
00:07:26,204 --> 00:07:27,471
And the problem is

235
00:07:27,471 --> 00:07:30,036
is if you are running code;

236
00:07:30,036 --> 00:07:31,413
here's a little bit of code.

237
00:07:31,413 --> 00:07:32,672
We put hello Bob in

238
00:07:32,672 --> 00:07:34,257
and we convert it to an integer.

239
00:07:34,257 --> 00:07:37,238
And we know from past experience

240
00:07:37,238 --> 00:07:38,438
that this blows up.

241
00:07:38,438 --> 00:07:39,329
Right?

242
00:07:39,329 --> 00:07:41,095
You can't take hello Bob and
convert it to an integer.

243
00:07:41,095 --> 00:07:42,742
It's just gonna blow up.

244
00:07:42,742 --> 00:07:43,910
The problem is,

245
00:07:43,910 --> 00:07:44,991
and here we are,

246
00:07:44,991 --> 00:07:46,190
it says oh you blew up on line two.

247
00:07:46,190 --> 00:07:47,556
That's great.

248
00:07:47,556 --> 00:07:50,311
And I'm not very happy with
hello Bob; and whatever.

249
00:07:50,311 --> 00:07:53,117
But the important thing is

250
00:07:53,117 --> 00:07:55,206
your program stops.

251
00:07:55,206 --> 00:07:57,623
These other lines...

252
00:07:57,623 --> 00:08:00,164
These other lines, they don't exist.

253
00:08:00,164 --> 00:08:00,997
Right?

254
00:08:00,997 --> 00:08:02,609
It doesn't go any further.

255
00:08:02,609 --> 00:08:04,343
Remember, the traceback is I'm;

256
00:08:04,343 --> 00:08:05,876
Python is really confused.

257
00:08:05,876 --> 00:08:07,598
And I don't know what to do next.

258
00:08:07,598 --> 00:08:10,296
So Python is just gonna
be conservative and stop.

259
00:08:10,296 --> 00:08:12,854
So Python stops, and your program stops.

260
00:08:12,854 --> 00:08:15,092
No matter how much error
checking you put down here,

261
00:08:15,092 --> 00:08:16,875
it doesn't matter 'cause it's gone.

262
00:08:16,875 --> 00:08:17,754
It's all gone.

263
00:08:17,754 --> 00:08:20,580
And, like I said; we take this personally.

264
00:08:20,580 --> 00:08:23,921
Because the code that
you write is like the;

265
00:08:23,921 --> 00:08:27,175
you being put into the computer
giving it instructions.

266
00:08:27,175 --> 00:08:28,905
And if the code blows up,

267
00:08:28,905 --> 00:08:30,865
well that wipes you out.

268
00:08:30,865 --> 00:08:32,538
You're not in the game anymore.

269
00:08:32,538 --> 00:08:33,828
You're not able to do anything.

270
00:08:33,828 --> 00:08:35,815
So, we want to be able to;

271
00:08:35,815 --> 00:08:37,203
especially in these situations

272
00:08:37,203 --> 00:08:38,612
where we can anticipate

273
00:08:38,612 --> 00:08:41,546
that an error that might
happen in the normal course

274
00:08:41,546 --> 00:08:43,048
of the program's execution

275
00:08:43,048 --> 00:08:45,816
might be something that
you want to compensate for.

276
00:08:45,816 --> 00:08:47,902
And that's what the try and except does.

277
00:08:47,902 --> 00:08:49,995
So here's a bit of code

278
00:08:49,995 --> 00:08:52,030
for the try and except.

279
00:08:52,030 --> 00:08:54,835
And we just have two little
bits of straight-line code.

280
00:08:54,835 --> 00:08:56,922
And so we put a string
in here that's hello Bob.

281
00:08:56,922 --> 00:08:58,549
And then we're gonna
convert it to an integer.

282
00:08:58,549 --> 00:09:00,186
This is the dangerous code.

283
00:09:00,186 --> 00:09:01,869
This code in this case with hello Bob

284
00:09:01,869 --> 00:09:03,491
is gonna do a traceback.

285
00:09:03,491 --> 00:09:04,986
And so, we say try

286
00:09:04,986 --> 00:09:06,743
and then we indent the dangerous code.

287
00:09:06,743 --> 00:09:10,080
And then we add this little except bit.

288
00:09:10,080 --> 00:09:11,918
If it works, the except is ignored.

289
00:09:11,918 --> 00:09:14,057
If this blows up, it runs the except.

290
00:09:14,057 --> 00:09:16,359
So in this code, it's gonna come in.

291
00:09:16,359 --> 00:09:17,939
It's gonna try this.

292
00:09:17,939 --> 00:09:19,271
This is gonna blow up.

293
00:09:19,271 --> 00:09:20,543
But instead of giving a traceback;

294
00:09:20,543 --> 00:09:22,689
it's gonna say I've got
an available except.

295
00:09:22,689 --> 00:09:24,417
I'm gonna run this except code

296
00:09:24,417 --> 00:09:26,104
and then I'm gonna continue on.

297
00:09:26,104 --> 00:09:27,895
And so that prints out first negative one.

298
00:09:27,895 --> 00:09:30,503
'Cause we set this variable
istr to negative one,

299
00:09:30,503 --> 00:09:33,656
like a little flag telling
us that something went wrong.

300
00:09:33,656 --> 00:09:35,357
And then we keep on going.

301
00:09:35,357 --> 00:09:38,612
And now we have put in one; two; three.

302
00:09:38,612 --> 00:09:40,795
The digits one; two; three.

303
00:09:40,795 --> 00:09:41,817
And now it's gonna work.

304
00:09:41,817 --> 00:09:43,124
But we still have it in a try block.

305
00:09:43,124 --> 00:09:44,170
And then this one works.

306
00:09:44,170 --> 00:09:45,937
It does not blow up

307
00:09:45,937 --> 00:09:47,261
and then it ignores the except block.

308
00:09:47,261 --> 00:09:49,734
So the except block is only triggered

309
00:09:49,734 --> 00:09:51,695
when something goes wrong in the code.

310
00:09:51,695 --> 00:09:53,938
It is ignored if something
doesn't go wrong.

311
00:09:53,938 --> 00:09:56,292
So it's like you bought
an insurance policy

312
00:09:56,292 --> 00:09:57,554
on this line of code,

313
00:09:57,554 --> 00:09:59,241
and when things go wrong

314
00:09:59,241 --> 00:10:01,641
you're except block springs into action

315
00:10:01,641 --> 00:10:03,601
and does whatever it is
that you want it to do

316
00:10:03,601 --> 00:10:05,538
in the case of an error.

317
00:10:05,538 --> 00:10:06,371
Okay?

318
00:10:06,371 --> 00:10:08,188
So that's a pretty useful thing

319
00:10:08,188 --> 00:10:11,159
You gotta be a little bit
careful that you don't overuse it

320
00:10:11,159 --> 00:10:14,849
because if you put more than
one line inside the try part

321
00:10:14,849 --> 00:10:17,325
and one of the lines blows up

322
00:10:17,325 --> 00:10:19,478
it doesn't come back to the try block.

323
00:10:19,478 --> 00:10:20,701
And so in this one here,

324
00:10:20,701 --> 00:10:22,823
we have a simple silly one

325
00:10:22,823 --> 00:10:24,405
where we set the string.

326
00:10:24,405 --> 00:10:25,413
We're worried about some stuff.

327
00:10:25,413 --> 00:10:27,262
Well, the print statement
is never gonna blow up.

328
00:10:27,262 --> 00:10:29,808
So it's a bad idea to put
it in try except anyways.

329
00:10:29,808 --> 00:10:31,078
Then we do this conversion.

330
00:10:31,078 --> 00:10:32,943
And that's the dangerous part.

331
00:10:32,943 --> 00:10:34,143
And in this one it's gonna blow up.

332
00:10:34,143 --> 00:10:35,974
(mimics explosion)

333
00:10:35,974 --> 00:10:38,803
And so then it's gonna
go to the except block,

334
00:10:38,803 --> 00:10:39,636
and then run the except block

335
00:10:39,636 --> 00:10:40,759
and then continue.

336
00:10:40,759 --> 00:10:43,175
What it does not do

337
00:10:43,175 --> 00:10:45,661
is somehow go back and finish this.

338
00:10:45,661 --> 00:10:47,879
So these lines are gone.

339
00:10:47,879 --> 00:10:49,779
So if you look at it
like this; this works.

340
00:10:49,779 --> 00:10:51,368
The try starts.

341
00:10:51,368 --> 00:10:52,585
Hello.

342
00:10:52,585 --> 00:10:54,062
This blows up.

343
00:10:54,062 --> 00:10:55,272
It goes to the except.

344
00:10:55,272 --> 00:10:57,330
It runs the except and
then it continues on.

345
00:10:57,330 --> 00:10:59,777
Never runs that code.

346
00:10:59,777 --> 00:11:02,299
So it's not like you took out an insurance

347
00:11:02,299 --> 00:11:04,296
on the whole block.

348
00:11:04,296 --> 00:11:06,347
Any of those lines can
blow up in the block.

349
00:11:06,347 --> 00:11:07,630
But whichever line blows up,

350
00:11:07,630 --> 00:11:11,500
that is the last line that's
executing in that block.

351
00:11:11,500 --> 00:11:12,333
Okay?

352
00:11:12,333 --> 00:11:15,687
So, you tend to want in
this particular example;

353
00:11:15,687 --> 00:11:17,124
you would probably near
the print statement

354
00:11:17,124 --> 00:11:18,278
would go out there,

355
00:11:18,278 --> 00:11:20,315
and this print statement
would come down here.

356
00:11:20,315 --> 00:11:22,397
And you would only put in your try block

357
00:11:22,397 --> 00:11:24,913
a single line of code that
you think might blow up.

358
00:11:24,913 --> 00:11:28,253
'Cause you know print
statements aren't gonna blow up.

359
00:11:28,253 --> 00:11:30,569
So this is an example that more common

360
00:11:30,569 --> 00:11:32,819
real world example

361
00:11:32,819 --> 00:11:35,713
where the user is going to type some data.

362
00:11:35,713 --> 00:11:37,950
And that's users that get us in trouble.

363
00:11:37,950 --> 00:11:40,612
So our program starts by
asking the user enter a number.

364
00:11:40,612 --> 00:11:43,623
And we know that this could be dangerous.

365
00:11:43,623 --> 00:11:47,790
So we're gonna put the
conversion from string to integer

366
00:11:47,790 --> 00:11:49,373
in a try block.

367
00:11:49,373 --> 00:11:50,789
And we're gonna set negative one

368
00:11:50,789 --> 00:11:52,102
if that's a failure.

369
00:11:52,102 --> 00:11:54,735
And then if it's greater than
zero; we'll say nice work.

370
00:11:54,735 --> 00:11:56,675
And if it's less than zero; not a number.

371
00:11:56,675 --> 00:11:58,805
So, first time we run this program

372
00:11:58,805 --> 00:12:00,868
out comes enter a number.

373
00:12:00,868 --> 00:12:03,355
We type in 42, which is a string.

374
00:12:03,355 --> 00:12:05,648
That 42 goes back into rawstr.

375
00:12:05,648 --> 00:12:07,250
Runs in here.

376
00:12:07,250 --> 00:12:08,083
This runs.

377
00:12:08,083 --> 00:12:08,916
It's fine.

378
00:12:08,916 --> 00:12:10,028
That becomes a 42 number.

379
00:12:10,028 --> 00:12:11,649
So we skip the except block.

380
00:12:11,649 --> 00:12:13,036
And ival is greater than zero.

381
00:12:13,036 --> 00:12:15,961
We print out nice work
and we skip the else.

382
00:12:15,961 --> 00:12:16,794
Okay?

383
00:12:16,794 --> 00:12:19,364
So, it says nice work.

384
00:12:19,364 --> 00:12:20,864
On the other hand,

385
00:12:21,726 --> 00:12:23,331
if we run it again,

386
00:12:23,331 --> 00:12:24,180
this time,

387
00:12:24,180 --> 00:12:25,743
the input says enter a number.

388
00:12:25,743 --> 00:12:28,099
And we're silly, we
enter the word forty-two

389
00:12:28,099 --> 00:12:29,591
but in words.

390
00:12:29,591 --> 00:12:30,424
Forty.

391
00:12:30,424 --> 00:12:31,683
F-O-U-R-T-Y.

392
00:12:31,683 --> 00:12:34,172
So that's a string, and
that goes into rawstr.

393
00:12:34,172 --> 00:12:35,234
And then the execution continues.

394
00:12:35,234 --> 00:12:36,506
We run in here.

395
00:12:36,506 --> 00:12:38,177
And now this is gonna blow up.

396
00:12:38,177 --> 00:12:39,257
(mimics explosion)

397
00:12:39,257 --> 00:12:40,311
That's gonna blow up.

398
00:12:40,311 --> 00:12:43,328
Normally, we would see
a traceback right there.

399
00:12:43,328 --> 00:12:44,344
There would be a traceback.

400
00:12:44,344 --> 00:12:46,412
But we're not going to,
because we put this calculation

401
00:12:46,412 --> 00:12:47,987
into a try and except block.

402
00:12:47,987 --> 00:12:49,597
It's going to immediately
run the except block.

403
00:12:49,597 --> 00:12:51,146
Set ival to negative one,

404
00:12:51,146 --> 00:12:52,350
continue on with the program.

405
00:12:52,350 --> 00:12:54,789
See, you are not blown up at this point.

406
00:12:54,789 --> 00:12:56,976
And if ival is greater that
zero; well it's negative one.

407
00:12:56,976 --> 00:12:58,604
So, we're gonna hit the else clause

408
00:12:58,604 --> 00:13:00,060
and print out not a number.

409
00:13:00,060 --> 00:13:02,273
So we've done error detection.

410
00:13:02,273 --> 00:13:04,095
The user sent something

411
00:13:04,095 --> 00:13:06,623
that caused a line of our code to blow up.

412
00:13:06,623 --> 00:13:09,099
But we put that line in
a try and except block,

413
00:13:09,099 --> 00:13:09,943
and so we caught it.

414
00:13:09,943 --> 00:13:12,526
And so we dealt with that fact.

415
00:13:13,649 --> 00:13:15,695
So, in summary in this,

416
00:13:15,695 --> 00:13:18,308
we talked about if statements;
we talked about else;

417
00:13:18,308 --> 00:13:20,428
we talked about try and except.

418
00:13:20,428 --> 00:13:23,558
How important indentation
is to mark blocks

419
00:13:23,558 --> 00:13:26,386
where they begin and they end.

420
00:13:26,386 --> 00:13:28,760
And an else if and try except.

421
00:13:28,760 --> 00:13:32,955
So up next, we're gonna talk
about loops and iteration.

422
00:13:32,955 --> 00:13:35,872
(soft jazz music)

