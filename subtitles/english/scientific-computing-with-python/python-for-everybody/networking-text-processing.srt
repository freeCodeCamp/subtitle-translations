1
00:00:00,809 --> 00:00:02,833
- Okay, so now it's time to teach you

2
00:00:02,833 --> 00:00:06,004
a bit of complexity about text processing.

3
00:00:06,004 --> 00:00:08,926
Up 'til now we've kind of been ignoring

4
00:00:08,926 --> 00:00:11,869
the complexity of text processing.

5
00:00:11,869 --> 00:00:14,364
Everything that I have been doing,

6
00:00:14,364 --> 00:00:15,485
or most of what I've been doing,

7
00:00:15,485 --> 00:00:18,568
is in ASCII, the Latin character set,

8
00:00:19,508 --> 00:00:21,898
a character set that, you know,

9
00:00:21,898 --> 00:00:25,510
United States, Europe, lots
of Western civilizations

10
00:00:25,510 --> 00:00:27,026
use this character set,

11
00:00:27,026 --> 00:00:31,026
and if you go back to the
1950s and 1960s, they,

12
00:00:32,250 --> 00:00:34,106
we were happy to have one computer,

13
00:00:34,106 --> 00:00:35,910
and we didn't care what
the character set was

14
00:00:35,910 --> 00:00:37,949
as long as what you typed on the keyboard

15
00:00:37,949 --> 00:00:39,302
came out on the printer,

16
00:00:39,302 --> 00:00:42,385
the internal representation didn't matter.

17
00:00:42,385 --> 00:00:46,414
And as the seventies
and eighties came along,

18
00:00:46,414 --> 00:00:47,302
certainly seventies,

19
00:00:47,302 --> 00:00:48,626
we needed some interoperability,

20
00:00:48,626 --> 00:00:50,756
and so they standardized
the character set,

21
00:00:50,756 --> 00:00:52,734
but they standardized that character set,

22
00:00:52,734 --> 00:00:53,780
certainly in the West,

23
00:00:53,780 --> 00:00:56,335
that did not represent anything.

24
00:00:56,335 --> 00:01:00,495
And so if you look at
this sheet, basically,

25
00:01:00,495 --> 00:01:04,692
what it's telling you is
for the various characters,

26
00:01:04,692 --> 00:01:07,443
there are some non-printing
characters, white space,

27
00:01:07,443 --> 00:01:08,566
non printing characters,

28
00:01:08,566 --> 00:01:09,768
and then here are some printing characters

29
00:01:09,768 --> 00:01:11,898
like the and key, the zero,

30
00:01:11,898 --> 00:01:13,737
and then the uppercase characters

31
00:01:13,737 --> 00:01:15,543
and then the lowercase characters.

32
00:01:15,543 --> 00:01:19,021
And there's 128 of these possible values.

33
00:01:19,021 --> 00:01:22,951
And there are nothing even
for Spanish or French in here.

34
00:01:22,951 --> 00:01:27,157
And it's also why, by the way,
uppercase letters in Latin

35
00:01:27,157 --> 00:01:29,278
sort lower than lowercase letters,

36
00:01:29,278 --> 00:01:31,769
and we saw that in some
of the string stuff.

37
00:01:31,769 --> 00:01:35,352
And what these do is
it maps and says okay,

38
00:01:37,318 --> 00:01:41,473
and a lowercase A maps to the
number, integer number 97,

39
00:01:41,473 --> 00:01:43,806
which in base 16 is six one,

40
00:01:44,882 --> 00:01:48,818
and in octal it's 141, but in
binary it's eight bit numbers,

41
00:01:48,818 --> 00:01:52,985
and so these are eight bits,
otherwise known as a byte.

42
00:01:54,790 --> 00:01:56,957
And they're very efficient, like you know,

43
00:01:56,957 --> 00:01:58,455
when you buy a disk drive,

44
00:01:58,455 --> 00:02:00,208
its megabytes or gigabytes or whatever,

45
00:02:00,208 --> 00:02:04,109
that's how many of these kind
of characters it can store.

46
00:02:04,109 --> 00:02:05,609
But unfortunately,

47
00:02:06,711 --> 00:02:09,248
this doesn't work for
more complex characters.

48
00:02:09,248 --> 00:02:12,708
You can figure out these
numbers inside of Python

49
00:02:12,708 --> 00:02:14,875
by using the ord function,

50
00:02:15,859 --> 00:02:18,061
and so you say what is the ordinal,

51
00:02:18,061 --> 00:02:21,304
or the numeric representation
of the uppercase H,

52
00:02:21,304 --> 00:02:23,934
lowercase E, and new line
as a character as well.

53
00:02:23,934 --> 00:02:27,248
And so, like 10 is the
ordinal position of new line.

54
00:02:27,248 --> 00:02:28,869
And this actually has to do with sorting,

55
00:02:28,869 --> 00:02:33,466
so the E, lowercase E, is
higher than uppercase H,

56
00:02:33,466 --> 00:02:35,847
and that's just because
in the simplest of sorts,

57
00:02:35,847 --> 00:02:38,239
we just sort them numerically.

58
00:02:38,239 --> 00:02:41,333
So new line, if you go back
to the previous little sheet,

59
00:02:41,333 --> 00:02:44,766
new line is this 10
right here, it's that 10,

60
00:02:44,766 --> 00:02:46,725
which is a line feed, and that's a 10,

61
00:02:46,725 --> 00:02:50,750
and that's why when we print
new line out we get a 10.

62
00:02:50,750 --> 00:02:53,836
And so, again, in the early
days when strings were simple,

63
00:02:53,836 --> 00:02:56,556
we just represented them
as one byte per character,

64
00:02:56,556 --> 00:02:59,389
but the problem is that, you know,

65
00:03:00,449 --> 00:03:03,253
as we have gotten more complex
and in today's modern world,

66
00:03:03,253 --> 00:03:04,590
it's simply unacceptable to say

67
00:03:04,590 --> 00:03:08,218
that the only thing computers
can understand is ASCII.

68
00:03:08,218 --> 00:03:11,474
And so this leads to a very, very,

69
00:03:11,474 --> 00:03:12,984
from the simplest of character sets

70
00:03:12,984 --> 00:03:16,780
to a super complex character
set called Unicode,

71
00:03:16,780 --> 00:03:20,025
which basically is billions of characters,

72
00:03:20,025 --> 00:03:22,690
potential billions of characters,

73
00:03:22,690 --> 00:03:25,484
for every language and
every character set,

74
00:03:25,484 --> 00:03:27,545
and because there's so
much space in Unicode,

75
00:03:27,545 --> 00:03:31,713
it's easy to take small
variations of characters

76
00:03:31,713 --> 00:03:32,763
and give them a space.

77
00:03:32,763 --> 00:03:35,430
It's so large that you can have,

78
00:03:36,821 --> 00:03:39,951
you can have pretty much
any character that you want,

79
00:03:39,951 --> 00:03:41,451
so that's Unicode.

80
00:03:42,575 --> 00:03:46,854
The problem is that if we sent
Unicode across the network,

81
00:03:46,854 --> 00:03:48,508
it would be way too large.

82
00:03:48,508 --> 00:03:50,412
It'd be this UTF-32,

83
00:03:50,412 --> 00:03:53,157
which instead of being
eight bytes per character

84
00:03:53,157 --> 00:03:55,264
would be four bytes per character.

85
00:03:55,264 --> 00:03:58,539
And so it would take all
of the data that we build

86
00:03:58,539 --> 00:04:00,844
and make it four times larger.

87
00:04:00,844 --> 00:04:03,595
And it'd be very difficult.

88
00:04:03,595 --> 00:04:07,762
And so what they've come up
with is ways to compress this.

89
00:04:09,006 --> 00:04:11,642
And UTF-16 is this weird thing,

90
00:04:11,642 --> 00:04:16,138
UTF-32 is really sort of the
full Unicode, pretty much.

91
00:04:16,138 --> 00:04:18,902
UTF-16 is a subset of Unicode.

92
00:04:18,902 --> 00:04:21,748
It's used in some countries,

93
00:04:21,748 --> 00:04:26,590
but the best practice for
moving data across the internet,

94
00:04:26,590 --> 00:04:30,032
or in a file that you're
gonna move between computers,

95
00:04:30,032 --> 00:04:32,070
is what's called UTF-8.

96
00:04:32,070 --> 00:04:35,739
And so what happens is that
UTF-32 is fixed length,

97
00:04:35,739 --> 00:04:38,906
ASCII is one byte,

98
00:04:42,197 --> 00:04:44,645
UTF-16 is two bytes, UTF-32 is four bytes,

99
00:04:44,645 --> 00:04:48,540
and UTF-8 is dynamically,
has dynamic length,

100
00:04:48,540 --> 00:04:50,916
meaning that it is one to four bytes,

101
00:04:50,916 --> 00:04:52,544
and if it's only one byte long,

102
00:04:52,544 --> 00:04:54,728
it's perfectly compatible with ASCII,

103
00:04:54,728 --> 00:04:58,491
meaning that an ASCII
file is also a UTF-8.

104
00:04:58,491 --> 00:04:59,797
And so here's this little sheet.

105
00:04:59,797 --> 00:05:02,345
It's not critical that you
understand this graph too much,

106
00:05:02,345 --> 00:05:06,595
but basically, as time passed,
2000 internet's coming,

107
00:05:06,595 --> 00:05:09,008
coming, coming, coming up, 2014,

108
00:05:09,008 --> 00:05:12,002
pretty much overwhelmingly
the documents on the internet

109
00:05:12,002 --> 00:05:14,863
that you might retrieve are UTF-8.

110
00:05:14,863 --> 00:05:17,985
Now, so UTF-8 is the recommended practice,

111
00:05:17,985 --> 00:05:19,936
and it's sort of a compression of,

112
00:05:19,936 --> 00:05:24,489
UTF-8 can represent all the
things UTF-32 can represent,

113
00:05:24,489 --> 00:05:27,225
it's just a compression of it so that,

114
00:05:27,225 --> 00:05:28,769
with an overlap of ASCII,

115
00:05:28,769 --> 00:05:32,524
which is awesome, it's what you want.

116
00:05:32,524 --> 00:05:33,807
I don't need to talk anymore.

117
00:05:33,807 --> 00:05:35,514
So in Python,

118
00:05:35,514 --> 00:05:39,514
we have always had sort of two
ways of representing strings.

119
00:05:39,514 --> 00:05:43,597
In Python 2, the normal
string was a byte string,

120
00:05:44,481 --> 00:05:47,512
was an ASCII string, was a Latin string,

121
00:05:47,512 --> 00:05:49,522
and if you wanted to represent Unicode,

122
00:05:49,522 --> 00:05:52,381
there was a separate kind
of object that we had,

123
00:05:52,381 --> 00:05:54,464
and so you would do that,

124
00:05:55,513 --> 00:05:57,763
and in Python 3.0 or later,

125
00:06:00,302 --> 00:06:02,756
one of the main features of Python 3

126
00:06:02,756 --> 00:06:05,420
was to make Unicode and string the same,

127
00:06:05,420 --> 00:06:07,655
so that that means inside of Python,

128
00:06:07,655 --> 00:06:10,883
when you have a string
variable, it's a Unicode,

129
00:06:10,883 --> 00:06:14,876
whereas inside of Python
2 it was a byte variable.

130
00:06:14,876 --> 00:06:18,172
And so now we have this notion,

131
00:06:18,172 --> 00:06:21,389
separately in Python 2, and on Python 3,

132
00:06:21,389 --> 00:06:23,722
where we have byte variables,

133
00:06:23,722 --> 00:06:28,536
and so byte variables are
in effect an array of bytes.

134
00:06:28,536 --> 00:06:31,138
So if there's A, B, C, that
means it's three bytes,

135
00:06:31,138 --> 00:06:32,564
it's three bytes long.

136
00:06:32,564 --> 00:06:35,190
Whereas a string might be
three, a three character string

137
00:06:35,190 --> 00:06:39,130
might be anywhere from
three to 12 bytes long.

138
00:06:39,130 --> 00:06:44,127
So Python 2 had bytes and
strings that were the same.

139
00:06:44,127 --> 00:06:47,084
Bytes and strings are the
same, and Unicode is weird,

140
00:06:47,084 --> 00:06:48,417
and in Python 3,

141
00:06:52,115 --> 00:06:55,280
strings and Unicode are the
same and bytes are weird.

142
00:06:55,280 --> 00:06:58,496
Okay, and so that's what
we've got to deal with,

143
00:06:58,496 --> 00:07:02,663
and there'll be times when
we get bytes from APIs.

144
00:07:03,692 --> 00:07:04,563
When we call things,

145
00:07:04,563 --> 00:07:06,109
we have to then figure out

146
00:07:06,109 --> 00:07:07,964
what kind of thing those bytes contain,

147
00:07:07,964 --> 00:07:09,795
'cause the bytes might contain ASCII,

148
00:07:09,795 --> 00:07:13,298
they might contain UTF-8, they
might contain various things.

149
00:07:13,298 --> 00:07:18,194
And so internally all the
strings in Python 3 are Unicode.

150
00:07:18,194 --> 00:07:20,638
Most of the time if
you're inside the program

151
00:07:20,638 --> 00:07:22,897
or reading and writing
files, we just work,

152
00:07:22,897 --> 00:07:24,934
and that's why we haven't mentioned it.

153
00:07:24,934 --> 00:07:26,444
But now that we're talking over sockets,

154
00:07:26,444 --> 00:07:29,027
and we're talking to the sort
of random world out there,

155
00:07:29,027 --> 00:07:31,087
we have to be a little more aware

156
00:07:31,087 --> 00:07:32,318
of the data we're dealing with.

157
00:07:32,318 --> 00:07:35,225
Now, the good news is
98 percent of the time,

158
00:07:35,225 --> 00:07:37,282
or 95 percent of the time,

159
00:07:37,282 --> 00:07:40,594
it's UTF-8, which might
also include ASCII,

160
00:07:40,594 --> 00:07:41,959
and so it's quite nice.

161
00:07:41,959 --> 00:07:44,626
But we have to be aware of this.

162
00:07:45,661 --> 00:07:49,034
And so if we are going to take data

163
00:07:49,034 --> 00:07:51,661
that comes off of the
network in the bytes,

164
00:07:51,661 --> 00:07:54,485
then we have to make sure
that we interpret it,

165
00:07:54,485 --> 00:07:57,334
or decode it, in the right way

166
00:07:57,334 --> 00:07:59,958
so that internally, the
strings, which are Unicode,

167
00:07:59,958 --> 00:08:01,595
are properly represented.

168
00:08:01,595 --> 00:08:04,729
And so that's why when we read data in

169
00:08:04,729 --> 00:08:07,505
from a network connection like a socket,

170
00:08:07,505 --> 00:08:09,496
we have to say hey, decode it.

171
00:08:09,496 --> 00:08:11,429
Now, there's a couple things going on

172
00:08:11,429 --> 00:08:13,512
at that moment of decode.

173
00:08:14,420 --> 00:08:16,028
And so this is where we're doing it.

174
00:08:16,028 --> 00:08:19,239
We see this, we have to
manage this in this code,

175
00:08:19,239 --> 00:08:21,224
where we, before we send this stuff,

176
00:08:21,224 --> 00:08:22,099
we're going to encode it,

177
00:08:22,099 --> 00:08:26,266
which takes a Unicode string
and turns it into UTF-8 bytes.

178
00:08:27,221 --> 00:08:28,212
There's actually a parameter here

179
00:08:28,212 --> 00:08:30,233
that you could do it different than UTF-8,

180
00:08:30,233 --> 00:08:31,889
but no one ever does.

181
00:08:31,889 --> 00:08:33,607
You might have to for certain situations,

182
00:08:33,607 --> 00:08:37,546
but, so that says that we're
gonna encode this into UTF-8

183
00:08:37,546 --> 00:08:40,555
before we send it, and then
when we get something back,

184
00:08:40,555 --> 00:08:42,761
before we print it, we're gonna decode it.

185
00:08:42,761 --> 00:08:45,941
And that's how this ends up working out.

186
00:08:45,941 --> 00:08:48,228
And if you look at the documentation,

187
00:08:48,228 --> 00:08:50,766
you will see that sometimes
it says it's a string,

188
00:08:50,766 --> 00:08:52,078
or it's bytes.

189
00:08:52,078 --> 00:08:54,411
And so you take a byte array

190
00:08:56,147 --> 00:08:57,789
and you decode it to get a string,

191
00:08:57,789 --> 00:09:00,673
and you take a string and
encode it to get a byte array.

192
00:09:00,673 --> 00:09:03,241
And so that's what we're doing.

193
00:09:03,241 --> 00:09:06,066
So you can think of the
process as this way,

194
00:09:06,066 --> 00:09:09,399
and that is the network has these UTF-8,

195
00:09:10,890 --> 00:09:13,723
mostly UTF-8 resources, not ASCII.

196
00:09:14,718 --> 00:09:16,174
If it's ASCII it's okay.

197
00:09:16,174 --> 00:09:18,820
So you read with the receive,

198
00:09:18,820 --> 00:09:21,063
so this receive here pulls data,

199
00:09:21,063 --> 00:09:23,545
or well, let's, we have a
Unicode string, we're gonna,

200
00:09:23,545 --> 00:09:24,870
let's start with the send.

201
00:09:24,870 --> 00:09:27,266
So up here, we have a Unicode string.

202
00:09:27,266 --> 00:09:28,718
That's a Unicode string.

203
00:09:28,718 --> 00:09:30,675
Even though there's no
special characters in it,

204
00:09:30,675 --> 00:09:32,954
no Asian characters or French characters,

205
00:09:32,954 --> 00:09:34,759
that's a Unicode string,

206
00:09:34,759 --> 00:09:38,361
and before we can send it,
we have to send it in UTF-8.

207
00:09:38,361 --> 00:09:41,427
If that was, if that had Asian
characters, it'd be okay,

208
00:09:41,427 --> 00:09:43,134
and that would be set up just right

209
00:09:43,134 --> 00:09:44,921
so that the UTF-8 would be right,

210
00:09:44,921 --> 00:09:47,679
so we encode it first,
and that's this cmd.

211
00:09:47,679 --> 00:09:50,854
This is now bytes, okay, cmd is bytes,

212
00:09:50,854 --> 00:09:52,407
and then we actually send the bytes,

213
00:09:52,407 --> 00:09:53,769
and that goes across the network.

214
00:09:53,769 --> 00:09:56,281
We get back out thing,
and when we receive,

215
00:09:56,281 --> 00:09:57,844
and we're receiving the data,

216
00:09:57,844 --> 00:10:01,796
well data is bytes,
not string, it's bytes.

217
00:10:01,796 --> 00:10:03,448
We can say how big it is.

218
00:10:03,448 --> 00:10:05,726
Functions kind of like a
string, and it has len,

219
00:10:05,726 --> 00:10:08,424
except that it is one byte per character,

220
00:10:08,424 --> 00:10:11,491
which means some of it might be UTF-8,

221
00:10:11,491 --> 00:10:13,215
and then all we have to do is say decode.

222
00:10:13,215 --> 00:10:14,048
Again you could,

223
00:10:14,048 --> 00:10:15,381
if you were dealing with a situation

224
00:10:15,381 --> 00:10:16,595
where you're weren't expecting it

225
00:10:16,595 --> 00:10:19,692
to typically be UTF-8 or ASCII,

226
00:10:19,692 --> 00:10:22,080
you could tell it UTF-16 or something,

227
00:10:22,080 --> 00:10:25,493
and it's more complex, but the
simple thing is you just say,

228
00:10:25,493 --> 00:10:27,224
I'm gonna clean up my data on the way in,

229
00:10:27,224 --> 00:10:28,969
I'm gonna clean it up by
running it through decode,

230
00:10:28,969 --> 00:10:30,978
and I'm gonna encode stuff on the way out.

231
00:10:30,978 --> 00:10:35,502
And so sockets are the place
where this comes into play,

232
00:10:35,502 --> 00:10:38,381
and so you'll see, we'll always
do this encode and decode

233
00:10:38,381 --> 00:10:41,858
every time we're sending data
kind of outside of Python

234
00:10:41,858 --> 00:10:43,657
and inside of Python.

235
00:10:43,657 --> 00:10:45,844
So now that we've talked a
little bit about character sets,

236
00:10:45,844 --> 00:10:49,009
we're going to make this even easier

237
00:10:49,009 --> 00:10:50,305
so you don't have to use sockets.

238
00:10:50,305 --> 00:10:54,008
Urllib is a bit of Python
code in the library

239
00:10:54,008 --> 00:10:57,602
that does all the socket stuff for you.

240
00:10:57,602 --> 00:11:00,352
(soothing music)

