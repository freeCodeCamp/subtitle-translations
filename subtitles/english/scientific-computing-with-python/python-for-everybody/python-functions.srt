1
00:00:00,932 --> 00:00:03,782
- Hello and welcome to
Chapter 4, Functions.

2
00:00:03,782 --> 00:00:06,351
This is the fourth of our basic patterns,

3
00:00:06,351 --> 00:00:07,741
we'll get to iterations next.

4
00:00:07,741 --> 00:00:09,782
Functions is the store and reuse.

5
00:00:09,782 --> 00:00:12,231
One of the things in programming is that

6
00:00:12,231 --> 00:00:15,410
we never like to repeat
ourselves, we don't like to,

7
00:00:15,410 --> 00:00:16,858
if we have four or five lines of code,

8
00:00:16,858 --> 00:00:18,762
and we're going to do
the same thing later,

9
00:00:18,762 --> 00:00:21,735
we don't like to put the
same four lines of code in,

10
00:00:21,735 --> 00:00:22,568
even if...

11
00:00:23,991 --> 00:00:26,459
It has to do with reliability.

12
00:00:26,459 --> 00:00:28,511
If you find something wrong
with those four lines of code,

13
00:00:28,511 --> 00:00:33,471
and you've got them 12 different
places in your program,

14
00:00:33,471 --> 00:00:35,161
then you got to find all
12 places and fix them.

15
00:00:35,161 --> 00:00:36,673
So collect those to one place,

16
00:00:36,673 --> 00:00:38,719
and then call them and reuse them,

17
00:00:38,719 --> 00:00:41,571
and that's the idea of store and reuse.

18
00:00:41,571 --> 00:00:46,161
So, this is how functions
work inside of Python.

19
00:00:46,161 --> 00:00:48,181
And the first thing we notice
is there is a new key word

20
00:00:48,181 --> 00:00:51,313
"def" that stands for defined function,

21
00:00:51,313 --> 00:00:53,942
and the def is like an if statement,

22
00:00:53,942 --> 00:00:55,652
or we'll see fors and whiles,

23
00:00:55,652 --> 00:00:57,901
that they end in a colon,

24
00:00:57,901 --> 00:00:59,472
and then they have an indented block,

25
00:00:59,472 --> 00:01:01,161
and then the indented block de-indents,

26
00:01:01,161 --> 00:01:03,371
and that's the end of the function.

27
00:01:03,371 --> 00:01:07,538
And so there's two statements
make up this function.

28
00:01:08,672 --> 00:01:11,653
The key thing that you have
to understand and get used to

29
00:01:11,653 --> 00:01:14,071
is this def part is actually not

30
00:01:14,071 --> 00:01:15,563
running any code whatsoever.

31
00:01:15,563 --> 00:01:17,522
It's actually remembering the code.

32
00:01:17,522 --> 00:01:19,423
And that's what I call the "store phase."

33
00:01:19,423 --> 00:01:23,789
The def creates a bit
of code and records it,

34
00:01:23,789 --> 00:01:26,923
like a macro, although it's
much more complex than a macro,

35
00:01:26,923 --> 00:01:28,653
and it names it whatever you chose.

36
00:01:28,653 --> 00:01:29,643
You gave it a name.

37
00:01:29,643 --> 00:01:31,414
We named this one thing().

38
00:01:31,414 --> 00:01:35,184
And so it, as a side effect of Python

39
00:01:35,184 --> 00:01:37,982
reading or parsing these three lines,

40
00:01:37,982 --> 00:01:40,873
it doesn't do anything, but it remembers.

41
00:01:40,873 --> 00:01:43,304
These two lines are what you would like

42
00:01:43,304 --> 00:01:46,302
to run when you invoke thing().

43
00:01:46,302 --> 00:01:48,283
So this is the definition of a function,

44
00:01:48,283 --> 00:01:51,700
and this is the invoking of the function.

45
00:01:53,544 --> 00:01:54,545
So this doesn't do anything.

46
00:01:54,545 --> 00:01:57,305
So there's no output here
from that stuff right there.

47
00:01:57,305 --> 00:01:59,746
But then what happens is you invoke it.

48
00:01:59,746 --> 00:02:02,507
And this thing() looks like
it's part of Python, but you,

49
00:02:02,507 --> 00:02:06,164
in effect, have extended
Python with your def statement.

50
00:02:06,164 --> 00:02:10,056
And so when it sees thing()
it goes up and runs your code,

51
00:02:10,056 --> 00:02:14,947
and so out comes "Hello
Fun," and then it comes back,

52
00:02:14,947 --> 00:02:17,446
and goes to the next line, does print(),

53
00:02:17,446 --> 00:02:19,817
so print() comes out, and
then it goes back like,

54
00:02:19,817 --> 00:02:20,926
oh, this is the reuse part.

55
00:02:20,926 --> 00:02:21,837
But we get to reuse it.

56
00:02:21,837 --> 00:02:23,666
We define it once and we use it twice.

57
00:02:23,666 --> 00:02:25,166
Then it runs this code again,

58
00:02:25,166 --> 00:02:26,925
and then goes to the next
line, and it's all done.

59
00:02:26,925 --> 00:02:29,395
So this little bit came out twice.

60
00:02:29,395 --> 00:02:30,736
And, of course, this is really simple,

61
00:02:30,736 --> 00:02:32,754
so that I can fit it on a page,

62
00:02:32,754 --> 00:02:35,746
but you get the idea that
I don't wanna repeat.

63
00:02:35,746 --> 00:02:39,095
This might be, you know,
15 to 100 lines of code,

64
00:02:39,095 --> 00:02:41,395
and I don't wanna type
those over and over again.

65
00:02:41,395 --> 00:02:45,562
So I say, hey, store these
in a name that I choose,

66
00:02:46,564 --> 00:02:48,564
and then when I invoke them,

67
00:02:48,564 --> 00:02:51,954
bring them back and then run them again.

68
00:02:51,954 --> 00:02:54,598
So that's the basic idea.

69
00:02:54,598 --> 00:02:55,431
We've actually already been using

70
00:02:55,431 --> 00:02:56,966
functions from the beginning.

71
00:02:56,966 --> 00:02:58,636
The print() is a function, right?

72
00:02:58,636 --> 00:02:59,887
Print() is a function.

73
00:02:59,887 --> 00:03:02,238
Every time we see print,

74
00:03:02,238 --> 00:03:05,506
print() and then we
have some stuff in here,

75
00:03:05,506 --> 00:03:07,271
we're calling the print function.

76
00:03:07,271 --> 00:03:10,832
This is the syntax, with
two little parenthesis,

77
00:03:10,832 --> 00:03:13,834
is the syntax for functions.

78
00:03:13,834 --> 00:03:16,892
And so input is a function,
type is a function,

79
00:03:16,892 --> 00:03:19,372
float's a function, int's a function.

80
00:03:19,372 --> 00:03:21,583
All these things are built-in functions

81
00:03:21,583 --> 00:03:25,750
that come with Python at
the moment that we started.

82
00:03:26,838 --> 00:03:29,311
I mean, we installed Python
and these came along.

83
00:03:29,311 --> 00:03:33,612
And then there's other functions
that we define and use,

84
00:03:33,612 --> 00:03:35,383
and that's what the def is for.

85
00:03:35,383 --> 00:03:39,191
In effect, we can create
new reserved words,

86
00:03:39,191 --> 00:03:42,302
of our own making, that
extend the Python language.

87
00:03:42,302 --> 00:03:44,719
After we define the function.

88
00:03:45,602 --> 00:03:47,711
So it's just this bit of reusable code

89
00:03:47,711 --> 00:03:48,920
that takes some arguments.

90
00:03:48,920 --> 00:03:50,069
We haven't seen any with arguments,

91
00:03:50,069 --> 00:03:51,167
there's a little parenthesis,

92
00:03:51,167 --> 00:03:52,809
and we'll see how that works in a bit.

93
00:03:52,809 --> 00:03:55,970
We define using the def
keyword, and then we invoke it.

94
00:03:55,970 --> 00:03:57,610
There's the defining phase,

95
00:03:57,610 --> 00:03:58,791
which actually doesn't run the code,

96
00:03:58,791 --> 00:03:59,749
it just remembers the code,

97
00:03:59,749 --> 00:04:01,618
and then there's the invoking phase.

98
00:04:01,618 --> 00:04:04,779
You define it once and then
invoke it one or more times.

99
00:04:04,779 --> 00:04:07,310
Calling the function or
invoking the function,

100
00:04:07,310 --> 00:04:09,989
we think of those two
things as the same thing.

101
00:04:09,989 --> 00:04:13,100
Call, invoke, are just the terms we use.

102
00:04:13,100 --> 00:04:14,900
Most people just say call the function.

103
00:04:14,900 --> 00:04:16,540
But invoking is a, perhaps,

104
00:04:16,540 --> 00:04:18,730
more descriptive way to think about it.

105
00:04:18,730 --> 00:04:21,521
So here's an example of a function.

106
00:04:21,521 --> 00:04:22,661
It is built into Python.

107
00:04:22,661 --> 00:04:24,191
It's called the max function.

108
00:04:24,191 --> 00:04:27,398
And we can pass some parameters
into the max function,

109
00:04:27,398 --> 00:04:29,607
so we pass the 'Hello world' string.

110
00:04:29,607 --> 00:04:33,238
Now, like much of Python,
max knows what kind of thing

111
00:04:33,238 --> 00:04:34,698
is being passed into it,

112
00:04:34,698 --> 00:04:39,364
and it knows that it's looking
for the largest character,

113
00:04:39,364 --> 00:04:42,830
the lexicographically largest character.

114
00:04:42,830 --> 00:04:45,091
And in this case, it scans this little

115
00:04:45,091 --> 00:04:46,580
that's inside the max code.

116
00:04:46,580 --> 00:04:48,840
It scans through and finds
the largest character.

117
00:04:48,840 --> 00:04:51,512
So, apparently, lowercase
letters are higher than

118
00:04:51,512 --> 00:04:55,822
uppercase letters because
in English we get back a w.

119
00:04:55,822 --> 00:04:58,709
And so this is what's
called the return value.

120
00:04:58,709 --> 00:05:00,881
So this is an assignment statement.

121
00:05:00,881 --> 00:05:02,941
Let me clear this and start over.

122
00:05:02,941 --> 00:05:04,921
So this is an assignment statement,

123
00:05:04,921 --> 00:05:07,107
and so it has to evaluate
this right-hand side.

124
00:05:07,107 --> 00:05:10,418
And a function call is nothing
more than, like, x + 1.

125
00:05:10,418 --> 00:05:12,168
It's something to evaluate.

126
00:05:12,168 --> 00:05:15,048
It runs the function code,
passes in this argument,

127
00:05:15,048 --> 00:05:17,289
and then this residual
value, this is called the

128
00:05:17,289 --> 00:05:19,828
return value, we'll look
at this in more detail,

129
00:05:19,828 --> 00:05:23,947
becomes the result of this
little bit in the expression.

130
00:05:23,947 --> 00:05:25,209
And there's nothing else.

131
00:05:25,209 --> 00:05:27,859
We could have w + 1 or something.

132
00:05:27,859 --> 00:05:31,409
And then the w is what's stored into big.

133
00:05:31,409 --> 00:05:33,829
So we print big, and big is a variable

134
00:05:33,829 --> 00:05:36,668
that has the letter w inside of it.

135
00:05:36,668 --> 00:05:38,659
And then we ask, what is the smallest?

136
00:05:38,659 --> 00:05:40,900
And that finds the blank,
and so we get a blank

137
00:05:40,900 --> 00:05:43,638
to see that there's a min
function and a max function.

138
00:05:43,638 --> 00:05:45,888
Both of these are built in.

139
00:05:47,500 --> 00:05:52,169
These are built-in functions,
they're always there for us.

140
00:05:52,169 --> 00:05:56,336
Okay, so here is another
example of the max function.

141
00:05:57,238 --> 00:06:00,611
And so we can think of this
as invoking, or calling,

142
00:06:00,611 --> 00:06:04,649
this function, as this right-hand
side is being evaluated.

143
00:06:04,649 --> 00:06:06,520
We are passing this variable in,

144
00:06:06,520 --> 00:06:09,199
and there's some code in here,
and it's gonna do some stuff.

145
00:06:09,199 --> 00:06:10,430
Yada, yada, yada.

146
00:06:10,430 --> 00:06:14,339
And then it's gonna give
us back a bit of stuff.

147
00:06:14,339 --> 00:06:16,278
That's its return value,

148
00:06:16,278 --> 00:06:19,541
and then that goes up into the big, right?

149
00:06:19,541 --> 00:06:21,361
That's how this works.

150
00:06:21,361 --> 00:06:24,111
And so this is actually built in.

151
00:06:26,231 --> 00:06:28,460
Or burnt in. I guess I can't draw.

152
00:06:28,460 --> 00:06:30,617
And so you can think of this as sometime,

153
00:06:30,617 --> 00:06:34,721
a long time ago, when Python
was being first formed,

154
00:06:34,721 --> 00:06:36,458
somebody wrote some code.

155
00:06:36,458 --> 00:06:37,870
And it's got some stuff in it,

156
00:06:37,870 --> 00:06:39,011
and it's got a little loop that reads

157
00:06:39,011 --> 00:06:40,790
through all the letters,

158
00:06:40,790 --> 00:06:42,618
it has to figure out if
it's a string or a list,

159
00:06:42,618 --> 00:06:44,367
etc., etc., etc.

160
00:06:44,367 --> 00:06:48,534
But this is store, except
you didn't do the storing

161
00:06:49,480 --> 00:06:51,779
because it's already built in,
and then this is the reuse.

162
00:06:51,779 --> 00:06:53,236
Store and reuse.

163
00:06:53,236 --> 00:06:54,808
So we build these things into Python.

164
00:06:54,808 --> 00:06:56,945
They're already prebuilt, as if,

165
00:06:56,945 --> 00:07:00,239
before the first line of your
code executes way up here,

166
00:07:00,239 --> 00:07:02,906
someone put all this code in for you,

167
00:07:02,906 --> 00:07:07,685
into Python, and created a
thing called max for you.

168
00:07:07,685 --> 00:07:09,366
Now we've been using this already.

169
00:07:09,366 --> 00:07:11,956
Built-in functions, we've
got type() conversions,

170
00:07:11,956 --> 00:07:15,488
we've got the float()
that takes an integer

171
00:07:15,488 --> 00:07:19,058
and returns a floating
point version of that.

172
00:07:19,058 --> 00:07:21,646
And, again, this is kind
of like an expression.

173
00:07:21,646 --> 00:07:23,984
So, it's like, I wanna divide this by 100,

174
00:07:23,984 --> 00:07:26,767
but before I do that, I've
gotta convert it to a float().

175
00:07:26,767 --> 00:07:29,557
So it has to sort of
do these function calls

176
00:07:29,557 --> 00:07:32,390
as it's evaluating the expression.

177
00:07:34,497 --> 00:07:39,257
Sometimes, like here,
we just have a print()

178
00:07:39,257 --> 00:07:41,318
out the return value, that's what this is,

179
00:07:41,318 --> 00:07:42,528
this is the return value.

180
00:07:42,528 --> 00:07:44,678
If you just type a
function in a parameter,

181
00:07:44,678 --> 00:07:47,225
it can be a constant or
it can be a variable.

182
00:07:47,225 --> 00:07:48,298
And as we'll see in a second,

183
00:07:48,298 --> 00:07:50,374
we'll give you many of these, if you like.

184
00:07:50,374 --> 00:07:54,138
So you can either just run it,
or take the result of this.

185
00:07:54,138 --> 00:07:57,038
This passes an integer and
converts it to a float(),

186
00:07:57,038 --> 00:07:59,616
and then puts the float() into that.

187
00:07:59,616 --> 00:08:01,548
Type() tells us what
kind of thing that is,

188
00:08:01,548 --> 00:08:04,329
and you can use this
inside of an expression,

189
00:08:04,329 --> 00:08:05,716
so it's like, what am I gonna do first?

190
00:08:05,716 --> 00:08:07,719
Oh I gotta do 2 times this thing.

191
00:08:07,719 --> 00:08:11,049
Oh wait, pause just briefly for a moment,

192
00:08:11,049 --> 00:08:15,551
call out to some float()
code, pass a 3 into it,

193
00:08:15,551 --> 00:08:17,469
and then something comes back.

194
00:08:17,469 --> 00:08:18,961
The return value.

195
00:08:18,961 --> 00:08:20,720
The residual value comes back,

196
00:08:20,720 --> 00:08:24,489
and then that participates, in
this case it's gonna be 3.0,

197
00:08:24,489 --> 00:08:26,906
participates in this 2 * 3.0.

198
00:08:28,568 --> 00:08:31,648
And so, 2 * 3.0 then ends
up being 6.0, etc., etc.

199
00:08:31,648 --> 00:08:33,198
But you can see, it's like,

200
00:08:33,198 --> 00:08:35,189
oh wait a sec, I gotta
figure out what this is.

201
00:08:35,189 --> 00:08:36,727
Call the function, get the return value,

202
00:08:36,727 --> 00:08:40,477
and then continue
processing this expression.

203
00:08:41,728 --> 00:08:43,957
We've also done this
with string conversions,

204
00:08:43,957 --> 00:08:46,749
partly because, just as an example,

205
00:08:46,749 --> 00:08:48,317
the input always returns a string.

206
00:08:48,317 --> 00:08:50,798
The input function returns a string.

207
00:08:50,798 --> 00:08:54,348
And so here's this string,
could be coming from input,

208
00:08:54,348 --> 00:08:56,949
but we'll just take '123'.

209
00:08:56,949 --> 00:09:00,069
We know that that's a string,
it's not the number 123.

210
00:09:00,069 --> 00:09:03,218
And if we try to add 1 to
it, we get a traceback.

211
00:09:03,218 --> 00:09:07,135
"Cannot concatenate 'str'
and 'int'" traceback.

212
00:09:08,178 --> 00:09:10,097
But we can convert that
string to an integer.

213
00:09:10,097 --> 00:09:12,988
And so int() can take a
floating point number,

214
00:09:12,988 --> 00:09:15,548
or an integer, or even a string,

215
00:09:15,548 --> 00:09:16,917
and it says, oh I know
what I'm supposed to do

216
00:09:16,917 --> 00:09:18,107
with a string, I'm
supposed to look at this,

217
00:09:18,107 --> 00:09:21,923
interpret these as numbers, and, you know,

218
00:09:21,923 --> 00:09:23,034
multiply by ten, and figure out what

219
00:09:23,034 --> 00:09:24,699
the hundredths place
is, and all that stuff.

220
00:09:24,699 --> 00:09:26,325
There's a little bit of
work to that and it does it.

221
00:09:26,325 --> 00:09:27,999
But then it gives us back an integer,

222
00:09:27,999 --> 00:09:29,276
and we say, oh, what is that?

223
00:09:29,276 --> 00:09:33,058
That's now the 123, but
it is of type int(),

224
00:09:33,058 --> 00:09:36,170
and now I can add one to it and get 124.

225
00:09:36,170 --> 00:09:38,709
And, as before, from this
example that we're kind of

226
00:09:38,709 --> 00:09:40,898
reusing from a previous chapter,

227
00:09:40,898 --> 00:09:44,319
you don't want to try to convert...

228
00:09:44,319 --> 00:09:47,236
Oops. Sad face. Sad face. Sad face.

229
00:09:48,551 --> 00:09:49,985
You don't want to try to convert something

230
00:09:49,985 --> 00:09:51,450
that doesn't have digits using int(),

231
00:09:51,450 --> 00:09:53,662
because it'll say, "I
don't know what to do",

232
00:09:53,662 --> 00:09:56,471
and then your program quits.

233
00:09:56,471 --> 00:09:58,050
You don't want your program to stop.

234
00:09:58,050 --> 00:10:00,932
Tracebacks, you can, of
course, deal with that,

235
00:10:00,932 --> 00:10:04,790
and try and accept, but
that's a previous lecture.

236
00:10:04,790 --> 00:10:06,552
Okay, so up next we're gonna talk

237
00:10:06,552 --> 00:10:08,612
about building our own functions.

238
00:10:08,612 --> 00:10:11,529
Not just using the predefined ones.

