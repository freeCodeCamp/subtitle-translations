1
00:00:00,371 --> 00:00:03,669
- Hello and welcome to chapter
11, regular expressions.

2
00:00:03,669 --> 00:00:06,024
The fun thing about this
chapter is unlike all

3
00:00:06,024 --> 00:00:07,646
the rest of the chapters you sort of had

4
00:00:07,646 --> 00:00:10,160
to really understand every single thing

5
00:00:10,160 --> 00:00:12,751
and chapters one through
11 built on one another.

6
00:00:12,751 --> 00:00:14,596
Or one through 10 built on one another.

7
00:00:14,596 --> 00:00:18,229
But you can really get along
without using chapter 11.

8
00:00:18,229 --> 00:00:20,524
It's not a really required topic

9
00:00:20,524 --> 00:00:22,771
but it's a fun topic and
an interesting topic.

10
00:00:22,771 --> 00:00:26,787
So, you can relax a little
bit and realize that you

11
00:00:26,787 --> 00:00:28,324
may or may not like
regular expressions and

12
00:00:28,324 --> 00:00:29,932
if you don't like them that's okay.

13
00:00:29,932 --> 00:00:31,279
You don't have to use them.

14
00:00:31,279 --> 00:00:32,870
You can go for your
whole life without using

15
00:00:32,870 --> 00:00:34,236
regular expressions.

16
00:00:34,236 --> 00:00:36,951
The idea of a regular expression is that

17
00:00:36,951 --> 00:00:39,085
you come up with a language.

18
00:00:39,085 --> 00:00:41,933
It's a little character
based programming language

19
00:00:41,933 --> 00:00:45,768
where you can do smart
searching, basically.

20
00:00:45,768 --> 00:00:49,854
Smart searching as
you'll see in a bit well,

21
00:00:49,854 --> 00:00:51,260
smart extraction.

22
00:00:51,260 --> 00:00:54,129
And it's really almost
programmable wild card expressions.

23
00:00:54,129 --> 00:00:56,160
There's no looping but
there is looping and

24
00:00:56,160 --> 00:00:57,967
there's all this implicit
thing you say look for

25
00:00:57,967 --> 00:00:59,900
patterns that look like
this and then you get back

26
00:00:59,900 --> 00:01:02,186
things that match those patterns.

27
00:01:02,186 --> 00:01:04,328
You know, we do searching for everything.

28
00:01:04,328 --> 00:01:06,465
We're looking through
large blocks of text.

29
00:01:06,465 --> 00:01:08,920
Say, go find me everything
that has the word python

30
00:01:08,920 --> 00:01:09,978
in it or something like that.

31
00:01:09,978 --> 00:01:11,280
So, that's just such a common thing

32
00:01:11,280 --> 00:01:14,594
to do and regular expressions
are a very structured way

33
00:01:14,594 --> 00:01:16,741
to go about searching for information.

34
00:01:16,741 --> 00:01:18,202
They are very powerful
but they're also very

35
00:01:18,202 --> 00:01:19,904
cryptic and you may not like them

36
00:01:19,904 --> 00:01:21,828
but they're a lot of fun actually
once you understand them.

37
00:01:21,828 --> 00:01:24,882
Learning how to program them takes a while

38
00:01:24,882 --> 00:01:27,156
or you can go back to expression programs.

39
00:01:27,156 --> 00:01:29,728
Require some try it,
play with it, check it,

40
00:01:29,728 --> 00:01:31,337
try it, check it, try it, check it.

41
00:01:31,337 --> 00:01:32,172
But once you get 'em

42
00:01:32,172 --> 00:01:33,846
they're really quite cool.

43
00:01:33,846 --> 00:01:37,483
It's a very old programming language.

44
00:01:37,483 --> 00:01:39,454
It comes almost from the 1960's,

45
00:01:39,454 --> 00:01:40,620
the concept of it.

46
00:01:40,620 --> 00:01:42,609
It's a theory of computing
where they were trying

47
00:01:42,609 --> 00:01:44,871
to come up with theory of
languages and regular expressions

48
00:01:44,871 --> 00:01:48,921
was one form of languages that
computers could understand.

49
00:01:48,921 --> 00:01:51,671
And so it has some fun old words.

50
00:01:54,082 --> 00:01:55,773
One of the advantages of
knowing regular expressions

51
00:01:55,773 --> 00:01:58,396
is that you're kind of a cool person.

52
00:01:58,396 --> 00:02:00,854
You can take a quick look at this

53
00:02:00,854 --> 00:02:03,630
XKCD that sort of captures the

54
00:02:03,630 --> 00:02:04,830
devil meg here,

55
00:02:04,830 --> 00:02:08,330
awesome power that regular expressions do.

56
00:02:09,359 --> 00:02:11,192
And while we're at it,

57
00:02:12,219 --> 00:02:13,334
while we're talking about awesome,

58
00:02:13,334 --> 00:02:15,298
I do want to take this
moment and show you my

59
00:02:15,298 --> 00:02:16,576
awesome tattoos.

60
00:02:16,576 --> 00:02:19,297
And so, you may not
notice but I got a couple

61
00:02:19,297 --> 00:02:20,269
of tattoos here.

62
00:02:20,269 --> 00:02:21,537
Here's the first tattoo.

63
00:02:21,537 --> 00:02:22,752
This is where I went to,

64
00:02:22,752 --> 00:02:23,585
got my PhD.

65
00:02:23,585 --> 00:02:25,380
And this is my University of Michigan

66
00:02:25,380 --> 00:02:26,852
faculty member position.

67
00:02:26,852 --> 00:02:30,065
I got a PhD in engineering
and I teach in a school

68
00:02:30,065 --> 00:02:31,652
of information and large array science.

69
00:02:31,652 --> 00:02:33,586
And then, I have this other tattoo.

70
00:02:33,586 --> 00:02:35,270
And this tattoo is what I'd call the

71
00:02:35,270 --> 00:02:37,461
ring of compliance.

72
00:02:37,461 --> 00:02:38,852
I work on learning management systems

73
00:02:38,852 --> 00:02:41,164
in educational technology and standards.

74
00:02:41,164 --> 00:02:42,139
And there's this standard called

75
00:02:42,139 --> 00:02:43,680
Learning Tools Interoperability, which

76
00:02:43,680 --> 00:02:45,847
if you're using this course

77
00:02:45,847 --> 00:02:46,680
and doing the auto grader

78
00:02:46,680 --> 00:02:48,330
it uses Learning Tools Interoperability

79
00:02:48,330 --> 00:02:50,043
to integrate into whatever

80
00:02:50,043 --> 00:02:52,293
learning management system
you happen to be using.

81
00:02:52,293 --> 00:02:53,929
And one of those learning
management systems is the

82
00:02:53,929 --> 00:02:55,482
open source learning
management system that

83
00:02:55,482 --> 00:02:57,311
I helped write called Sakai.

84
00:02:57,311 --> 00:02:59,626
And these are the rest
of the major vendors

85
00:02:59,626 --> 00:03:02,626
and the idea of that tattoo was that

86
00:03:04,107 --> 00:03:05,854
I would put the tattoo of
every vendor that would

87
00:03:05,854 --> 00:03:07,808
comply with Learning
Tools Interoperability.

88
00:03:07,808 --> 00:03:08,681
So, you'll notice Coursera.

89
00:03:08,681 --> 00:03:10,890
I helped Coursera put Learning
Tools Interoperability

90
00:03:10,890 --> 00:03:12,743
in and so the auto graders integrate

91
00:03:12,743 --> 00:03:15,885
into Coursera or Blackboard
or Canvas or Sakai or Moodle

92
00:03:15,885 --> 00:03:17,284
or half a dozen other things.

93
00:03:17,284 --> 00:03:20,722
So, it's just like a cool techno thing.

94
00:03:20,722 --> 00:03:23,061
Just like regular expressions.

95
00:03:23,061 --> 00:03:25,531
So, I've got a URL here
for a regular expression

96
00:03:25,531 --> 00:03:26,364
quick guide.

97
00:03:26,364 --> 00:03:28,036
You might wanna print this out.

98
00:03:28,036 --> 00:03:29,851
So, that you can

99
00:03:29,851 --> 00:03:32,856
look at it even while
you're watching this lecture

100
00:03:32,856 --> 00:03:34,846
because it's a little programming language

101
00:03:34,846 --> 00:03:36,785
except that it's character
based not line based

102
00:03:36,785 --> 00:03:37,913
and not keyword based.

103
00:03:37,913 --> 00:03:40,833
It has certain active characters that

104
00:03:40,833 --> 00:03:44,117
the character means something
versus the character

105
00:03:44,117 --> 00:03:46,467
represents the character itself.

106
00:03:46,467 --> 00:03:48,345
And so, the regular
expressions is not part

107
00:03:48,345 --> 00:03:50,608
of the base python but it's
distributed with pythons.

108
00:03:50,608 --> 00:03:53,421
So, you have to put a
import re at the top to say

109
00:03:53,421 --> 00:03:56,906
that's really saying pull in
the regular expression library.

110
00:03:56,906 --> 00:03:59,427
And there is a couple of
functions inside that.

111
00:03:59,427 --> 00:04:02,031
Re.search which is kind of
like a really smart version

112
00:04:02,031 --> 00:04:04,793
of the find method inside of strings.

113
00:04:04,793 --> 00:04:08,192
And re.findall which is kind of like

114
00:04:08,192 --> 00:04:10,621
taking and stamping
your way through a loop,

115
00:04:10,621 --> 00:04:13,536
through a string and finding
all of the things that

116
00:04:13,536 --> 00:04:17,630
match a particular pattern
and extracting those.

117
00:04:17,630 --> 00:04:19,735
And we'll talk about both of these

118
00:04:19,735 --> 00:04:21,068
in this lecture.

119
00:04:21,918 --> 00:04:24,430
So, here's a really simple piece of code

120
00:04:24,430 --> 00:04:26,074
where I'm just going to sort of show you

121
00:04:26,074 --> 00:04:27,398
sort of before and after.

122
00:04:27,398 --> 00:04:29,954
So, here's a thing where
we're looking for lines

123
00:04:29,954 --> 00:04:31,879
that begin with from colon.

124
00:04:31,879 --> 00:04:32,994
And so, we open a file.

125
00:04:32,994 --> 00:04:34,658
We loop through the whole file.

126
00:04:34,658 --> 00:04:36,072
We strip off the lines ...

127
00:04:36,072 --> 00:04:36,905
text.

128
00:04:36,905 --> 00:04:39,633
And then, we say if line.find
from is greater than

129
00:04:39,633 --> 00:04:41,922
equal to zero, then we print it.

130
00:04:41,922 --> 00:04:43,430
It gives you a negative
one if it's not found

131
00:04:43,430 --> 00:04:45,015
and so, reads all the lines.

132
00:04:45,015 --> 00:04:46,270
And once in a while it'll print it out,

133
00:04:46,270 --> 00:04:47,853
reads all lines once while printing out.

134
00:04:47,853 --> 00:04:50,529
So, that's kind of like
a needle in a haystack.

135
00:04:50,529 --> 00:04:51,930
To use regular expressions to do that

136
00:04:51,930 --> 00:04:54,342
we have to import the
regular expression library.

137
00:04:54,342 --> 00:04:55,248
These lines are the same.

138
00:04:55,248 --> 00:04:56,081
We're gonna loop through.

139
00:04:56,081 --> 00:04:57,564
We're gonna strip.

140
00:04:57,564 --> 00:04:59,461
Now, we're gonna say if re.search.

141
00:04:59,461 --> 00:05:00,989
The way to say this is

142
00:05:00,989 --> 00:05:02,781
within the library regular expressions,

143
00:05:02,781 --> 00:05:06,065
go find the search function and search

144
00:05:06,065 --> 00:05:09,187
for the string from and the string line.

145
00:05:09,187 --> 00:05:10,020
Okay.

146
00:05:10,020 --> 00:05:12,661
So, this is the line
to search whereas here

147
00:05:12,661 --> 00:05:14,495
it was more object-oriented
where we say line.find.

148
00:05:14,495 --> 00:05:17,338
Here we say re.search and we
pass in line as parameter.

149
00:05:17,338 --> 00:05:18,924
These two things are
equivalent which means most

150
00:05:18,924 --> 00:05:20,779
of the time it's gonna
run and once in a while

151
00:05:20,779 --> 00:05:22,328
it'll hit a line and it'll print that out.

152
00:05:22,328 --> 00:05:23,612
And it'll finish the whole thing.

153
00:05:23,612 --> 00:05:27,370
So, that is taking and
doing what we would do

154
00:05:27,370 --> 00:05:30,495
with the find operation
with regular expressions.

155
00:05:30,495 --> 00:05:31,328
Now ...

156
00:05:32,944 --> 00:05:35,134
searching with regular
expressions has these special

157
00:05:35,134 --> 00:05:38,009
characters and so here we
have the same basic code

158
00:05:38,009 --> 00:05:40,538
except now we're saying
if line starts with from.

159
00:05:40,538 --> 00:05:43,190
So, we're not using find anymore.

160
00:05:43,190 --> 00:05:45,513
And that way we're only
gonna get that thing

161
00:05:45,513 --> 00:05:46,707
in the first position

162
00:05:46,707 --> 00:05:50,184
not like blah, blah,
blah, blah from colon.

163
00:05:50,184 --> 00:05:51,100
We don't want that to match.

164
00:05:51,100 --> 00:05:53,578
We only want to match here
at the beginning of the line.

165
00:05:53,578 --> 00:05:55,123
And so, we use line starts with.

166
00:05:55,123 --> 00:05:56,142
So, it's gonna do the same thing.

167
00:05:56,142 --> 00:05:58,490
And find lines that have the
prefix and print those out

168
00:05:58,490 --> 00:06:00,142
and then be done.

169
00:06:00,142 --> 00:06:01,971
Now, on regular
expressions search we don't

170
00:06:01,971 --> 00:06:03,954
in a sense change the method.

171
00:06:03,954 --> 00:06:05,489
We have a certain number
of things we can do with

172
00:06:05,489 --> 00:06:07,602
strings based on what they've built in.

173
00:06:07,602 --> 00:06:09,781
But a regular expression,
we actually can turn

174
00:06:09,781 --> 00:06:13,035
this first parameter into code.

175
00:06:13,035 --> 00:06:16,605
And so, what's happening
here is the carrot,

176
00:06:16,605 --> 00:06:17,888
if you go back to the little cheat sheet,

177
00:06:17,888 --> 00:06:20,506
carrot means this is
the beginning of line.

178
00:06:20,506 --> 00:06:22,518
It's a virtual character that
matches the beginning line.

179
00:06:22,518 --> 00:06:24,353
It's like from that
starts at the beginning.

180
00:06:24,353 --> 00:06:27,795
So, from at the beginning
does match and from

181
00:06:27,795 --> 00:06:29,111
in the middle does not match.

182
00:06:29,111 --> 00:06:30,808
By putting that little carrot there.

183
00:06:30,808 --> 00:06:32,850
Same thing, line is what we're searching.

184
00:06:32,850 --> 00:06:34,208
And then from is what we're ...

185
00:06:34,208 --> 00:06:35,808
Carrot from ...

186
00:06:35,808 --> 00:06:36,729
from at the beginning

187
00:06:36,729 --> 00:06:37,788
is what we're looking for.

188
00:06:37,788 --> 00:06:39,721
And so, again it does
the exact same thing.

189
00:06:39,721 --> 00:06:41,198
It only prints lines that have from colon

190
00:06:41,198 --> 00:06:43,566
as the first character in the line.

191
00:06:43,566 --> 00:06:45,726
So, the difference is,
is we look for a method

192
00:06:45,726 --> 00:06:48,925
and the other one is we
program the regular expression.

193
00:06:48,925 --> 00:06:52,358
So, we're gonna run out
of methods in the string

194
00:06:52,358 --> 00:06:55,349
class long before we run
out of things that we can do

195
00:06:55,349 --> 00:06:58,126
with regular expressions.

196
00:06:58,126 --> 00:07:00,557
And so, couple other
special characters that

197
00:07:00,557 --> 00:07:03,261
carrot matches the beginning of the line.

198
00:07:03,261 --> 00:07:05,457
So, carrot matches beginning of the line.

199
00:07:05,457 --> 00:07:07,798
This capital X matches itself.

200
00:07:07,798 --> 00:07:10,772
Dot is a wild card that
matches any character.

201
00:07:10,772 --> 00:07:13,243
And then, some of the characters
in regular expressions

202
00:07:13,243 --> 00:07:15,491
modify the immediately
preceding character.

203
00:07:15,491 --> 00:07:17,006
And so, that says

204
00:07:17,006 --> 00:07:19,674
look for a line that
starts with x and then has

205
00:07:19,674 --> 00:07:20,648
many characters,

206
00:07:20,648 --> 00:07:22,365
that's with these two things,

207
00:07:22,365 --> 00:07:25,586
zero or more characters
followed by a colon.

208
00:07:25,586 --> 00:07:27,611
And so, you can see that it sort of ...

209
00:07:27,611 --> 00:07:29,309
It's this sort of like expanding stamp.

210
00:07:29,309 --> 00:07:30,810
It's like, oh there's an X
at the beginning of the line.

211
00:07:30,810 --> 00:07:31,999
That line, it looks good.

212
00:07:31,999 --> 00:07:32,832
I got some characters here.

213
00:07:32,832 --> 00:07:33,665
And now, I got a colon.

214
00:07:33,665 --> 00:07:34,498
That's good.

215
00:07:34,498 --> 00:07:38,176
So, this I an X, some
characters, and a colon.

216
00:07:38,176 --> 00:07:39,342
Check.

217
00:07:39,342 --> 00:07:41,249
X, some characters, and a colon.

218
00:07:41,249 --> 00:07:42,131
Check.

219
00:07:42,131 --> 00:07:44,205
X and these things, you know, away we go.

220
00:07:44,205 --> 00:07:46,297
And so, that's what's gonna match.

221
00:07:46,297 --> 00:07:48,346
And so, you can see how
some of these characters

222
00:07:48,346 --> 00:07:50,470
are special, again go
back to your cheat sheet.

223
00:07:50,470 --> 00:07:52,168
Some of them are special
and some of them are

224
00:07:52,168 --> 00:07:53,246
actual characters.

225
00:07:53,246 --> 00:07:55,016
And this colon and X are just there.

226
00:07:55,016 --> 00:07:55,854
They're not special.

227
00:07:55,854 --> 00:07:58,085
They're just the characters.

228
00:07:58,085 --> 00:07:58,918
Okay.

229
00:07:58,918 --> 00:08:00,382
Now,

230
00:08:00,382 --> 00:08:02,304
sometimes you wanna be a little more clear

231
00:08:02,304 --> 00:08:03,276
on your match.

232
00:08:03,276 --> 00:08:06,289
So, let's take a look at
these lines that match that

233
00:08:06,289 --> 00:08:08,341
particular thing that we just did.

234
00:08:08,341 --> 00:08:09,907
So, we have these two,

235
00:08:09,907 --> 00:08:11,090
X dash Sieve colon,

236
00:08:11,090 --> 00:08:12,841
X dash DSPAM dash result,

237
00:08:12,841 --> 00:08:14,563
like these are for mail messages.

238
00:08:14,563 --> 00:08:16,038
And then one of the
mail messages has a line

239
00:08:16,038 --> 00:08:19,675
in it that says X dash
plane is behind schedule.

240
00:08:19,675 --> 00:08:21,357
And this matches.

241
00:08:21,357 --> 00:08:23,157
Is that what you really wanted?

242
00:08:23,157 --> 00:08:26,069
And so, what we can basically say is

243
00:08:26,069 --> 00:08:27,674
because this is an X,
this is some number of

244
00:08:27,674 --> 00:08:30,220
characters and that's a colon, it matches.

245
00:08:30,220 --> 00:08:31,219
It has to match.

246
00:08:31,219 --> 00:08:35,053
That's this rule applied to
this line results in a yes.

247
00:08:35,053 --> 00:08:36,281
It does.

248
00:08:36,281 --> 00:08:39,526
And so, how can you be
a little more clear as

249
00:08:39,526 --> 00:08:43,658
to what you want to match and
what you don't want to match?

250
00:08:43,658 --> 00:08:46,044
So, we can write code.

251
00:08:46,044 --> 00:08:49,211
So, now what we're going to say is ...

252
00:08:50,359 --> 00:08:51,843
We want to match the
beginning of the line and

253
00:08:51,843 --> 00:08:54,601
we wanna carrot capital
X and we want a dash.

254
00:08:54,601 --> 00:08:56,418
So, now we're gonna match
those first two characters.

255
00:08:56,418 --> 00:08:58,833
X dash at the beginning of the line.

256
00:08:58,833 --> 00:09:00,363
Carrot X dash says first two characters

257
00:09:00,363 --> 00:09:02,153
of the line must be X dash.

258
00:09:02,153 --> 00:09:03,684
Now, we have another special character.

259
00:09:03,684 --> 00:09:05,438
Again, refer to your cheat sheet.

260
00:09:05,438 --> 00:09:09,924
Back slash capital S means
a non-white space character.

261
00:09:09,924 --> 00:09:11,027
Right?

262
00:09:11,027 --> 00:09:12,804
Any character other than white space.

263
00:09:12,804 --> 00:09:15,096
And then plus means one or more times.

264
00:09:15,096 --> 00:09:18,171
One or more non-white space characters.

265
00:09:18,171 --> 00:09:19,746
That's what this whole thing says.

266
00:09:19,746 --> 00:09:21,441
One or more non-white space characters.

267
00:09:21,441 --> 00:09:23,417
And followed by a colon
which is just a character.

268
00:09:23,417 --> 00:09:25,496
So, now we have X dash
followed by one or more

269
00:09:25,496 --> 00:09:28,018
non-white space characters
followed by a colon.

270
00:09:28,018 --> 00:09:29,856
X dash followed by one
or more non-white space

271
00:09:29,856 --> 00:09:31,684
characters followed by a colon.

272
00:09:31,684 --> 00:09:34,024
Here we have X dash
followed by one or more ...

273
00:09:34,024 --> 00:09:35,638
whoop, there's a space there.

274
00:09:35,638 --> 00:09:36,952
And so, this doesn't match.

275
00:09:36,952 --> 00:09:38,377
Even though there's a colon there.

276
00:09:38,377 --> 00:09:40,769
It means that between
the dash and the colon

277
00:09:40,769 --> 00:09:44,099
you can only have some number
of non-white space characters.

278
00:09:44,099 --> 00:09:45,865
So, this is a no.

279
00:09:45,865 --> 00:09:47,345
It does not match.

280
00:09:47,345 --> 00:09:48,227
And so,

281
00:09:48,227 --> 00:09:50,610
if you didn't want to match this,

282
00:09:50,610 --> 00:09:54,110
you then sort of create a more precise ...

283
00:09:55,261 --> 00:09:57,099
You know, we could even
have a thing that said,

284
00:09:57,099 --> 00:09:59,682
I want X dash with an uppercase character,

285
00:09:59,682 --> 00:10:01,483
uppercase letter if you wanted to.

286
00:10:01,483 --> 00:10:03,754
And so, there's all kinda
fine-tuning if you sort

287
00:10:03,754 --> 00:10:07,749
of learn the structure
that you've got to do.

288
00:10:07,749 --> 00:10:09,592
And so, that's kind of the matching,

289
00:10:09,592 --> 00:10:11,452
where you're taking a
whole line and taking this

290
00:10:11,452 --> 00:10:13,755
template and deciding if the template

291
00:10:13,755 --> 00:10:16,054
anywhere on that line matches.

292
00:10:16,054 --> 00:10:17,828
And now what we're gonna
do is use this to actually

293
00:10:17,828 --> 00:10:20,421
pull data out of strings

294
00:10:20,421 --> 00:10:23,504
using the regular expression library.

295
00:10:25,213 --> 00:10:29,380
("Fire Breather" by Silent Partner)

