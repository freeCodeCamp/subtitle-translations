1
00:00:00,277 --> 00:00:02,338
- Okay, so we've taken a look at loops

2
00:00:02,338 --> 00:00:04,470
and now we're going to just take a little

3
00:00:04,470 --> 00:00:06,284
bit of a look at some of the operations

4
00:00:06,284 --> 00:00:07,794
that you can do with loops.

5
00:00:07,794 --> 00:00:10,108
- Um, Python has this,
as we'll soon learn,

6
00:00:10,108 --> 00:00:12,826
object orient approach to its operators.

7
00:00:12,826 --> 00:00:15,853
And, the plus can add strings
and it can add numbers,

8
00:00:15,853 --> 00:00:17,261
it can add floating-point numbers,

9
00:00:17,261 --> 00:00:19,254
integer numbers, strings, etc.

10
00:00:19,254 --> 00:00:24,054
And, so the plus similarly
works this way with lists.

11
00:00:24,054 --> 00:00:26,476
The plus looks to its left
and looks to its right

12
00:00:26,476 --> 00:00:28,063
and says, what am I adding?

13
00:00:28,063 --> 00:00:29,820
And in the case that I'm adding the list

14
00:00:29,820 --> 00:00:32,073
one, two, three and the
list four, five, six.

15
00:00:32,073 --> 00:00:33,291
It concatenates them together

16
00:00:33,291 --> 00:00:35,507
and in this way it sort of
functions like a string.

17
00:00:35,507 --> 00:00:37,322
And so, we get one, two,
three, four, five, six.

18
00:00:37,322 --> 00:00:40,744
It just concatenates lists,
this list to another list.

19
00:00:40,744 --> 00:00:42,145
And, it doesn't change a or b,

20
00:00:42,145 --> 00:00:45,019
just like in any kind
of assignment statement

21
00:00:45,019 --> 00:00:46,424
Its calculations on the right side

22
00:00:46,424 --> 00:00:49,465
don't change the variables and
then produce a new variable

23
00:00:49,465 --> 00:00:51,798
and then assign that into c.

24
00:00:53,089 --> 00:00:55,401
You can also use list slicing.

25
00:00:55,401 --> 00:00:57,273
It's easy to remember,

26
00:00:57,273 --> 00:00:58,760
if you remember how strings work,

27
00:00:58,760 --> 00:01:00,721
lists work exactly the same way.

28
00:01:00,721 --> 00:01:03,422
So, of course, it's a little tricky,

29
00:01:03,422 --> 00:01:05,566
the first number's the starting position.

30
00:01:05,566 --> 00:01:06,601
They start at zero.

31
00:01:06,601 --> 00:01:08,418
So, one is right there,

32
00:01:08,418 --> 00:01:10,176
so it's the zero position, one position,

33
00:01:10,176 --> 00:01:14,694
start at one, right, but go
up to but not including three.

34
00:01:14,694 --> 00:01:16,694
There's one, two, three.

35
00:01:17,716 --> 00:01:20,308
So, this goes up to but
not including three.

36
00:01:20,308 --> 00:01:22,532
And, that's why we get
forty-one, twelve out of that.

37
00:01:22,532 --> 00:01:24,218
So, up to but not including,

38
00:01:24,218 --> 00:01:26,641
I'll just say that over
and over and over again.

39
00:01:26,641 --> 00:01:30,407
If we do, you can leave
the first part out,

40
00:01:30,407 --> 00:01:32,229
you can leave the first part out here

41
00:01:32,229 --> 00:01:34,524
and you can say up to
but not including four.

42
00:01:34,524 --> 00:01:36,519
So, that starts at the
beginning goes up to

43
00:01:36,519 --> 00:01:37,793
but not including four,

44
00:01:37,793 --> 00:01:40,578
and so that's how we get
that piece right there.

45
00:01:40,578 --> 00:01:41,828
We can say, um,

46
00:01:43,326 --> 00:01:45,236
start at the position three,

47
00:01:45,236 --> 00:01:46,647
zero, one, two, three.

48
00:01:46,647 --> 00:01:49,957
Start at position three and go to the end.

49
00:01:49,957 --> 00:01:51,768
Now, the fact the number three is in here,

50
00:01:51,768 --> 00:01:52,949
is sort of irrelevant.

51
00:01:52,949 --> 00:01:56,562
Um, three to the end
is those three numbers.

52
00:01:56,562 --> 00:01:59,113
And, then you can do the whole
list with slicing as well.

53
00:01:59,113 --> 00:02:01,147
Again, these are pretty
much the exact same examples

54
00:02:01,147 --> 00:02:02,674
I used when I was doing strings,

55
00:02:02,674 --> 00:02:05,091
they're pretty much the same.

56
00:02:07,673 --> 00:02:09,678
There's a number of different methods

57
00:02:09,678 --> 00:02:12,131
and you can look up all the
documentation in the list.

58
00:02:12,131 --> 00:02:15,908
I often just use the dir command
to remind myself of them,

59
00:02:15,908 --> 00:02:17,286
append we'll look at,

60
00:02:17,286 --> 00:02:19,686
count looks for certain
values in the list,

61
00:02:19,686 --> 00:02:21,965
extend adds things to the end of the list,

62
00:02:21,965 --> 00:02:23,865
index looks things up in the list,

63
00:02:23,865 --> 00:02:25,735
insert allows them,

64
00:02:25,735 --> 00:02:27,985
the list to sort of be
expanded in the middle,

65
00:02:27,985 --> 00:02:30,023
pop pulls things off the top,

66
00:02:30,023 --> 00:02:32,328
remove removes an item in the middle,

67
00:02:32,328 --> 00:02:34,104
reverse flips the order of them,

68
00:02:34,104 --> 00:02:38,271
and sort puts them sort of
into order based on the values.

69
00:02:39,496 --> 00:02:42,496
So, let's look at a couple of these.

70
00:02:45,182 --> 00:02:48,759
Um, so if we build a list from scratch,

71
00:02:48,759 --> 00:02:50,609
we have a way to ask for an empty list.

72
00:02:50,609 --> 00:02:51,916
There are a couple of different ways

73
00:02:51,916 --> 00:02:53,120
to ask for an empty list.

74
00:02:53,120 --> 00:02:55,761
We could use just two square
brackets next to each other.

75
00:02:55,761 --> 00:02:58,005
But, this is a form we
call a constructor form

76
00:02:58,005 --> 00:02:59,801
where we say, hey Python, make a list.

77
00:02:59,801 --> 00:03:01,672
And, in this case the word list

78
00:03:01,672 --> 00:03:03,272
is like a reserved word to Python,

79
00:03:03,272 --> 00:03:06,951
it's really reserve class, but, um.

80
00:03:06,951 --> 00:03:10,156
Say list, list parenthesis
says makes me an empty list

81
00:03:10,156 --> 00:03:12,372
and then, assign that list into stuff.

82
00:03:12,372 --> 00:03:15,236
So, stuff is now a list object,

83
00:03:15,236 --> 00:03:18,158
it's a type list but it has nothing in it.

84
00:03:18,158 --> 00:03:20,316
And, then we can call the append methods,

85
00:03:20,316 --> 00:03:22,902
stuff out of append and stick book in.

86
00:03:22,902 --> 00:03:25,039
And then, we say oh,
and that knows how long,

87
00:03:25,039 --> 00:03:26,746
and the stuff knows how long it is,

88
00:03:26,746 --> 00:03:28,761
where the end is and how
to add something to it,

89
00:03:28,761 --> 00:03:31,015
then add a ninety-nine to
it and we print it out.

90
00:03:31,015 --> 00:03:32,584
And, we got book and ninety-nine,

91
00:03:32,584 --> 00:03:34,527
reminding ourselves that lists,

92
00:03:34,527 --> 00:03:36,721
while they're often the
same types of variables,

93
00:03:36,721 --> 00:03:40,052
same types of values, in the
various positions in the list,

94
00:03:40,052 --> 00:03:42,462
it doesn't always have to be that way.

95
00:03:42,462 --> 00:03:44,783
Then we say, oh, we'll
stuff append cookie,

96
00:03:44,783 --> 00:03:46,043
you can keep on going

97
00:03:46,043 --> 00:03:50,462
and then we end up with
three things and the cookie.

98
00:03:50,462 --> 00:03:52,695
We have an in operator,

99
00:03:52,695 --> 00:03:56,362
it works pretty much like
the in operator in a string.

100
00:03:56,362 --> 00:03:58,221
Uh, is nine in my list?

101
00:03:58,221 --> 00:04:00,588
And, that's pretty simple and
the answer of course is yes,

102
00:04:00,588 --> 00:04:01,706
nine is in my list.

103
00:04:01,706 --> 00:04:02,967
Is fifteen in my list?

104
00:04:02,967 --> 00:04:06,308
Looking through, no it's not,
fifteen is not in my list.

105
00:04:06,308 --> 00:04:08,411
And then, there's the not in operator,

106
00:04:08,411 --> 00:04:10,605
you can think of that as
kind of like one operator.

107
00:04:10,605 --> 00:04:12,020
Is twenty not in the list?

108
00:04:12,020 --> 00:04:14,483
And the answer, since
it's not there, is true.

109
00:04:14,483 --> 00:04:16,751
And, so that's a way to just, you know,

110
00:04:16,751 --> 00:04:19,219
it's kind of like starts
with or end for strings.

111
00:04:19,219 --> 00:04:21,023
Same kind of stuff.

112
00:04:21,023 --> 00:04:23,434
Lists are in order and they're sortable,

113
00:04:23,434 --> 00:04:26,615
and so this is something
we take good advantage of.

114
00:04:26,615 --> 00:04:29,483
A lot of what computers
want to do is sort stuff,

115
00:04:29,483 --> 00:04:30,908
you know look all these things up,

116
00:04:30,908 --> 00:04:33,035
append them and then get them sorted.

117
00:04:33,035 --> 00:04:36,618
And so, there is this
method inside of list

118
00:04:37,632 --> 00:04:38,992
that's just the sort method.

119
00:04:38,992 --> 00:04:41,117
So, here we you know put three values

120
00:04:41,117 --> 00:04:42,466
in zero, one, two positions.

121
00:04:42,466 --> 00:04:44,705
Zero, one, and two,
Joseph, Glenn, and Sally.

122
00:04:44,705 --> 00:04:46,550
And, then we tell the list to sort itself

123
00:04:46,550 --> 00:04:47,796
and then we print it out.

124
00:04:47,796 --> 00:04:50,021
Now, this is actually
sorting the list in place

125
00:04:50,021 --> 00:04:52,046
which is different like
than upper and lower,

126
00:04:52,046 --> 00:04:54,658
because if you remember
strings are not mutable,

127
00:04:54,658 --> 00:04:56,835
but lists are mutable and so you say,

128
00:04:56,835 --> 00:04:58,681
hey, just sort yourself.

129
00:04:58,681 --> 00:05:01,642
Okay, and so just sort
yourself and then it sorts it.

130
00:05:01,642 --> 00:05:03,772
And then, it's in alphabetical order,

131
00:05:03,772 --> 00:05:05,231
Glenn, Joseph, and Sally.

132
00:05:05,231 --> 00:05:07,581
I happen to be clever, I
only put strings in there

133
00:05:07,581 --> 00:05:09,294
and I put my uppercase and lowercase

134
00:05:09,294 --> 00:05:10,472
in a very consistent pattern.

135
00:05:10,472 --> 00:05:11,885
But, the list has changed,

136
00:05:11,885 --> 00:05:13,133
and if I look at list sub one

137
00:05:13,133 --> 00:05:16,313
that is the second item, which is Joseph,

138
00:05:16,313 --> 00:05:19,063
that prints out right down there.

139
00:05:21,436 --> 00:05:23,410
There's a whole bunch
of built in functions

140
00:05:23,410 --> 00:05:24,701
to help manipulate lists,

141
00:05:24,701 --> 00:05:27,677
the other things I was
showing was method sort

142
00:05:27,677 --> 00:05:29,363
is a method that's part of lists

143
00:05:29,363 --> 00:05:30,697
but there are other functions

144
00:05:30,697 --> 00:05:32,266
that take lists as their arguments.

145
00:05:32,266 --> 00:05:34,687
Um, we already talked
about the len function,

146
00:05:34,687 --> 00:05:36,809
it tells you how many items there are.

147
00:05:36,809 --> 00:05:38,949
There is, pretty obvious, max,

148
00:05:38,949 --> 00:05:40,648
it says go through and find the largest.

149
00:05:40,648 --> 00:05:43,717
Min, go through and find the smallest.

150
00:05:43,717 --> 00:05:46,801
Sum, goes through adds them all up.

151
00:05:46,801 --> 00:05:49,335
And, we can say, let's do average

152
00:05:49,335 --> 00:05:50,882
by taking the sum of all of them

153
00:05:50,882 --> 00:05:53,812
and dividing it by the length.

154
00:05:53,812 --> 00:05:55,903
And you might think to yourself, oh wow,

155
00:05:55,903 --> 00:05:57,890
I wish we'd had known
this a few chapters back

156
00:05:57,890 --> 00:06:00,030
when we were having to
write all those loops

157
00:06:00,030 --> 00:06:03,244
to do max, min, sum,
largest, smallest, etc.

158
00:06:03,244 --> 00:06:05,326
You can kind of think in
your mind that inside each

159
00:06:05,326 --> 00:06:07,262
one of these functions
is a loop that does,

160
00:06:07,262 --> 00:06:09,158
pretty much, what you
did in those chapters.

161
00:06:09,158 --> 00:06:11,039
Part of the reason we did that back then,

162
00:06:11,039 --> 00:06:12,785
was even though these things were here,

163
00:06:12,785 --> 00:06:15,079
was they're kind of easy
loops to understand.

164
00:06:15,079 --> 00:06:17,329
And so, those are there and

165
00:06:20,130 --> 00:06:23,144
basically there allows two different ways

166
00:06:23,144 --> 00:06:26,115
of building loops to do
the maximum and minimum.

167
00:06:26,115 --> 00:06:30,198
Now, it's not necessarily
all that much easier to

168
00:06:31,211 --> 00:06:33,633
do something using these

169
00:06:33,633 --> 00:06:36,533
because you either can do them the old way

170
00:06:36,533 --> 00:06:39,733
or you can make a list
and use these functions.

171
00:06:39,733 --> 00:06:42,279
So, let's take a look, and
I'll just say that these

172
00:06:42,279 --> 00:06:45,871
two bits of code are doing
the exact same thing,

173
00:06:45,871 --> 00:06:47,903
and what they are is
implementing a program,

174
00:06:47,903 --> 00:06:50,003
that's going to repeatedly ask for numbers

175
00:06:50,003 --> 00:06:51,746
until we type the word done,

176
00:06:51,746 --> 00:06:53,558
and then it's going to compute the average

177
00:06:53,558 --> 00:06:54,715
and tell us what they are.

178
00:06:54,715 --> 00:06:59,417
And, so using sort of the
stuff from the loop chapter,

179
00:06:59,417 --> 00:07:01,508
we start with a total
variable and a count variable,

180
00:07:01,508 --> 00:07:04,625
set them to zero and
then we read a number,

181
00:07:04,625 --> 00:07:06,734
check for done to break out,

182
00:07:06,734 --> 00:07:09,454
but then we convert it
to a floating-point value

183
00:07:09,454 --> 00:07:11,465
and then we say total
equals total plus value

184
00:07:11,465 --> 00:07:12,726
and count equals count plus one.

185
00:07:12,726 --> 00:07:15,158
So, this is gonna run over
and over and over again,

186
00:07:15,158 --> 00:07:17,202
how ever many times
we're going to do this.

187
00:07:17,202 --> 00:07:19,445
And then, it's going to
pop out and when it's done,

188
00:07:19,445 --> 00:07:21,344
it's going to have this value of total,

189
00:07:21,344 --> 00:07:23,835
the running total will
become the overall total

190
00:07:23,835 --> 00:07:27,135
divided by count and then it'll
print the average out, okay.

191
00:07:27,135 --> 00:07:29,774
So, that, that's kind of
how we would have done this

192
00:07:29,774 --> 00:07:32,465
before we knew how to do this with lists.

193
00:07:32,465 --> 00:07:35,745
Now, let's take a look at the other one.

194
00:07:35,745 --> 00:07:38,366
And, the other one, we say
lets make an empty list,

195
00:07:38,366 --> 00:07:40,815
remember this is that constructive syntax

196
00:07:40,815 --> 00:07:43,193
that says to Python, make me an empty list

197
00:07:43,193 --> 00:07:44,789
and assign the empty list.

198
00:07:44,789 --> 00:07:46,810
It has nothing in it. Right.

199
00:07:46,810 --> 00:07:47,919
But it is a list.

200
00:07:47,919 --> 00:07:50,104
Has nothing in it, into
the variable numlist.

201
00:07:50,104 --> 00:07:51,856
Now, we're going to write another loop,

202
00:07:51,856 --> 00:07:53,796
we're going to, this
part here is the same.

203
00:07:53,796 --> 00:07:54,818
These three lines.

204
00:07:54,818 --> 00:07:57,998
Read the number, if it's done,
quit and convert to value.

205
00:07:57,998 --> 00:08:00,426
But instead of doing the
actual calculation right now,

206
00:08:00,426 --> 00:08:02,344
all we're going to do is
just append it to the list.

207
00:08:02,344 --> 00:08:03,773
So, the list will start out empty,

208
00:08:03,773 --> 00:08:05,405
then the three will be in the list,

209
00:08:05,405 --> 00:08:06,586
then the nine will be in the list,

210
00:08:06,586 --> 00:08:08,194
then the five will be in the list.

211
00:08:08,194 --> 00:08:10,496
So, we're appending each
time through the loop

212
00:08:10,496 --> 00:08:12,050
we're appending into the list.

213
00:08:12,050 --> 00:08:15,370
So, we're just growing the list
every time I read it value.

214
00:08:15,370 --> 00:08:17,326
Instead of actually computing something

215
00:08:17,326 --> 00:08:18,687
with the value that we've got,

216
00:08:18,687 --> 00:08:20,897
so in either case we get value

217
00:08:20,897 --> 00:08:23,712
and in one case we append it to the list.

218
00:08:23,712 --> 00:08:25,802
And then finally, it
finishes, the break happens

219
00:08:25,802 --> 00:08:27,918
and then we just say, oh hey Python,

220
00:08:27,918 --> 00:08:29,201
sum up everything in the list,

221
00:08:29,201 --> 00:08:30,545
add these three numbers together,

222
00:08:30,545 --> 00:08:32,379
and then take the, divide it by the length

223
00:08:32,379 --> 00:08:34,683
of all those things and
you'll have the average.

224
00:08:34,683 --> 00:08:39,216
And, so these two things give
us exactly the same output.

225
00:08:39,216 --> 00:08:40,903
Now, there is one difference,

226
00:08:40,903 --> 00:08:45,466
if there was like one million
or one billion numbers,

227
00:08:45,466 --> 00:08:47,140
they actually all have to be stored

228
00:08:47,140 --> 00:08:48,437
in the memory simultaneously.

229
00:08:48,437 --> 00:08:50,675
Where as here, it's actually
doing the calculation

230
00:08:50,675 --> 00:08:53,606
of the billion numbers and
not using up so much memory.

231
00:08:53,606 --> 00:08:55,807
For most of the things
you're going to be doing,

232
00:08:55,807 --> 00:08:58,512
the difference in memory, there
is a difference in memory,

233
00:08:58,512 --> 00:09:02,362
this uses, this one here uses more memory,

234
00:09:02,362 --> 00:09:04,112
but I can't draw very well.

235
00:09:04,112 --> 00:09:07,669
More memory, um, it uses more memory,

236
00:09:07,669 --> 00:09:09,667
but it doesn't really matter

237
00:09:09,667 --> 00:09:11,216
by the time it's all said and done.

238
00:09:11,216 --> 00:09:15,031
And so, for you, the
difference between these things

239
00:09:15,031 --> 00:09:16,625
is not all that significant,

240
00:09:16,625 --> 00:09:19,407
but it's important to
understand that they're just two

241
00:09:19,407 --> 00:09:23,470
techniques to accomplish
the same thing with lists.

242
00:09:23,470 --> 00:09:26,303
(classical music)

